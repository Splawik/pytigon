{# -*- coding: utf-8 -*- #}

% extends "standard/ifind/ifindpanel.html"

%% extrahead
    meta name=vertical_position,,,content=bottom

%% pythoncode
    script language=python
        def init_form(self):
            self.SEARCH.Bind(wx.EVT_KEY_UP, self.OnKeyUp)
            self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearch)
            self.NEXT.Bind(wx.EVT_BUTTON, self.OnNext)
            self.PREV.Bind(wx.EVT_BUTTON, self.OnPrev)
            self.EXIT.Bind(wx.EVT_BUTTON, self.OnExit)
            self.REPLACE.Bind(wx.EVT_BUTTON, self.OnReplace)
            self.REPLACE_ALL.Bind(wx.EVT_BUTTON, self.OnReplaceAll)

            self.search_txt = ""
            self.SEARCH.SetFocus()

        def SearchText(self, regex=False, back=False, corectSelection=False):
            editor = self.get_parent_form().EDITOR
            text   = self.search_txt

            flags = wx.stc.STC_FIND_MATCHCASE
            if regex:
                flags = flags | wx.stc.STC_FIND_REGEXP

            if not back and corectSelection:
                editor.SetSelectionStart(editor.GetSelectionEnd())

            editor.SearchAnchor()
            if not back:
                # Search forward
                res = editor.SearchNext(flags, text)
                if res == -1:
                    # Nothing found, search from top
                    editor.DocumentStart()
                    editor.SearchAnchor()
                    res = editor.SearchNext(flags, text)
            else:
                # Search backward
                res = editor.SearchPrev(flags, text)
                if res == -1:
                    # Nothing found, search from bottom
                    editor.DocumentEnd()
                    editor.SearchAnchor()
                    res = editor.SearchPrev(flags, text)
            editor.EnsureCaretVisible()
            return res


        def OnDoSearch(self, event):
            self.SearchText(corectSelection=True)

        def OnNext(self, event):
            self.SearchText(corectSelection=True)

        def OnPrev(self, event):
            self.SearchText(back=True)

        def Search(self):
            self.SearchText()

        def OnKeyUp(self, event):
            value = self.SEARCH.GetValue()
            if value!=self.search_txt:
                self.search_txt=value
                self.SearchText()
            event.Skip()

        def OnExit(self, event):
            self.any_parent_command('Cancel', True)

        def OnReplace(self, event):
            editor = self.GetParentPanel()['EDITOR']
            editor.ReplaceSelection(self.REPLACE_TXT.GetValue())

        def OnReplaceAll(self, event):
            editor = self.get_parent_form().EDITOR
            self.search_txt=self.SEARCH.GetValue()
            while(self.SearchText()>0):
                editor.ReplaceSelection(self.REPLACE_TXT.GetValue())


%% content
    table width=100%,,,height=100%
        tr
            td:::CTRL-TEXT NAME=SEARCH
            td:::CTRL-BITMAPBUTTON NAME=PREV,,,SRC=wx.ART_GO_UP
            td:::CTRL-CHECKBOX label=Whole Word
            td:::CTRL-BUTTON label=Replace,,,NAME=REPLACE
            td width=99%
            td:::CTRL-BITMAPBUTTON NAME=EXIT,,,SRC=wx.ART_CROSS_MARK
        tr
            td:::CTRL-TEXT NAME=REPLACE_TXT,,,WIDTH=200
            td:::CTRL-BITMAPBUTTON NAME=NEXT,,,SRC=wx.ART_GO_DOWN
            td:::CTRL-CHECKBOX label=Regular Expression
            td:::CTRL-BUTTON label=Replace all,,,NAME=REPLACE_ALL
            td width=99%
            td
