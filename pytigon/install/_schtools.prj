[
    [
        null,
        "",
        "auto",
        null,
        null,
        null,
        "toolbar(file(exit),clipboard)",
        "modern",
        null,
        null,
        false,
        false,
        "_schtools",
        null,
        true,
        null,
        "auto",
        null,
        "auto",
        "Pytigon tools",
        "###> schsimplescripts/__init__.py\n\nfrom django.utils.translation import ugettext_lazy as _\n\ndef AdditionalUrls(app_pack, lang):\n    from .models import Scripts\n    ret = []\n    ret_buf = []\n    for object in Scripts.objects.all():\n        if object.menu:\n            elements = object.menu.split(',')\n\n            menu_path=elements[0].split('/')            \n            app_pack_name = menu_path[0]\n            if app_pack and app_pack_name and app_pack != app_pack_name:\n                continue\n            module_title = \"\"\n            app_name = \"\"\n            if len(menu_path)>1:\n                module_title = menu_path[1]\n            if len(menu_path)>2:\n                app_name = menu_path[2]\n            if len(elements)>1:\n                if elements[1]:\n                    icon = elements[1]\n                else:\n                    icon = 'client://apps/utilities-terminal.png'                    \n            else:\n                icon = 'client://apps/utilities-terminal.png'                    \n            if len(elements)>2:\n                lp = elements[2]\n            else:\n                lp = '00'\n            if len(elements)>3:\n                if elements[3] and lang != elements[3]:\n                    continue\n                    \n            ret_buf.append((lp, (\"schsimplescripts/run/\"+object.name+\"/?schtml=1\", object.title, object.rights_group, icon, module_title, _(module_title), app_name, _(app_name))))\n\n    if ret_buf:        \n        buf = sorted(ret_buf, key=lambda pos: pos[0])  \n        for pos in buf:\n            ret.append(pos[1])\n        return ret\n    else:\n        return []\n            ",
        ""
    ],
    [
        [
            [
                "import select\nimport time\nfrom threading import Thread\nimport subprocess\nimport struct\n\ntry:\n    import pty\n    import fcntl\n    import termios\nexcept:\n    pass\n    \nfrom schlib.schtools.tools import get_executable\n\ndef read_and_forward_pty_output(consumer):\n    max_read_bytes = 1024 * 20\n    while not consumer.exit:\n        time.sleep(0.01)\n        if consumer.fd:\n            timeout_sec = 1\n            (data_ready, _, _) = select.select([consumer.fd, ], [], [], timeout_sec)\n            if data_ready:\n                output = os.read(consumer.fd, max_read_bytes).decode()\n                if output:\n                    consumer.send(text_data=output)\n    print(\"Shell closed\")\n",
                null,
                null,
                null,
                "Tools",
                "schcommander",
                false,
                "",
                "File manager",
                null,
                "",
                "from schlib.schtable.vfstable import vfstable_view, vfsopen, vfssave, vfsopen_page\nfrom schtools.models import Parameter\nimport django.contrib.auth\n"
            ],
            [],
            [
                [
                    [
                        "file_manager_sort_choices",
                        "file_manager_sort_choices"
                    ],
                    [
                        [
                            "N",
                            "Name"
                        ],
                        [
                            "S",
                            "Size"
                        ],
                        [
                            "T",
                            "Time"
                        ]
                    ]
                ]
            ],
            [
                [
                    null,
                    "grid",
                    "folder, value",
                    "U",
                    "grid/(?P<folder>.*)/(?P<value>[\\w=]*)/$",
                    "{}",
                    "return vfstable_view(request, folder, value)",
                    "u"
                ],
                [
                    null,
                    "open",
                    "file_name",
                    "U",
                    "open/(?P<file_name>.*)/$",
                    "{}",
                    "return vfsopen(request, file_name)",
                    "u"
                ],
                [
                    null,
                    "save",
                    "file_name",
                    "U",
                    "save/(?P<file_name>.*)/$",
                    "{}",
                    "return vfssave(request, file_name)",
                    "u"
                ],
                [
                    null,
                    "open_page",
                    "file_name, page",
                    "U",
                    "open_page/(?P<file_name>.*)/(?P<page>\\d+)/$",
                    "{}",
                    "return vfsopen_page(request, file_name, page)",
                    "u"
                ]
            ],
            [
                [
                    null,
                    "FormFileManager",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n\n% extends \"form.html\"\n\n% load exfiltry\n% load exsyntax\n\n%% pythoncode\n    script language=python\n        from base64 import b32encode, b32decode\n        from schlib.schtools.schhtmlgen import Html as Hgen\n        from schlib.schtasks.task import get_process_manager\n        from PIL import Image\n        from schlib.schtools.tools import extend_fun_to, bencode, bdecode\n        from schcli.guilib.image import bitmap_from_href\n        from wx.lib import platebtn\n\n        def init_form(self):\n            self.panels_dir=[]\n            self.panels_state=[]\n            self.tab  = 0\n            self.tab2 = 1\n            for pos in range(0,4):\n                self.panels_dir.append([pos+1, 0, \"/\", False])\n                self.panels_state.append(None)\n\n            #x = [ None, None, None, None ]\n            #for base_key in [ 'commander/{{request.user.username}}/path', 'commander/all/path']:\n            #    print(base_key)\n            #    test  = True\n            #    for i in range(4):\n            #        if not x[i]:\n            #            objs = Parameter.objects.filter(key=base_key+str(i))\n            #            if len(objs)>0:\n            #                x[i] = objs[0].value\n            #            else:\n            #                test = False\n            #    if test:\n            #        break\n            #for i in range(0,4):\n            #    if x[i]:\n            #        self.panels_dir[i][2] = x[i]\n                    \n            self.panels_to_refresh=[]\n            \n            self.aTable = [\n                    (0, wx.WXK_F1,  self.on_help),\n                    (0, wx.WXK_F2,  self.on_rename),\n                    (0, wx.WXK_F3,  self.on_view),\n                    (0, wx.WXK_F4,  self.on_edit),\n                    (0, wx.WXK_F5,  self.on_copy),\n                    (0, wx.WXK_F6,  self.on_move),\n                    (0, wx.WXK_F7,  self.on_mkdir),\n                    (0, wx.WXK_F8,  self.on_delete),\n                    (0, wx.WXK_F9,  self.on_setup),\n                    (0, wx.WXK_F10, self.on_user_menu),\n                    (0, wx.WXK_F11, self.on_newfile),\n                    (0, wx.WXK_TAB, self.on_tab),\n                    (0, wx.WXK_BACK, self.on_back),\n                    (0, wx.WXK_HOME, lambda event: self.CMD.goto_first_row()),\n                    (0, wx.WXK_END, lambda event: self.CMD.goto_last_row())\n                     ]\n            self.set_acc_key_tab(self, self.aTable)\n\n            self.CMD.GetTable().can_append=False\n            self.CMD.Bind(wx.EVT_CHAR, self.on_char)\n            self.CMD.DisableCellEditControl()\n            self.CMD.GetTable().proxy.set_address(\"../../\"+b32encode(self.panels_dir[0][2].encode('utf-8') ).decode('utf-8')+\"/_/\")\n            self.CMD.GetTable().refresh(0)\n\n            self.PANELS.body.Bind(wx.EVT_SET_FOCUS, self.on_panels_set_focus)\n\n            self.refresh_html()\n            Image.init()\n            self.edit_img_win = None\n            wx.grid.EVT_GRID_SELECT_CELL(self.CMD, self.on_select_cell)\n            self.PANELS.body.filter_url = self.filter_url\n            self.child_win = None\n            self.waiting_proc = []\n\n            self._make_process_info_button()\n\n            self.GetParent().register_signal(self, \"child_closed_with_ok\")\n            self.GetParent().register_signal(self, \"child_canceled\")\n\n        def child_closed_with_ok(self):\n            self._refresh_panels()\n\n        def child_canceled(self):\n            self.child_win = None\n\n        def _make_process_info_button(self):\n            page = self.page.GetParent()\n            notebook = page.GetParent()\n            id = notebook.GetPageIndex(page)\n\n            b = bitmap_from_href(\"client://actions/media-record.png\", 0)\n            image = wx.ImageFromBitmap(b)\n            image = image.Scale(16, 12, wx.IMAGE_QUALITY_HIGH)\n            bmp = wx.BitmapFromImage(image)\n\n            self.pbutton = platebtn.PlateButton(notebook, wx.ID_ANY, \"\", bmp, style=platebtn.PB_STYLE_NOBG|platebtn.PB_STYLE_SQUARE)\n            self.pbutton.SetWindowVariant(wx.WINDOW_VARIANT_SMALL)\n            self.pbutton.Disable()\n\n            notebook.AddControlToPage(id, self.pbutton)\n            self.pbutton.Bind(wx.EVT_BUTTON, self.on_pbutton)\n\n        def on_pbutton(self, event):\n            wx.GetApp().GetTopWindow().new_main_page(\"/tasks/form/TaskListForm/?schtml=1\", \"Task list\")\n\n        def handle_process_info(self, info_tab, **argv):\n            for pos2 in self.waiting_proc:\n                id = pos2[0]\n                panels_to_refresh = pos2[1]\n                test = True\n                for pos in info_tab:\n                    if id == pos.id:\n                        if pos.status in (0,1):\n                            test = False\n                        break\n                if test:\n                    self.CMD.GetTable().clear_state()\n                    if panels_to_refresh in (1,3):\n                        self.panels_to_refresh.append(self.panels_dir[self.tab][2])\n                    if panels_to_refresh in (1,3):\n                        self.panels_to_refresh.append(self.panels_dir[self.tab2][2])\n                    self._refresh_panels()\n                    self.waiting_proc.remove(pos2)\n\n            if len(self.waiting_proc)==0:\n                self.unreg_application_signal_handler('PROCESS_INFO')\n                self.pbutton.Disable()\n            \n        def _transform_item(self, item):\n            from schlib.schfs.vfstools import norm_path\n            item2 = norm_path(item)\n            if len(item2)>32:\n                x = item2[-28:]\n                id = x.find('/')\n                if id>0:\n                    item2 = '...'+x[id+1:]\n                else:\n                    item2 = '...'+item[-27:]\n            return item2\n\n        def on_panels_set_focus(self, evt):\n            print(\"ON_SET_FOCUS\")\n            self.CMD.SetFocus()\n\n        def show_item(self, nr, item):\n            strong = False\n            if nr == self.tab:\n                color = wx.GetApp().COLOUR_HIGHLIGHT\n                strong = True\n            elif nr == self.tab2:\n                strong = True\n                color = wx.GetApp().COLOUR_BACKGROUND\n            else:\n                color = wx.GetApp().COLOUR_BACKGROUND\n\n            p = Hgen(\"p\")\n            p.setattr(\"bgcolor='%s' width='100%%' border='0'\" % color)\n\n            item2 = self._transform_item(item)\n\n            a = p.append(\"a\", \"href='%s'\" % str(nr))\n            if len(item2)>32:\n                font = a.append(\"small\", \"\")\n            else:\n                font = a\n            if strong:\n                txt = font.append(\"strong\")\n                txt.value  = str(nr+1) + \". \" + item2\n            else:\n                font.value = str(nr+1) + \". \" + item2\n            return p\n\n        def refresh_html(self):\n            html = Hgen(\"html\", \"\")\n            body = html.append(\"body\", \"width = '100%%' bgcolor='%s'\" % wx.GetApp().COLOUR_BACKGROUND)\n            for i in range(2):\n                body.append( self.show_item(i, self.panels_dir[i][2]) )\n            self.PANELS.set_page(html.dump())\n\n        def filter_url(self, target, href):\n            id = int(href)\n            if id != self.tab:\n                self.tab2 = self.tab\n                self.tab = id\n                self.change_panel()\n            return True\n\n        def change_panel(self):\n            self.panels_state[self.tab2]=self.CMD.get_table_and_state()\n\n            if self.panels_state[self.tab]==None:\n                self.CMD.duplicate_table_and_state()\n                self.CMD.GetTable().proxy.set_address(\"../../\"+b32encode(self.panels_dir[self.tab][2].encode('utf-8') ).decode('utf-8')+\"/_/\")\n                self.panels_state[self.tab]=self.CMD.get_table_and_state()\n                self.CMD.GetTable().refresh(0)\n            else:\n                self.CMD.set_table_and_state(self.panels_state[self.tab])\n\n                if self.panels_dir[self.tab][3]:\n                    self.panels_dir[self.tab][3]=False\n                    self.CMD.GetTable().refresh(0)\n\n            self.refresh_html()\n\n\n        def on_char(self, evt):\n            if evt.KeyCode >= ord('1') and evt.KeyCode <= ord('4'):\n                i = evt.KeyCode - ord('1')\n                if evt.ControlDown():\n                    if i != self.tab2:\n                        self.tab2 = i\n                        self.refresh_html()\n                else:\n                    if i != self.tab:\n                        self.tab2 = self.tab\n                        self.tab = i\n                        self.change_panel()\n            elif chr(evt.KeyCode).isalpha() or chr(evt.KeyCode).isdigit():\n                if not self.child_win:\n                    okno = self.new_child_page(\"^standard/tablefilter/tablefilter.html\", title=\"Filter\")\n                    self.child_win = okno.body\n                    self.child_win.set_acc_key_tab(self.child_win.SEARCH, self.aTable[:-4])\n                    if hasattr(self.CMD, 'grid_aTable'):\n                        self.child_win.set_acc_key_tab(self.child_win.SEARCH, self.CMD.grid_aTable)\n                    self.child_win.refr()\n                    self.child_win.Show()\n                wx.CallAfter(self.child_win.start_key, evt.KeyCode)\n            else:\n                evt.Skip()\n\n        def _refresh_panels(self):\n            for panel in self.panels_dir:\n                if panel[2] in self.panels_to_refresh:\n                    panel[3]=True\n                    if self.tab+1 == panel[0]:\n                        self.CMD.GetTable().refresh(0)\n                        self.refresh_html()\n            self.panels_to_refresh=[]\n\n        def on_back(self, url):\n            key = \"\"\n            self.CMD.GetTable().filter(key)\n\n        def table_url(self, url):\n            self.panels_dir[self.tab][2] = b32decode(url.split('/')[-3]).decode('utf-8')\n            self.CMD.GetTable().clear_state()\n            self.CMD.GetTable().filter(\"\")\n            self.CMD.SetGridCursor(0, 0)\n            self.CMD.MakeCellVisible(0, 0)\n            self.refresh_html()\n\n        def table_command(self, url):\n            self.on_edit(None)\n\n        def on_help(self, event):\n            pass\n\n        def on_view(self, evt):\n            pass\n\n        def get_name_and_ext(self, row=None):\n            if row==None:\n                row = self.CMD.GetGridCursorRow()\n            rec = self.CMD.GetTable().get_rec(row)\n            file_name = rec[0] #.decode('utf-8')\n            href = self.CMD.GetTable().proxy.tabaddress+\"/../../../../open/\"+file_name+\"/\"\n            href2 = self.CMD.GetTable().proxy.tabaddress+\"/../../../../save/\"+file_name+\"/\"\n            try:\n                name = b32decode(file_name).decode('utf-8').split('/')[-1]\n            except:\n                name = b32decode(rec[0]).decode('utf-8').split('/')[-1]\n            ext = name.split(\".\")\n            if len(ext)>1:\n                return (file_name, name, ext[-1])\n            else:\n                return (file_name, name, \"\")\n\n        def is_image(self, row=None):\n            id,name,ext = self.get_name_and_ext(row)\n            if '.'+ext.lower() in Image.EXTENSION:\n                return True\n            else:\n                return False\n\n        def exec_editor(self, row):\n            id, name, ext = self.get_name_and_ext(row)\n            href = self.CMD.GetTable().proxy.tabaddress+\"/../../../../open/\"+id+\"/\"\n            href2 = self.CMD.GetTable().proxy.tabaddress+\"/../../../../save/\"+id+\"/\"\n            if '.'+ext.lower() in Image.EXTENSION: # ('jpg', 'jpeg', 'gif', 'png', 'bmp'):\n                if self.edit_img_win:\n                    okno = self.edit_img_win\n                    okno.change_notebook_page_title(name)\n                else:\n                    print(\"X1\")\n                    okno = self.new_main_page(\"^standard/image_viewer/viewer.html\", name, None)\n                    print(\"X2\", okno)\n                    self.edit_img_win=okno\n            else:\n                if ext.lower() in ('txt', 'py', 'c', 'cpp', 'h', 'hpp', 'java', 'ihtml', 'html'):\n                    okno = self.new_main_page(\"^standard/editor/editor.html\", name, None)\n                else:\n                    if ext.lower() in ('svg',):\n                        #href = self.CMD.GetTable().proxy.tabaddress+\"/../../../../open_page/\"+id+\"/\"\n                        okno = self.new_main_page(\"^standard/svgctrl/viewer.html\", name, None)\n                    else:\n                        href = self.CMD.GetTable().proxy.tabaddress+\"/../../../../open_page/\"+id+\"/\"\n                        okno = self.new_main_page(\"^standard/hexview/viewer.html\", name, None)\n            ed = okno.body.EDITOR\n            ed.load_from_url(href, ext)\n            if hasattr(ed, 'GotoPos'):\n                ed.GotoPos(0)\n            if hasattr(ed, 'set_save_path'):\n                okno.body.EDITOR.set_save_path(href2)\n\n        def on_edit(self, evt):\n            row = self.CMD.GetGridCursorRow()\n            return self.exec_editor(row)\n\n\n        def on_rename(self, event):\n            win = self.new_child_page(\"/schcommander/form/Rename/\")\n\n            commander_form = self\n\n            @extend_fun_to(win.body)\n            def href_clicked(self, ctrl, attr_dict, upload=False, fields=False, params=None):\n                ret = commander_form.CMD.GetTable().run_cmd('RENAME', ( bencode(commander_form.panels_dir[commander_form.tab][2]), bencode(self.name.GetValue())), 1)\n                commander_form.panels_to_refresh.append(commander_form.panels_dir[commander_form.tab][2])\n                commander_form._refresh_panels()\n                def _exit():\n                    self.any_parent_command('on_child_form_cancel')\n                wx.CallAfter(_exit)\n\n\n        def on_copy(self, evt):\n            d=self.panels_dir[self.tab2][2]\n            for i in range(4):\n                if not i in (self.tab, self.tab2):\n                    d += \";\" + self.panels_dir[i][2]\n\n            win = self.new_child_page(\"/schcommander/form/Copy/\", param={'dir': d, })\n            \n            commander_form = self\n\n            @extend_fun_to(win.body)\n            def href_clicked(self, ctrl, attr_dict, upload=False, fields=False, params=None):\n                ret = commander_form.CMD.GetTable().run_cmd('COPY', ( bencode(commander_form.panels_dir[commander_form.tab][2]), bencode(self.dest.GetValue())), 1)\n                if 'process' in ret:\n                    commander_form.waiting_proc.append((ret['process'], 2))\n                    commander_form.pbutton.Enable()\n                    commander_form.reg_application_signal_handler(commander_form.handle_process_info, 'PROCESS_INFO')\n                def _exit():\n                    self.any_parent_command('on_child_form_cancel')\n                wx.CallAfter(_exit)\n\n        def on_move(self, evt):\n            d=self.panels_dir[self.tab2][2]\n            for i in range(4):\n                if not i in (self.tab, self.tab2):\n                    d += \";\" + self.panels_dir[i][2]\n\n            win = self.new_child_page(\"/schcommander/form/Move/\", param={'dir': d, })\n            \n            commander_form = self\n            \n            @extend_fun_to(win.body)\n            def href_clicked(self, ctrl, attr_dict, upload=False, fields=False, params=None):\n                ret = commander_form.CMD.GetTable().run_cmd('MOVE', ( bencode(commander_form.panels_dir[commander_form.tab][2]), bencode(self.dest.GetValue())), 1)\n                if 'process' in ret:\n                    commander_form.waiting_proc.append((ret['process'], 3))\n                    commander_form.pbutton.Enable()\n                    commander_form.reg_application_signal_handler(commander_form.handle_process_info, 'PROCESS_INFO')\n                def _exit():\n                    self.any_parent_command('on_child_form_cancel')\n                wx.CallAfter(_exit)\n\n\n        def on_newfile(self, evt):\n            win = self.new_child_page(\"/schcommander/form/NewFile/\")\n\n            commander_form = self\n\n            @extend_fun_to(win.body)\n            def href_clicked(self, ctrl, attr_dict, upload=False, fields=False, params=None):\n                ret = commander_form.CMD.GetTable().run_cmd('NEWFILE', ( bencode(commander_form.panels_dir[commander_form.tab][2]), bencode(self.name.GetValue())), 1)\n                commander_form.panels_to_refresh.append(commander_form.panels_dir[commander_form.tab][2])\n                commander_form._refresh_panels()\n                def _exit():\n                    self.any_parent_command('on_child_form_cancel')\n                wx.CallAfter(_exit)\n    \n\n        def on_mkdir(self, evt):\n            win = self.new_child_page(\"/schcommander/form/MkDir/\")\n\n            commander_form = self\n\n            @extend_fun_to(win.body)\n            def href_clicked(self, ctrl, attr_dict, upload=False, fields=False, params=None):\n                ret = commander_form.CMD.GetTable().run_cmd('MKDIR', ( bencode(commander_form.panels_dir[commander_form.tab][2]), bencode(self.name.GetValue())), 1)\n                commander_form.panels_to_refresh.append(commander_form.panels_dir[commander_form.tab][2])\n                commander_form._refresh_panels()\n                def _exit():\n                    self.any_parent_command('on_child_form_cancel')\n                wx.CallAfter(_exit)\n   \n        def on_delete(self, evt):\n            ret = self.CMD.GetTable().run_cmd('DELETE', (b32encode(self.panels_dir[self.tab][2].encode('utf-8')), b32encode(b'TRASH')), 1)\n            if 'process' in ret:\n                self.waiting_proc.append((ret['process'], 1))\n                self.pbutton.Enable()\n                self.reg_application_signal_handler(self.handle_process_info, 'PROCESS_INFO')\n\n        def on_setup(self, evt):\n            win = self.new_child_page(\"/schcommander/form/Setup/\", param={'dir': \";\".join([ pos[2] for pos in self.panels_dir]), })\n    \n        def on_user_menu(self, evt):\n            pass\n\n        def on_tab(self, evt):\n            i = self.tab2\n            self.tab2 = self.tab\n            self.tab =i\n            self.change_panel()\n\n        def on_select_cell(self, evt):\n            row = evt.GetRow()\n            if self.edit_img_win and self.is_image(row):\n                self.exec_editor(row)\n            evt.Skip()\n\n\n%%form_title\n    .Commander\n\n%% content\n    table width=100%\n        tr\n            td\n                CTRLHTML name=PANELS,,,width=100%,,,height=42\n        tr\n            td\n                CTRLNOBG_BUTTON width=36,,,height=36,,,name=paste,,,label=paste,,,src=client://actions/list-add.png\n                CTRLNOBG_BUTTON width=36,,,height=36,,,name=paste,,,label=paste,,,src=client://actions/list-add.png\n                CTRLNOBG_BUTTON width=36,,,height=36,,,name=paste,,,label=paste,,,src=client://actions/list-add.png\n                CTRLNOBG_BUTTON width=36,,,height=36,,,name=paste,,,label=paste,,,src=client://actions/list-add.png\n                CTRLNOBG_BUTTON width=36,,,height=36,,,name=paste,,,label=paste,,,src=client://actions/list-add.png\n        tr\n            td\n                CTRLGRID name=CMD,,,width=100%,,,height=100%,,,READONLY=1,,,src={{base_path}}schcommander/grid/_/_/,,,keymap=standard\n\n",
                    null,
                    null
                ],
                [
                    null,
                    "FormMove",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n% extends \"forms/user_tab.html\"\n\n% load exfiltry\n% load exsyntax\n\n%% extrahead\n    % if OK:\n        meta name=target,,,content=_parent_refr\n\n%% form_content_schbutton\n    input type=submit,,,value=OK,,,class=btn btn-info,,,target=_self,,,height=44\n\n\n%% all\n    %with show_title_bar=1 title='Move' vform=True\n        {{ block.super }}\n\n",
                    null,
                    null
                ],
                [
                    null,
                    "FormMkDir",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n% extends \"forms/user_tab.html\"\n\n% load exfiltry\n% load exsyntax\n\n%% extrahead\n    % if OK:\n        meta name=target,,,content=_parent_refr\n\n%% form_content_schbutton\n    input type=submit,,,value=OK,,,class=btn btn-info,,,target=_self,,,height=44\n\n\n%% all\n    %with show_title_bar=1 title='Make directory' vform=True\n        {{ block.super }}\n\n",
                    null,
                    null
                ],
                [
                    null,
                    "FormSetup",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n% extends \"forms/user_tab.html\"\n\n% load exfiltry\n% load exsyntax\n\n%% extrahead\n    % if OK:\n        meta name=target,,,content=_parent_refr\n\n%% form_content_schbutton\n    input type=submit,,,value=OK,,,class=btn btn-info,,,target=_self,,,height=44\n\n\n%% all\n    %with show_title_bar=1 title='Setup' vform=True\n        {{ block.super }}\n\n",
                    null,
                    null
                ],
                [
                    null,
                    "FormCopy",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n% extends \"forms/user_tab.html\"\n\n% load exfiltry\n% load exsyntax\n\n%% extrahead\n    % if OK:\n        meta name=target,,,content=_parent_refr\n\n%% form_content_schbutton\n    input type=submit,,,value=OK,,,class=btn btn-info,,,target=_self,,,height=44\n\n\n%% all\n    %with show_title_bar=1 title='Copy' vform=True\n        {{ block.super }}\n\n",
                    null,
                    null
                ],
                [
                    null,
                    "FormNewFile",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n% extends \"forms/user_tab.html\"\n\n% load exfiltry\n% load exsyntax\n\n%% extrahead\n    % if OK:\n        meta name=target,,,content=_parent_refr\n\n%% form_content_schbutton\n    input type=submit,,,value=OK,,,class=btn btn-info,,,target=_self,,,height=44\n\n\n%% all\n    %with show_title_bar=1 title='New file' vform=True\n        {{ block.super }}\n\n",
                    null,
                    null
                ],
                [
                    null,
                    "FormRename",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n% extends \"forms/user_tab.html\"\n\n% load exfiltry\n% load exsyntax\n\n%% extrahead\n    % if OK:\n        meta name=target,,,content=_parent_refr\n\n%% form_content_schbutton\n    input type=submit,,,value=OK,,,class=btn btn-info,,,target=_self,,,height=44\n\n\n%% all\n    %with show_title_bar=1 title='Rename' vform=True\n        {{ block.super }}\n\n",
                    null,
                    null
                ]
            ],
            [],
            [
                [
                    [
                        "",
                        "",
                        "",
                        "schcommander",
                        "FileManager",
                        ""
                    ],
                    [
                        [
                            "",
                            "",
                            "",
                            "Folder",
                            "folder",
                            "",
                            true,
                            "CharField",
                            ""
                        ],
                        [
                            "",
                            "",
                            "",
                            "Sort",
                            "sort",
                            "choices=models.file_manager_sort_choices",
                            true,
                            "ChoiceField",
                            ""
                        ]
                    ]
                ],
                [
                    [
                        "",
                        "def preprocess_request(self, request):\n    if 'dir' in request.POST:\n        dirs = request.POST['dir'].split(';')\n        choices = [ [pos, pos] for pos in dirs ]\n        self.data =  { 'dest': choices[0][0], }\n        self.fields['dest'].choices = choices\n        return None\n    else:\n        return request.POST\n",
                        "",
                        "",
                        "Move",
                        ""
                    ],
                    [
                        [
                            "",
                            "",
                            "",
                            "Destination",
                            "dest",
                            "choices=[]",
                            true,
                            "ChoiceField",
                            ""
                        ]
                    ]
                ],
                [
                    [
                        "",
                        "def preprocess_request(self, request):\n    if 'dir' in request.POST:\n        dirs = request.POST['dir'].split(';')\n        choices = [ [pos, pos] for pos in dirs ]\n        self.data =  { 'dest': choices[0][0], }\n        self.fields['dest'].choices = choices\n        return None\n    else:\n        return request.POST\n",
                        "",
                        "",
                        "Copy",
                        ""
                    ],
                    [
                        [
                            "",
                            "",
                            "",
                            "Destination",
                            "dest",
                            "choices=[]",
                            true,
                            "ChoiceField",
                            ""
                        ]
                    ]
                ],
                [
                    [
                        "",
                        "def preprocess_request(self, request):\n    if 'dir' in request.POST:\n        request.session['commander_mkdir'] = request.POST['dir']\n        return None\n    else:\n        return request.POST\n",
                        "",
                        "",
                        "MkDir",
                        "name = self.cleaned_data['name']\nbase_folder = request.session.get('commander_mkdir', None)\nif base_folder: \n    man = VfsManager()\n    man.install_plugin(VfsPluginZip())\n    x = get_dir(base_folder, man)\n    x.mk_dir(name)\n\nrequest.session['commander_mkdir'] = None\n\nreturn { \"OK\": True }\n"
                    ],
                    [
                        [
                            "",
                            "",
                            "",
                            "Folder name",
                            "name",
                            "max_length=None, min_length=None",
                            true,
                            "CharField",
                            ""
                        ]
                    ]
                ],
                [
                    [
                        "",
                        "",
                        "",
                        "",
                        "Rename",
                        ""
                    ],
                    [
                        [
                            "",
                            "",
                            "",
                            "Name",
                            "name",
                            "max_length=None, min_length=None",
                            true,
                            "CharField",
                            ""
                        ]
                    ]
                ],
                [
                    [
                        "",
                        "",
                        "",
                        "",
                        "NewFile",
                        ""
                    ],
                    [
                        [
                            "",
                            "",
                            "",
                            "Name",
                            "name",
                            "max_length=None, min_length=None",
                            true,
                            "CharField",
                            ""
                        ]
                    ]
                ],
                [
                    [
                        "",
                        "",
                        "",
                        "",
                        "Delete",
                        ""
                    ],
                    [
                        [
                            "",
                            "",
                            "True",
                            "Recycle bin",
                            "recycle_bin",
                            "",
                            true,
                            "BooleanField",
                            ""
                        ]
                    ]
                ],
                [
                    [
                        "",
                        "def preprocess_request(self, request):\n    if 'dir' in request.POST:\n        panels = request.POST['dir'].split(';')\n        self.data =  { 'path1': panels[0], 'path2': panels[1], 'path3': panels[2], 'path4': panels[3], }\n        return None\n    else:\n        return request.POST\n",
                        "    ",
                        "",
                        "Setup",
                        "paths = [ self.cleaned_data['path1'], self.cleaned_data['path2'], self.cleaned_data['path3'], self.cleaned_data['path4'] ]\nglob = self.cleaned_data['glob']\n\nu = django.contrib.auth.get_user(request)\n\nif glob:\n    base_key = 'commander/all/path'\nelse:\n    base_key = 'commander/%s/path' % u.username\n\nfor i in range(4):\n    objs = Parameter.objects.filter(key=base_key+str(i))\n    if len(objs)>0:\n        param = objs[0]\n    else:\n        param = Parameter()\n        param.key = base_key + str(i)\n    param.value = paths[i]\n    param.save()\n\nreturn { \"OK\": True }\n"
                    ],
                    [
                        [
                            "",
                            "",
                            "",
                            "Path 1",
                            "path1",
                            "max_length=None, min_length=None",
                            false,
                            "CharField",
                            ""
                        ],
                        [
                            "",
                            "",
                            "",
                            "Path 2",
                            "path2",
                            "max_length=None, min_length=None",
                            false,
                            "CharField",
                            ""
                        ],
                        [
                            "",
                            "",
                            "",
                            "Path 3",
                            "path3",
                            "max_length=None, min_length=None",
                            false,
                            "CharField",
                            ""
                        ],
                        [
                            "",
                            "",
                            "",
                            "Path 4",
                            "path4",
                            "max_length=None, min_length=None",
                            false,
                            "CharField",
                            ""
                        ],
                        [
                            "",
                            "",
                            "",
                            "Default for all users",
                            "glob",
                            "",
                            false,
                            "BooleanField",
                            ""
                        ]
                    ]
                ]
            ],
            [],
            [
                [
                    "def set_winsize(self, fd, row, col, xpix=0, ypix=0):\n    winsize = struct.pack(\"HHHH\", row, col, xpix, ypix)\n    fcntl.ioctl(self.fd, termios.TIOCSWINSZ, winsize)\n\ndef receive(self, text_data=None, bytes_data=None):\n    if text_data:\n        x = json.loads(text_data)\n        if 'input' in x:\n            if self.fd:\n                os.write(self.fd, x['input'].encode('utf-8'))\n        if 'resize' in x:\n            size = x['resize']\n            if self.fd:\n                self.set_winsize(self.fd, size['rows'], size['cols'])\n\ndef connect(self):\n    print('Connecting.......')\n    self.exit = False\n    self.fd = None\n    self.child_pid = None\n    self.accept()\n    (child_pid, fd) = pty.fork()\n    if child_pid == 0:\n        env2 = os.environ.copy()\n        env2['TERM'] = 'xterm'\n        subprocess.run([get_executable(),\"-m\", \"xonsh\"], env = env2)\n    else:\n        self.fd = fd\n        self.child_pid = child_pid\n        self.thread = Thread(target=read_and_forward_pty_output, args=(self,))\n        self.thread.start()\n        \n\ndef disconnect(self, close_code):\n    print('Disconnect.......')\n    self.exit = True\n    os.write(self.fd, b\"exit\\n\")\n    ",
                    "WebsocketConsumer",
                    null,
                    "ShellConsumer",
                    "shell"
                ]
            ],
            []
        ],
        [
            [
                null,
                null,
                null,
                "import datetime\nfrom schlib.schdjangoext.django_ihtml import ihtml_to_html\nfrom schsimplescripts.script_tools import decode_script\n",
                "main tools",
                "schsimplescripts",
                true,
                "",
                "Simple scripts",
                null,
                "",
                "from django.http import Http404\nfrom schlib.schdjangoext.django_ihtml import ihtml_to_html\nfrom schlib.schdjangoext.fastform import form_from_str\nfrom schsimplescripts.script_tools import decode_script\n\nSCRIPT_TEMPLATE = \"\"\"\n{%% extends 'schsimplescripts/script_form.html' %%}\n\n{%% load exfiltry %%}\n{%% load exsyntax %%}\n\n%s\n\n\"\"\"\n"
            ],
            [
                [
                    [
                        "",
                        null,
                        true,
                        null,
                        "Scripts",
                        "['id']",
                        null,
                        "def save(self, *args, **kwargs):\n    code = self.code\n    if code:\n        x = decode_script(self.name, code)\n        if x:\n            self._form = x[0]\n            self._view = x[1]\n            self._template = x[2]\n        else:\n            code = \"\"\n        \n    if not code:\n        self._form = \"\"\n        self._view = \"\"\n        self._template = \"\"\n    \n    super(Scripts, self).save(*args, **kwargs) \n",
                        "",
                        "Scripts",
                        "Scripts"
                    ],
                    [
                        [
                            false,
                            "",
                            false,
                            "",
                            "Name",
                            true,
                            "",
                            "name",
                            false,
                            "max_length=64",
                            "",
                            "CharField",
                            false,
                            ""
                        ],
                        [
                            true,
                            "",
                            false,
                            "",
                            "Title",
                            true,
                            "",
                            "title",
                            true,
                            "max_length=64",
                            "",
                            "CharField",
                            false,
                            ""
                        ],
                        [
                            true,
                            "",
                            false,
                            "",
                            "Code",
                            false,
                            "",
                            "code",
                            true,
                            "",
                            "",
                            "TextField",
                            false,
                            ""
                        ],
                        [
                            true,
                            "",
                            false,
                            "",
                            "Category",
                            true,
                            "",
                            "category",
                            true,
                            "max_length=64",
                            "",
                            "CharField",
                            false,
                            ""
                        ],
                        [
                            true,
                            "",
                            false,
                            "",
                            "Rights group",
                            true,
                            "",
                            "rights_group",
                            true,
                            "max_length=64",
                            "",
                            "CharField",
                            false,
                            ""
                        ],
                        [
                            true,
                            "",
                            false,
                            "",
                            "Menu",
                            true,
                            "",
                            "menu",
                            true,
                            "max_length=64",
                            "",
                            "CharField",
                            false,
                            ""
                        ],
                        [
                            true,
                            "",
                            false,
                            "",
                            "Doc",
                            false,
                            "",
                            "doc",
                            true,
                            "",
                            "",
                            "TextField",
                            false,
                            ""
                        ],
                        [
                            true,
                            "",
                            false,
                            "",
                            "_form",
                            true,
                            "",
                            "_form",
                            true,
                            "",
                            "",
                            "TextField",
                            false,
                            ""
                        ],
                        [
                            true,
                            "",
                            false,
                            "",
                            "_view",
                            true,
                            "",
                            "_view",
                            true,
                            "",
                            "",
                            "TextField",
                            false,
                            ""
                        ],
                        [
                            true,
                            "",
                            false,
                            "",
                            "_template",
                            true,
                            "",
                            "_template",
                            true,
                            "",
                            "",
                            "TextField",
                            false,
                            ""
                        ]
                    ]
                ]
            ],
            [],
            [
                [
                    null,
                    "run",
                    "pk",
                    "U",
                    "Scripts",
                    "",
                    "script = models.Scripts.objects.get(pk=pk)\nform = None\nif script:\n    form_class=form_from_str(script._form)    \n    if form_class:\n        if request.method == 'POST':\n            form=form_class(request.POST)\n            if form.is_valid():\n                argv = form.cleaned_data\n                exec(script._view)\n                v = locals().get('scripts_'+ script.name, None)\n                if v:\n                    parms = v(request, form.cleaned_data)\n                    parms['form'] = form\n                    template_script = SCRIPT_TEMPLATE % script._template\n                    template = Template(template_script)\n                    context = RequestContext(request, parms)\n                    ret_str = template.render(context)\n                    return HttpResponse(ret_str)                \n        else:\n            form = form_class()\n    return render_to_response('schsimplescripts/script_form.html',  {'form': form}, request=request)\nraise Http404(\"Script does not exist\")\n",
                    "r"
                ],
                [
                    null,
                    "run_script_by_name",
                    "script_name",
                    "U",
                    "run/(?P<script_name>\\w+)/$",
                    "{}",
                    "script = models.Scripts.objects.get(name=script_name)\nif script:\n    if 'only_content' in request.GET:\n        return HttpResponseRedirect(\"/schsimplescripts/table/Scripts/%d/action/run/?childwin=1&only_content=1\" % script.id)\n    else:\n        return HttpResponseRedirect(\"/schsimplescripts/table/Scripts/%d/action/run/?childwin=1\" % script.id)\nelse:\n    raise Http404(\"Script does not exist\")\n",
                    "u"
                ],
                [
                    null,
                    "run_script",
                    "**argv",
                    "U",
                    "run_script/$",
                    "{}",
                    "if 'script' in request.POST:\n    code = request.POST['script']\n    request.session['script_code'] = code\n    x = decode_script(\"code\", code)\n    if x:    \n        form_class=form_from_str(x[0])\n        return render(request, 'schsimplescripts/script_form.html',  {'form': form_class()})\nelse:\n    if request.method == 'POST':\n        if 'script_code' in request.session:\n            code = request.session['script_code']\n            x = decode_script(\"code\", code)\n            if x:                \n                form_class=form_from_str(x[0])\n                form=form_class(request.POST)\n\n                if form.is_valid():\n                    argv = form.cleaned_data\n                    exec(x[1])\n                    v = locals().get('scripts_code', None)\n                    if v:\n                        parms = v(request, form.cleaned_data)\n                        parms['form'] = form\n                        script = SCRIPT_TEMPLATE % x[2]\n                        template = Template(script)\n                        context = RequestContext(request, parms)\n                        ret_str = template.render(context)\n                        return HttpResponse(ret_str)\n                        \nreturn HttpResponse(\"Error\")\n\n",
                    "u"
                ]
            ],
            [
                [
                    null,
                    "Scripts",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n%extends \"form.html\"\n\n%load exfiltry\n%load exsyntax\n\n%% pythoncode\n    script language=python\n        def signal_from_child(self, child, signal):\n            if signal=='set_bitmap_list':\n                bitmaps = {\n                    \"code\": \"wx.ART_NORMAL_FILE\",\n                    \"doc\": \"client://apps/help-browser.png\",\n                    \"run\": \"wx.ART_GO_DIR_UP\",\n                }\n                child.set_bitmaps(bitmaps)\n\n        def filter_url(self, target, href):\n            return href\n\n%% all\n    %with form_width=800 form_height=600\n        {{ block.super }}\n\n%% scroll\n\n%% list_content_actions\n    % new_row \"New script\"\n\n%% list_row_header\n    th...category\n    th...name\n    th...title\n\n%% list_row\n    td...{{object.category}}\n    td...{{object.name}}\n    td...{{object.title}}\n\n\n%% list_row_actions\n    % row_actions:\n        .edit\n        .field_edit/code,Code,code\n        .field_edit/doc,Doc,doc\n        .delete        \n    % row_actions:        \n        .run,Run script,fa fa-play,_top\n\n\n%% row_edit\n    % form:\n        \"name\", \"title\", \"category\", \"menu\", \"rights_group\"\n\n",
                    null,
                    null
                ],
                [
                    false,
                    "script_form",
                    null,
                    "% extends \"forms/user_tab.html\"\n\n% load exfiltry\n% load exsyntax\n\n\n%% all2\n    %with form_width=800 form_height=600 show_title_bar=1 title='Test'\n        {{ block.super }}\n\n\n%% list_filter_form2\n    form method=post,,,action={{request.path}},,,role=form,,,class=TableFiltr form-inline,,,enctype={% block filter_form_enctype %}application/x-www-form-urlencoded{% endblock %}\n        % csrf_token\n        %for field in form:\n            div class=fieldWrapper\n                {{ field.errors }}\n                {{ field.label_tag }} {{ field }}\n        input type=submit,,,value=Refresh,,,target=_self,,,class=btn btn-info ladda-button,,,data-style=slide-left\n            .Refresh\n",
                    "",
                    ""
                ],
                [
                    null,
                    "v_run_script",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n% extends \"forms/user_tab.html\"\n\n% load exfiltry\n% load exsyntax\n\n\n%% all\n    %with show_title_bar=1 title='Script'\n        {{ block.super }}\n\n\n%% user_header\n    th...X1\n\n\n%% user_row\n    tr\n        td... {{object}}\n\n",
                    null,
                    null
                ]
            ],
            [
                [
                    "client://apps/utilities-terminal.png",
                    "1",
                    "Scripts",
                    "simplescript.change_scripts",
                    "table/Scripts/-/form/list/",
                    "desktop"
                ]
            ],
            [],
            [],
            [],
            [
                [
                    "from schlib.schdjangoext.django_ihtml import ihtml_to_html\n\ndef _transform_view(name, txt1, txt2):\n    fun = \"\"\n    for row in txt2.split('\\n'):\n        fun = fun + \"    \"+row+\"\\n\"\n\n    x2 = \"\"\"def scripts_%s(request, argv):\n%s\n\"\"\" % (name, fun)\n\n    return txt1+\"\\n\"+x2\n\ndef _transform_template(txt):\n    return ihtml_to_html(None, txt)\n\n\ndef decode_script(name, code):    \n    elements = code.split('===')\n    if len(elements)>=4:\n        _form = elements[1]\n        _view = _transform_view(name, elements[0], elements[2])\n        _template = _transform_template(elements[3])\n        return [ _form, _view, _template ]\n    return None        \n",
                    "c",
                    "script_tools.py"
                ]
            ]
        ],
        [
            [
                null,
                null,
                null,
                null,
                "Tools",
                "schtools",
                false,
                "",
                "Tools",
                null,
                "",
                "import time\nfrom schlib.schdjangoext.tools import import_model\nfrom pyexcel_odsr import get_data\nfrom schlib.schtools.schjson import json_dumps, json_loads\nfrom schlib.schfs.vfstools import get_temp_filename\nimport openpyxl\nimport csv\n"
            ],
            [
                [
                    [
                        "",
                        null,
                        true,
                        null,
                        "Parameter",
                        "['id']",
                        "",
                        null,
                        "",
                        "Parameter",
                        "Parameter"
                    ],
                    [
                        [
                            true,
                            "",
                            false,
                            "",
                            "Parameter type",
                            true,
                            "",
                            "type",
                            true,
                            "max_length=16",
                            "",
                            "CharField",
                            false,
                            ""
                        ],
                        [
                            true,
                            "",
                            false,
                            "",
                            "Parameter subtype",
                            true,
                            "",
                            "subtype",
                            true,
                            "max_length=16",
                            "",
                            "CharField",
                            false,
                            ""
                        ],
                        [
                            false,
                            "",
                            false,
                            "",
                            "Key",
                            true,
                            "",
                            "key",
                            false,
                            "max_length=64",
                            "",
                            "CharField",
                            false,
                            ""
                        ],
                        [
                            false,
                            "",
                            false,
                            "",
                            "Value",
                            true,
                            "",
                            "value",
                            false,
                            "max_length=64",
                            "",
                            "CharField",
                            false,
                            ""
                        ]
                    ]
                ],
                [
                    [
                        "",
                        null,
                        false,
                        null,
                        "Autocomplete",
                        "['id']",
                        "",
                        null,
                        "",
                        "Autocomplete",
                        "Autocomplete"
                    ],
                    [
                        [
                            false,
                            "",
                            false,
                            "",
                            "Type",
                            true,
                            "",
                            "type",
                            false,
                            "max_length=64",
                            "",
                            "CharField",
                            false,
                            ""
                        ],
                        [
                            false,
                            "",
                            false,
                            "",
                            "Label",
                            true,
                            "",
                            "label",
                            false,
                            "max_length=64",
                            "",
                            "CharField",
                            false,
                            ""
                        ],
                        [
                            false,
                            "",
                            false,
                            "",
                            "Value",
                            true,
                            "",
                            "value",
                            false,
                            "",
                            "",
                            "TextField",
                            false,
                            ""
                        ]
                    ]
                ]
            ],
            [],
            [
                [
                    null,
                    "autocomplete_search",
                    "type",
                    "U",
                    "search/(?P<type>.+)/",
                    "{}",
                    "q = request.GET.get('query', request.POST.get('query', None))\nif not q:\n    return HttpResponse(content_type='text/plain')\nlimit = request.GET.get('limit', request.POST.get('limit', 15))\ntry:\n    limit = int(limit)\nexcept ValueError:\n    return HttpResponseBadRequest()\nif q != ' ':\n    tab = Autocomplete.objects.filter(type=typ, label__istartswith=q)[:limit]\nelse:\n    tab = Autocomplete.objects.filter(type=typ)[:limit]\nout_tab = []\nfor pos in tab:\n    out_tab.append({'id': pos.id, 'label': pos.label, 'name': pos.label, 'value': pos.value})\njson_data = json.dumps(out_tab)\nreturn HttpResponse(json_data, content_type='application/x-javascript')\n",
                    "u"
                ],
                [
                    null,
                    "set_user_param",
                    "**argv",
                    "U",
                    "set_user_param/$",
                    "{}",
                    "key = request.POST.get('param', None)\nvalue = request.POST.get('value', None)\nuser =  request.user.username\n\np = models.Parameter.objects.filter(type='sys_user', subtype=user, key=key)\nif len(p)>0:\n    obj = p[0]\nelse:\n    obj = models.Parameter()\n    obj.type = 'sys_user'\n    obj.subtype = user\n    obj.key = key\n\nobj.value = value\nobj.save()\n\nreturn HttpResponse(\"OK\")\n",
                    "u"
                ],
                [
                    null,
                    "get_user_param",
                    "**argv",
                    "U",
                    "get_user_param/$",
                    "{}",
                    "key = request.POST.get('param', None)\nuser =  request.user.username\n\np = models.Parameter.objects.filter(type='sys_user', subtype=user, key=key)\nif len(p)>0:\n    obj = p[0]\n    return HttpResponse(obj.value)\nelse:\n    return HttpResponse(\"\")\n",
                    "u"
                ],
                [
                    null,
                    "import_table",
                    "app, table",
                    "T",
                    "(?P<app>[\\w=_,;-]*)/(?P<table>[\\w=_,;-]*)/import_table/$",
                    "{}",
                    "if request.FILES:\n    if 'import_file' in request.FILES:\n        data = request.FILES['import_file']        \n        name = data.name\n        ext = name.split('.')[-1].lower()\n        model = import_model(app, table)\n        \n        table = []\n        \n        if ext in ('xlsx', 'xls', 'ods'):\n            if ext == 'ods':\n                d = get_data(data)\n                #print(\"F0\", d)\n                #buf = json_dumps(d)\n                for key in d:                    \n                    table = d[key]\n                    break\n            else:\n                first_line = True\n                width = 0\n                \n                file_name = get_temp_filename(\"temp.xlsx\")\n                f = open(file_name, 'wb')\n                f.write(data.read())\n                f.close()\n                \n                workbook = openpyxl.load_workbook(filename=file_name, read_only=True)\n                worksheets = workbook.get_sheet_names()\n                worksheet = workbook.get_sheet_by_name(worksheets[0])            \n                \n                for row in list(worksheet.rows):\n                    if first_line:\n                        first_line = False\n                        buf = []\n                        i = 0;\n                        for pos in row:\n                            value = pos.value\n                            if value:\n                                buf.append(value)\n                            else:\n                                break\n                            i += 1\n                        if len(buf)>0:\n                            count = len(buf)\n                            table.append(buf)\n                        else:\n                            break\n                    else:\n                        if row[0].value:\n                            buf = []\n                            i = 0\n                            for pos in row:\n                                if i >= count:\n                                    break\n                                buf.append(pos.value)\n                                i += 1\n                            table.append(buf)\n                        else:\n                            break\n                os.remove(file_name)            \n        elif ext in ('txt', 'csv'):\n            first_line = True\n            sep_list = ['\\t', ';', ',', '|', ]\n            sep = None            \n            \n            txt = data.read().decode('utf-8').replace('\\r','').split('\\n')\n            for line in txt:\n                for pos in sep_list:\n                    if pos in line:\n                        sep = pos\n                        break\n                break\n                \n            if sep:\n                csv_reader = csv.reader(txt, delimiter=sep)\n                for row in csv_reader:\n                    table.append(row)\n                              \n        if table and len(table)>1:\n            header = list([pos.strip() for pos in table[0] if pos])\n            tree = False\n            tmp = []\n            for pos in header:\n                if not pos in tmp:\n                    tmp.append(pos)\n                else:\n                    tree = True\n                    id1 = tmp.index(pos)\n                    id2 = len(tmp)\n                    break            \n            \n            for row in table[1:]:\n                if len(row) == len(header):\n                    x = model() \n                    parent = None                       \n                    for index, (attr_name, value) in enumerate(zip(header,row)):\n                        if tree:\n                            if index == id1:\n                                if row[id2]:\n                                    objs = model.objects.filter(**{ attr_name: value })\n                                    if len(objs)==1:\n                                        parent = objs[0]\n                                else:\n                                    setattr(x, attr_name, value)\n                            elif index == id2:\n                                if row[id2]:\n                                    setattr(x, attr_name, value)\n                                    if parent:\n                                        setattr(x, 'parent', parent)\n                            else:\n                                setattr(x, attr_name, value)                                \n                        else:\n                            setattr(x, attr_name, value)\n                    x.save()\n                                \n        return { 'redirect': '/schsys/ok/' }    \n    else:\n        form = ImportTableForm(request.POST, request.FILES)\nelse:\n    form = ImportTableForm()\n\nreturn { 'form': form }",
                    "u"
                ]
            ],
            [
                [
                    null,
                    "FormImportTableForm",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n% extends \"forms/user_tab.html\"\n\n% load exfiltry\n% load exsyntax\n\n\n%% all\n    %with show_title_bar=1 title='Table import form'\n        {{ block.super }}\n\n\n%% user_header\n    th...x1\n\n\n%% user_row\n    tr\n        td... {{object}}\n\n",
                    null,
                    null
                ],
                [
                    null,
                    "v_import_table",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n% extends \"forms/user_tab.html\"\n\n% load exfiltry\n% load exsyntax\n\n\n%% all\n    %with show_title_bar=1 title='Import form'\n        {{ block.super }}\n\n\n%%list_content_header_first_row\n\n%% form_content_button\n\n\n%% user_header\n    th...x\n\n\n%% user_row\n    tr\n        td... {{object}}\n\n",
                    null,
                    null
                ]
            ],
            [],
            [
                [
                    [
                        "",
                        "",
                        "",
                        null,
                        "ImportTableForm",
                        ""
                    ],
                    [
                        [
                            null,
                            null,
                            null,
                            "File to import",
                            "import_file",
                            null,
                            true,
                            "FileField",
                            null
                        ]
                    ]
                ]
            ],
            [],
            [],
            []
        ],
        [
            [
                null,
                null,
                null,
                "from django.core.mail import send_mail\nfrom datetime import datetime \nfrom django.conf import settings\nfrom os.path import join\n    \ndef upload_path_fun(obj, filename):\n    return join(\"attachements\", obj.application+\"_\"+obj.table+\"_\"+str(obj.parent_id)+\"_\"+obj.group+\"_\"+filename)\n   ",
                "attachements",
                "schattachements",
                true,
                "",
                "Attachements",
                null,
                "",
                "from wsgiref.util import FileWrapper\nimport mimetypes\n"
            ],
            [
                [
                    [
                        "",
                        null,
                        true,
                        null,
                        "Attachements",
                        "['id']",
                        "",
                        "@classmethod\ndef filter(cls, value):\n    if value:\n        app, tbl, id,grp = value.split('__')\n        return cls.objects.filter(application=app, table=tbl, parent_id=id, group=grp)\n    else:\n        return cls.objects.all()\n\ndef init_new(self, request, view, value=None):\n    if value:\n        app, tbl, id, grp = value.split('__')\n        return { 'application': app, 'table': tbl, 'parent_id': id, 'group': grp }\n    else:\n        return { 'application': 'default', 'table': 'default', 'parent_id': 0, 'group': 'default' }\n\n\ndef save(self, *args, **kwargs):\n    self.ext = self.file.url.split('.')[-1].upper()\n    if not self.name:\n        self.name = str(self.file)\n    super(Attachements, self).save(*args, **kwargs)\n",
                        "",
                        "Attachements",
                        "Attachements"
                    ],
                    [
                        [
                            true,
                            "",
                            false,
                            "",
                            "Name",
                            true,
                            "",
                            "name",
                            true,
                            "max_length=64",
                            "",
                            "CharField",
                            false,
                            ""
                        ],
                        [
                            true,
                            "",
                            false,
                            "",
                            "Extension",
                            false,
                            "",
                            "ext",
                            true,
                            "max_length=64",
                            "",
                            "CharField",
                            false,
                            ""
                        ],
                        [
                            false,
                            "",
                            false,
                            "",
                            "Application",
                            false,
                            "",
                            "application",
                            false,
                            "max_length=64",
                            "",
                            "CharField",
                            false,
                            ""
                        ],
                        [
                            false,
                            "",
                            false,
                            "'default'",
                            "Table",
                            false,
                            "",
                            "table",
                            false,
                            "max_length=64",
                            "",
                            "CharField",
                            false,
                            ""
                        ],
                        [
                            true,
                            "",
                            false,
                            "'default'",
                            "Group",
                            false,
                            "",
                            "group",
                            true,
                            "max_length=64",
                            "",
                            "CharField",
                            false,
                            ""
                        ],
                        [
                            true,
                            "",
                            false,
                            "",
                            "Parent id",
                            false,
                            "",
                            "parent_id",
                            true,
                            "",
                            "",
                            "IntegerField",
                            false,
                            ""
                        ],
                        [
                            true,
                            "",
                            false,
                            "",
                            "thumbnail",
                            false,
                            "",
                            "thumb",
                            true,
                            "",
                            "",
                            "TextField",
                            false,
                            ""
                        ],
                        [
                            false,
                            "",
                            false,
                            "datetime.now",
                            "Upload date",
                            false,
                            "",
                            "upload_date",
                            false,
                            "",
                            "",
                            "DateTimeField",
                            false,
                            ""
                        ],
                        [
                            false,
                            "",
                            false,
                            "",
                            "Select file",
                            true,
                            "",
                            "file",
                            false,
                            "upload_to=upload_path_fun",
                            "",
                            "FileField",
                            false,
                            ""
                        ]
                    ]
                ]
            ],
            [],
            [
                [
                    null,
                    "download",
                    "pk",
                    "U",
                    "Attachements",
                    "",
                    "obj=models.Attachements.objects.get(id=pk)\nwrapper      = FileWrapper(open(obj.file.path, \"rb\")) \ncontent_type = mimetypes.guess_type(obj.file.path)[0] \nresponse     = HttpResponse(wrapper,content_type=content_type)  \nresponse['Content-Length']      = os.path.getsize(obj.file.path)    \nresponse['Content-Disposition'] = \"attachment; filename=%s\" %  obj.file.name\nreturn response\n",
                    "r"
                ]
            ],
            [
                [
                    null,
                    "Attachements",
                    null,
                    "\n\n{# -*- coding: utf-8 -*- #}\n%extends \"form.html\"\n\n%load exfiltry\n%load exsyntax\n\n%% pythoncode\n    script language=python\n        def signal_from_child(self, child, signal):\n            if signal=='set_bitmap_list':\n                bitmaps = {\n                    \"download\": \"client://status/mail-attachment.png\",\n                }\n                child.set_bitmaps(bitmaps)\n\n        def filter_url(self, target, href):\n            return href\n\n%% all\n    %with form_width=800 form_height=600\n        {{ block.super }}\n\n%% scroll\n\n%% enctype\n    .multipart/form-data\n\n%% list_content_actions    \n    % new_row _(\"New attachement\") action=\"new_row/{{filter}}\"\n\n%% list_row_header\n    th...Name\n    th...ext\n\n%% list_row\n    td...{{object.name}}\n    td...{{object.ext}}\n\n\n%% list_row_actions\n    % row_actions:\n        .download,_(Download),,_blank\n    % row_actions:\n        .edit\n        .delete\n\n\n%% row_edit\n    % form:\n\n",
                    null,
                    null
                ]
            ],
            [
                [
                    "client://status/mail-attachment.png",
                    "1",
                    "Attachements",
                    "wiki.change_attachements",
                    "table/Attachements/-/form/list/",
                    "desktop"
                ]
            ],
            [],
            [],
            [],
            []
        ],
        [
            [
                null,
                null,
                null,
                "from datetime import datetime ",
                "log",
                "schlog",
                true,
                "",
                "Log",
                null,
                "",
                null
            ],
            [
                [
                    [
                        "",
                        null,
                        true,
                        null,
                        "Log",
                        "['id']",
                        "",
                        "@classmethod\ndef filter(cls, value):\n    if value:\n        app, tbl, id,grp = value.split('__')\n        return cls.objects.filter(application=app, table=tbl, parent_id=id, group=grp)\n    else:\n        return cls.objects.all()\n",
                        "",
                        "Log",
                        "Logi"
                    ],
                    [
                        [
                            false,
                            "",
                            false,
                            "",
                            "Application",
                            false,
                            "",
                            "application",
                            false,
                            "max_length=64",
                            "",
                            "CharField",
                            false,
                            ""
                        ],
                        [
                            false,
                            "",
                            false,
                            "'default'",
                            "Table",
                            false,
                            "",
                            "table",
                            false,
                            "max_length=64",
                            "",
                            "CharField",
                            false,
                            ""
                        ],
                        [
                            true,
                            "",
                            false,
                            "'default'",
                            "Group",
                            false,
                            "",
                            "group",
                            true,
                            "max_length=64",
                            "",
                            "CharField",
                            false,
                            ""
                        ],
                        [
                            true,
                            "",
                            false,
                            "",
                            "Parent id",
                            false,
                            "",
                            "parent_id",
                            true,
                            "",
                            "",
                            "IntegerField",
                            false,
                            ""
                        ],
                        [
                            true,
                            "",
                            false,
                            "datetime.now",
                            "Date",
                            false,
                            "",
                            "date",
                            true,
                            "",
                            "",
                            "DateTimeField",
                            false,
                            ""
                        ],
                        [
                            true,
                            "",
                            false,
                            "",
                            "Description",
                            false,
                            "",
                            "description",
                            true,
                            "max_length=64",
                            "",
                            "CharField",
                            false,
                            ""
                        ],
                        [
                            true,
                            "",
                            false,
                            "",
                            "Operator",
                            true,
                            "",
                            "operator",
                            true,
                            "max_length=64",
                            "",
                            "CharField",
                            false,
                            ""
                        ],
                        [
                            true,
                            "",
                            false,
                            "",
                            "Operator id",
                            true,
                            "",
                            "operator_id",
                            true,
                            "",
                            "",
                            "IntegerField",
                            false,
                            ""
                        ]
                    ]
                ]
            ],
            [],
            [],
            [
                [
                    null,
                    "log",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n%extends \"form.html\"\n\n%load exfiltry\n%load exsyntax\n\n%% pythoncode\n    script language=python\n        def filter_url(self, target, href):\n            return href\n\n%% all\n    %with form_width=800 form_height=600:\n        {{ block.super }}\n\n%% scroll\n\n%% list_row_header\n    th...Data\n    th...Opis\n    th...Operator\n\n%% list_row_header_end\n\n%% list_row\n    td...{{object.date|isoformat}}\n    td...{{object.description}}\n    td...{{object.operator}}\n\n%% list_row_end",
                    null,
                    null
                ]
            ],
            [],
            [],
            [],
            [],
            []
        ],
        [
            [
                "",
                null,
                null,
                null,
                "Authorization",
                "schauth",
                true,
                "",
                "Authorization",
                null,
                "",
                "from django.urls import reverse\nfrom django.contrib.auth import login\nfrom django.contrib.auth.models import User"
            ],
            [
                [
                    [
                        null,
                        null,
                        true,
                        null,
                        "UrlWithAuth",
                        "['id']",
                        null,
                        null,
                        null,
                        "Url with authorization",
                        "Urls with authorization"
                    ],
                    [
                        [
                            false,
                            null,
                            false,
                            null,
                            "User name",
                            true,
                            null,
                            "username",
                            false,
                            "max_length=64",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            false,
                            null,
                            true,
                            null,
                            "Key",
                            true,
                            null,
                            "key",
                            false,
                            "max_length=255",
                            null,
                            "CharField",
                            true,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Redirect to",
                            true,
                            null,
                            "redirect_to",
                            true,
                            "max_length=255",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Post data",
                            false,
                            null,
                            "post_data",
                            true,
                            null,
                            null,
                            "TextField",
                            false,
                            null
                        ]
                    ]
                ]
            ],
            [],
            [
                [
                    null,
                    "auth",
                    "key, path",
                    "U",
                    "auth/(?P<key>[\\w-]+)/(?P<path>.*)$",
                    "{}",
                    "objects = models.UrlWithAuth.objects.filter(key=key)\nif len(objects) == 1:\n    username = objects[0].username\n    users = User.objects.filter(username=username)\n    if len(users)==1:\n        login(request, users[0])\n        if path:\n            new_url = reverse('start')+path\n        else:\n            new_url = reverse('start')+objects[0].redirect_to\n        return HttpResponseRedirect(new_url)\n\nnew_url = reverse('start')\nreturn HttpResponseRedirect(new_url)\n",
                    "u"
                ]
            ],
            [
                [
                    null,
                    "UrlWithAuth",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n%extends \"form.html\"\n\n%load exfiltry\n%load exsyntax\n\n%% all\n    %with table_type='datatable':\n        {{ block.super }}\n\n%% scroll\n\n%% list_content_actions\n    % new_row \"New key\"\n\n%% list_row_header\n    th...User name\n    th...Redirect to\n\n%% list_row\n    td...{{object.username}}\n    td...{{object.redirect_to}}\n\n%% list_row_actions\n    % row_actions:\n        .edit\n        .delete\n\n%% row_edit\n    % form:\n",
                    null,
                    null
                ]
            ],
            [
                [
                    "png://apps/system-users.png",
                    "1",
                    "Urls with auth",
                    null,
                    "table/UrlWithAuth/-/form/list/",
                    "desktop"
                ]
            ],
            [],
            [],
            [],
            []
        ]
    ],
    []
]