[
    {
        "additional_settings": "SECRET_KEY='asdfasdfas'\nBOOTSTRAP_TEMPLATE='bootswatch/materia'\n\nGRAPHQL = False\nREST = True\n\nINSTALLED_APPS.append('explorer')\nEXPLORER_CONNECTIONS = { 'Default': 'default' } \nEXPLORER_DEFAULT_CONNECTION = 'default'\n\n\"oauth2_provider.contrib.rest_framework.TokenHasReadWriteScope\"\n#, TokenHasScope\nREST_FRAMEWORK['DEFAULT_PERMISSION_CLASSES'] = [\"oauth2_provider.contrib.rest_framework.TokenHasReadWriteScope\",]\n\nprint(REST_FRAMEWORK)\n\n#if platform_name()!='Android':\n    #INSTALLED_APPS.append('easy_thumbnails')\n    #INSTALLED_APPS.append('filer')\n\n    #THUMBNAIL_PROCESSORS = (\n    #    'easy_thumbnails.processors.colorspace',\n    #    'easy_thumbnails.processors.autocrop',\n    #    #'easy_thumbnails.processors.scale_and_crop',\n    #    'filer.thumbnail_processors.scale_and_crop_with_subject_location',\n    #    'easy_thumbnails.processors.filters',\n    #)\n\n#FILER_DEBUG = True\n\n\n\n#INSTALLED_APPS.append('django_oauth2_provider')\n#INSTALLED_APPS.append('allauth.socialaccount.providers.okta')\n#INSTALLED_APPS.append('allauth.socialaccount.providers.azure')\n\n# INSTALLED_APPS.append(\"oauth2_provider\")\n#INSTALLED_APPS.append(\"rest_framework\")\n\n#SOCIALACCOUNT_PROVIDERS = {\n#    'okta': {\n#        'OKTA_BASE_URL': 'example.okta.com',\n#    },\n#   'microsoft': {\n#       'tenant': 'organizations',\n#    },\n#    'django': {\n#    }\n#}\n\n#OAUTH2_SERVER_BASEURL = 'http://auth:8000'\n#OAUTH2_SERVER_AUTHURL = 'https://auth.crhbp.pl'\n\n#AUTHENTICATION_BACKENDS = (\n#    'django.contrib.auth.backends.ModelBackend',\n#    #'allauth.account.auth_backends.AuthenticationBackend',\n#)\n\n#REST_FRAMEWORK = {\n #   'DEFAULT_AUTHENTICATION_CLASSES': [\n #       'oauth2_provider.contrib.rest_framework.OAuth2Authentication',\n#    ]\n#}",
        "app_main": null,
        "autor_email": "slawomir.cholaj@gmail.com",
        "autor_name": "S\u0142awomir Cho\u0142aj",
        "autor_www": null,
        "components_initial_state": null,
        "custom_tags": "_schcomponents/components/ptig-codeeditor.js\r\n_schcomponents/components/ptig-wysiwygedit.js",
        "desktop_gui_type": "tablet_modern",
        "doc": null,
        "encoded_zip": null,
        "ext_apps": "_schsetup.schadmin,_schtools.schcommander,_schtools.schtools",
        "git_repository": "https://git.pytigon.eu/pytigon/_schot.git",
        "gui_elements": null,
        "gui_type": "modern",
        "icon": "png://categories/applications-development.png",
        "icon_code": null,
        "icon_size": "1",
        "install_file": null,
        "jsondata": null,
        "license_file": null,
        "login_required": true,
        "main": true,
        "main_view": true,
        "name": "_schot",
        "plugins": null,
        "public": true,
        "readme_file": null,
        "smartfon_gui_type": "smartfon_standard",
        "start_page": null,
        "tablet_gui_type": "tablet_modern",
        "template_desktop": null,
        "template_schweb": null,
        "template_smartfon": null,
        "template_tablet": null,
        "template_theme": null,
        "title": "OT application",
        "user_app_template": "",
        "version": "latest"
    },
    [
        [
            {
                "consumer_code": "",
                "doc": null,
                "icon": "png://mimetypes/image-x-generic.png",
                "icon_code": null,
                "icon_size": "1",
                "index": null,
                "jsondata": null,
                "model_code": null,
                "module_title": "OT kernel",
                "name": "otkernel",
                "perms": true,
                "tasks_code": "",
                "title": "OT kernel",
                "urls_code": null,
                "user_param": "",
                "view_code": null
            },
            [
                [
                    {
                        "base_table": "JSONModel",
                        "doc": null,
                        "generic": true,
                        "metaclass_code": null,
                        "name": "Feature",
                        "ordering": "['id']",
                        "proxy_model": null,
                        "table_code": null,
                        "url_params": null,
                        "verbose_name": "Feature",
                        "verbose_name_plural": "Features"
                    },
                    []
                ],
                [
                    {
                        "base_table": null,
                        "doc": null,
                        "generic": true,
                        "metaclass_code": "",
                        "name": "Location",
                        "ordering": "['id']",
                        "proxy_model": null,
                        "table_code": null,
                        "url_params": null,
                        "verbose_name": "Location",
                        "verbose_name_plural": "Locations"
                    },
                    [
                        {
                            "blank": false,
                            "choices": null,
                            "db_index": false,
                            "default": null,
                            "description": "Name",
                            "editable": true,
                            "help_text": null,
                            "name": "name",
                            "null": false,
                            "param": "max_length=128",
                            "rel_to": null,
                            "type": "CharField",
                            "unique": false,
                            "url_params": null
                        },
                        {
                            "blank": true,
                            "choices": null,
                            "db_index": true,
                            "default": null,
                            "description": "External id",
                            "editable": true,
                            "help_text": null,
                            "name": "external_id",
                            "null": true,
                            "param": "max_length=16",
                            "rel_to": null,
                            "type": "CharField",
                            "unique": false,
                            "url_params": null
                        }
                    ]
                ],
                [
                    {
                        "base_table": null,
                        "doc": null,
                        "generic": true,
                        "metaclass_code": "",
                        "name": "MeasurementPoint",
                        "ordering": "['id']",
                        "proxy_model": null,
                        "table_code": "filter_fields = {\n        \"name\": [\"exact\", \"icontains\", \"istartswith\"],\n}\n\ndef save(self, *argi, **argv):\n    super().save(*argi, **argv)\n    try:\n        self.measurementpointstate\n    except:\n        obj = MeasurementPointState()\n        obj.parent = self        \n        obj.save()\n    try:\n        self.mpointinputqueuestatus\n    except:\n        obj = MPointInputQueueStatus()\n        obj.mp = self        \n        obj.save()\n    try:\n        self.mpointoutputqueuestatus\n    except:\n        obj = MPointOutputQueueStatus()\n        obj.mp = self        \n        obj.save()\n    try:\n        self.mpointcontrolqueuestatus\n    except:\n        obj = MPointControlQueueStatus()\n        obj.mp = self        \n        obj.save()                \n",
                        "url_params": null,
                        "verbose_name": "Measurement point",
                        "verbose_name_plural": "Measurement points"
                    },
                    [
                        {
                            "blank": false,
                            "choices": null,
                            "db_index": false,
                            "default": null,
                            "description": "Company",
                            "editable": true,
                            "help_text": null,
                            "name": "company",
                            "null": false,
                            "param": "max_length=16",
                            "rel_to": null,
                            "type": "CharField",
                            "unique": false,
                            "url_params": null
                        },
                        {
                            "blank": true,
                            "choices": null,
                            "db_index": false,
                            "default": null,
                            "description": "Facility",
                            "editable": true,
                            "help_text": null,
                            "name": "facility",
                            "null": true,
                            "param": "max_length=32",
                            "rel_to": null,
                            "type": "CharField",
                            "unique": false,
                            "url_params": null
                        },
                        {
                            "blank": false,
                            "choices": null,
                            "db_index": false,
                            "default": null,
                            "description": "Name",
                            "editable": true,
                            "help_text": null,
                            "name": "name",
                            "null": false,
                            "param": "max_length=128",
                            "rel_to": null,
                            "type": "CharField",
                            "unique": false,
                            "url_params": null
                        },
                        {
                            "blank": true,
                            "choices": null,
                            "db_index": false,
                            "default": null,
                            "description": "Input procedure",
                            "editable": false,
                            "help_text": null,
                            "name": "input_proc",
                            "null": true,
                            "param": null,
                            "rel_to": null,
                            "type": "TextField",
                            "unique": false,
                            "url_params": null
                        },
                        {
                            "blank": true,
                            "choices": null,
                            "db_index": false,
                            "default": null,
                            "description": "Control procedure",
                            "editable": false,
                            "help_text": null,
                            "name": "control_proc",
                            "null": true,
                            "param": null,
                            "rel_to": null,
                            "type": "TextField",
                            "unique": false,
                            "url_params": null
                        },
                        {
                            "blank": true,
                            "choices": null,
                            "db_index": false,
                            "default": null,
                            "description": "Communication procedure",
                            "editable": false,
                            "help_text": null,
                            "name": "com_proc",
                            "null": true,
                            "param": null,
                            "rel_to": null,
                            "type": "TextField",
                            "unique": false,
                            "url_params": null
                        },
                        {
                            "blank": true,
                            "choices": null,
                            "db_index": false,
                            "default": null,
                            "description": "State procedure",
                            "editable": false,
                            "help_text": null,
                            "name": "state_proc",
                            "null": true,
                            "param": null,
                            "rel_to": null,
                            "type": "TextField",
                            "unique": false,
                            "url_params": null
                        }
                    ]
                ],
                [
                    {
                        "base_table": "JSONModel",
                        "doc": null,
                        "generic": true,
                        "metaclass_code": null,
                        "name": "MeasurementPointState",
                        "ordering": "['id']",
                        "proxy_model": null,
                        "table_code": null,
                        "url_params": null,
                        "verbose_name": "Measurement point state",
                        "verbose_name_plural": "Measurement point state"
                    },
                    [
                        {
                            "blank": false,
                            "choices": null,
                            "db_index": false,
                            "default": null,
                            "description": "Parent",
                            "editable": true,
                            "help_text": null,
                            "name": "parent",
                            "null": false,
                            "param": null,
                            "rel_to": "MeasurementPoint",
                            "type": "OneToOneField",
                            "unique": false,
                            "url_params": null
                        },
                        {
                            "blank": true,
                            "choices": null,
                            "db_index": false,
                            "default": null,
                            "description": "Description",
                            "editable": true,
                            "help_text": null,
                            "name": "description",
                            "null": true,
                            "param": "max_length=128",
                            "rel_to": null,
                            "type": "CharField",
                            "unique": false,
                            "url_params": null
                        }
                    ]
                ],
                [
                    {
                        "base_table": null,
                        "doc": null,
                        "generic": true,
                        "metaclass_code": null,
                        "name": "Product",
                        "ordering": "['id']",
                        "proxy_model": null,
                        "table_code": null,
                        "url_params": null,
                        "verbose_name": "Product",
                        "verbose_name_plural": "Products"
                    },
                    [
                        {
                            "blank": true,
                            "choices": null,
                            "db_index": true,
                            "default": null,
                            "description": "External id",
                            "editable": true,
                            "help_text": null,
                            "name": "external_id",
                            "null": true,
                            "param": "max_length=64",
                            "rel_to": null,
                            "type": "CharField",
                            "unique": false,
                            "url_params": null
                        },
                        {
                            "blank": false,
                            "choices": null,
                            "db_index": false,
                            "default": null,
                            "description": "Name",
                            "editable": true,
                            "help_text": null,
                            "name": "name",
                            "null": false,
                            "param": "max_length=128",
                            "rel_to": null,
                            "type": "CharField",
                            "unique": false,
                            "url_params": null
                        },
                        {
                            "blank": true,
                            "choices": null,
                            "db_index": false,
                            "default": "1",
                            "description": "Conversion factor",
                            "editable": true,
                            "help_text": null,
                            "name": "conversion_factor",
                            "null": true,
                            "param": null,
                            "rel_to": null,
                            "type": "FloatField",
                            "unique": false,
                            "url_params": null
                        },
                        {
                            "blank": true,
                            "choices": null,
                            "db_index": true,
                            "default": "True",
                            "description": "Active",
                            "editable": true,
                            "help_text": null,
                            "name": "active",
                            "null": true,
                            "param": null,
                            "rel_to": null,
                            "type": "BooleanField",
                            "unique": false,
                            "url_params": null
                        }
                    ]
                ],
                [
                    {
                        "base_table": null,
                        "doc": null,
                        "generic": true,
                        "metaclass_code": null,
                        "name": "RawMaterial",
                        "ordering": "['id']",
                        "proxy_model": null,
                        "table_code": null,
                        "url_params": null,
                        "verbose_name": "Raw material",
                        "verbose_name_plural": "Raw materials"
                    },
                    [
                        {
                            "blank": true,
                            "choices": null,
                            "db_index": true,
                            "default": null,
                            "description": "External id",
                            "editable": true,
                            "help_text": null,
                            "name": "external_id",
                            "null": true,
                            "param": "max_length=64",
                            "rel_to": null,
                            "type": "CharField",
                            "unique": false,
                            "url_params": null
                        },
                        {
                            "blank": false,
                            "choices": null,
                            "db_index": false,
                            "default": null,
                            "description": "Name",
                            "editable": true,
                            "help_text": null,
                            "name": "name",
                            "null": false,
                            "param": "max_length=128",
                            "rel_to": null,
                            "type": "CharField",
                            "unique": false,
                            "url_params": null
                        },
                        {
                            "blank": false,
                            "choices": null,
                            "db_index": false,
                            "default": "True",
                            "description": "Active",
                            "editable": true,
                            "help_text": null,
                            "name": "active",
                            "null": false,
                            "param": null,
                            "rel_to": null,
                            "type": "BooleanField",
                            "unique": false,
                            "url_params": null
                        }
                    ]
                ],
                [
                    {
                        "base_table": "JSONModel",
                        "doc": null,
                        "generic": true,
                        "metaclass_code": null,
                        "name": "Operation",
                        "ordering": "['id']",
                        "proxy_model": null,
                        "table_code": null,
                        "url_params": null,
                        "verbose_name": "Operation",
                        "verbose_name_plural": "Operations"
                    },
                    [
                        {
                            "blank": true,
                            "choices": null,
                            "db_index": false,
                            "default": null,
                            "description": "Previous operation",
                            "editable": true,
                            "help_text": null,
                            "name": "previous_operation",
                            "null": true,
                            "param": null,
                            "rel_to": "'self'",
                            "type": "PtigForeignKey",
                            "unique": false,
                            "url_params": null
                        },
                        {
                            "blank": false,
                            "choices": null,
                            "db_index": false,
                            "default": null,
                            "description": "Time",
                            "editable": true,
                            "help_text": null,
                            "name": "time",
                            "null": false,
                            "param": "auto_now_add=True",
                            "rel_to": null,
                            "type": "DateTimeField",
                            "unique": false,
                            "url_params": null
                        }
                    ]
                ],
                [
                    {
                        "base_table": null,
                        "doc": null,
                        "generic": true,
                        "metaclass_code": null,
                        "name": "Inventory",
                        "ordering": "['id']",
                        "proxy_model": null,
                        "table_code": null,
                        "url_params": null,
                        "verbose_name": "Inventory",
                        "verbose_name_plural": "Inventories"
                    },
                    [
                        {
                            "blank": true,
                            "choices": null,
                            "db_index": false,
                            "default": null,
                            "description": "Feature",
                            "editable": true,
                            "help_text": null,
                            "name": "feature",
                            "null": true,
                            "param": null,
                            "rel_to": "Feature",
                            "type": "PtigForeignKey",
                            "unique": false,
                            "url_params": null
                        },
                        {
                            "blank": false,
                            "choices": null,
                            "db_index": false,
                            "default": null,
                            "description": "Product",
                            "editable": true,
                            "help_text": null,
                            "name": "product",
                            "null": false,
                            "param": null,
                            "rel_to": "Product",
                            "type": "PtigForeignKey",
                            "unique": false,
                            "url_params": null
                        },
                        {
                            "blank": true,
                            "choices": null,
                            "db_index": true,
                            "default": null,
                            "description": "RFID",
                            "editable": true,
                            "help_text": null,
                            "name": "rfid",
                            "null": true,
                            "param": "max_length=64",
                            "rel_to": null,
                            "type": "CharField",
                            "unique": false,
                            "url_params": null
                        },
                        {
                            "blank": false,
                            "choices": null,
                            "db_index": false,
                            "default": null,
                            "description": "Location",
                            "editable": true,
                            "help_text": null,
                            "name": "location",
                            "null": false,
                            "param": null,
                            "rel_to": "Location",
                            "type": "PtigForeignKey",
                            "unique": false,
                            "url_params": null
                        },
                        {
                            "blank": true,
                            "choices": null,
                            "db_index": false,
                            "default": null,
                            "description": "Place",
                            "editable": true,
                            "help_text": null,
                            "name": "place",
                            "null": true,
                            "param": "max_length=32",
                            "rel_to": null,
                            "type": "CharField",
                            "unique": false,
                            "url_params": null
                        },
                        {
                            "blank": false,
                            "choices": null,
                            "db_index": false,
                            "default": "1",
                            "description": "Amount",
                            "editable": true,
                            "help_text": null,
                            "name": "amount",
                            "null": false,
                            "param": null,
                            "rel_to": null,
                            "type": "IntegerField",
                            "unique": false,
                            "url_params": null
                        },
                        {
                            "blank": true,
                            "choices": null,
                            "db_index": false,
                            "default": null,
                            "description": "Last operation",
                            "editable": true,
                            "help_text": null,
                            "name": "last_operation",
                            "null": true,
                            "param": null,
                            "rel_to": "Operation",
                            "type": "PtigForeignKey",
                            "unique": false,
                            "url_params": null
                        }
                    ]
                ],
                [
                    {
                        "base_table": null,
                        "doc": null,
                        "generic": true,
                        "metaclass_code": null,
                        "name": "Log",
                        "ordering": "['id']",
                        "proxy_model": null,
                        "table_code": null,
                        "url_params": null,
                        "verbose_name": "Log",
                        "verbose_name_plural": "Logs"
                    },
                    [
                        {
                            "blank": false,
                            "choices": null,
                            "db_index": false,
                            "default": null,
                            "description": "Measurement point",
                            "editable": true,
                            "help_text": null,
                            "name": "mp",
                            "null": false,
                            "param": null,
                            "rel_to": "MeasurementPoint",
                            "type": "PtigForeignKey",
                            "unique": false,
                            "url_params": null
                        },
                        {
                            "blank": false,
                            "choices": null,
                            "db_index": true,
                            "default": null,
                            "description": "Time",
                            "editable": true,
                            "help_text": null,
                            "name": "time",
                            "null": false,
                            "param": "auto_now_add=True",
                            "rel_to": null,
                            "type": "DateTimeField",
                            "unique": false,
                            "url_params": null
                        },
                        {
                            "blank": false,
                            "choices": null,
                            "db_index": true,
                            "default": null,
                            "description": "Attribute",
                            "editable": true,
                            "help_text": null,
                            "name": "attr",
                            "null": false,
                            "param": "max_length=16",
                            "rel_to": null,
                            "type": "CharField",
                            "unique": false,
                            "url_params": null
                        },
                        {
                            "blank": true,
                            "choices": null,
                            "db_index": false,
                            "default": null,
                            "description": "Amount",
                            "editable": true,
                            "help_text": null,
                            "name": "amount",
                            "null": true,
                            "param": null,
                            "rel_to": null,
                            "type": "FloatField",
                            "unique": false,
                            "url_params": null
                        }
                    ]
                ],
                [
                    {
                        "base_table": "JSONModel",
                        "doc": null,
                        "generic": true,
                        "metaclass_code": null,
                        "name": "ExtendedLog",
                        "ordering": "['id']",
                        "proxy_model": null,
                        "table_code": null,
                        "url_params": null,
                        "verbose_name": "Extended log",
                        "verbose_name_plural": "Extended log"
                    },
                    [
                        {
                            "blank": false,
                            "choices": null,
                            "db_index": false,
                            "default": null,
                            "description": "Measurement point",
                            "editable": true,
                            "help_text": null,
                            "name": "mp",
                            "null": false,
                            "param": null,
                            "rel_to": "MeasurementPoint",
                            "type": "PtigForeignKey",
                            "unique": false,
                            "url_params": null
                        },
                        {
                            "blank": false,
                            "choices": null,
                            "db_index": true,
                            "default": null,
                            "description": "Time",
                            "editable": true,
                            "help_text": null,
                            "name": "time",
                            "null": false,
                            "param": "auto_now_add=True",
                            "rel_to": null,
                            "type": "DateTimeField",
                            "unique": false,
                            "url_params": null
                        },
                        {
                            "blank": false,
                            "choices": null,
                            "db_index": true,
                            "default": null,
                            "description": "Attribute",
                            "editable": true,
                            "help_text": null,
                            "name": "attr",
                            "null": false,
                            "param": "max_length=16",
                            "rel_to": null,
                            "type": "CharField",
                            "unique": false,
                            "url_params": null
                        }
                    ]
                ],
                [
                    {
                        "base_table": "JSONModel",
                        "doc": null,
                        "generic": true,
                        "metaclass_code": null,
                        "name": "MPointInputQueue",
                        "ordering": "['id']",
                        "proxy_model": null,
                        "table_code": null,
                        "url_params": null,
                        "verbose_name": "Measurement point input queue",
                        "verbose_name_plural": "Measurement point input queue"
                    },
                    [
                        {
                            "blank": false,
                            "choices": null,
                            "db_index": false,
                            "default": null,
                            "description": "Measurement point",
                            "editable": true,
                            "help_text": null,
                            "name": "mp",
                            "null": false,
                            "param": null,
                            "rel_to": "MeasurementPoint",
                            "type": "PtigForeignKey",
                            "unique": false,
                            "url_params": null
                        }
                    ]
                ],
                [
                    {
                        "base_table": "JSONModel",
                        "doc": null,
                        "generic": true,
                        "metaclass_code": null,
                        "name": "MPointInputQueueStatus",
                        "ordering": "['id']",
                        "proxy_model": null,
                        "table_code": null,
                        "url_params": null,
                        "verbose_name": "Measurement point input queue status",
                        "verbose_name_plural": "Measurement point input queue statuses"
                    },
                    [
                        {
                            "blank": false,
                            "choices": null,
                            "db_index": false,
                            "default": null,
                            "description": "Measurement point",
                            "editable": true,
                            "help_text": null,
                            "name": "mp",
                            "null": false,
                            "param": null,
                            "rel_to": "MeasurementPoint",
                            "type": "OneToOneField",
                            "unique": false,
                            "url_params": null
                        }
                    ]
                ],
                [
                    {
                        "base_table": "JSONModel",
                        "doc": null,
                        "generic": true,
                        "metaclass_code": null,
                        "name": "MPointOutputQueue",
                        "ordering": "['id']",
                        "proxy_model": null,
                        "table_code": null,
                        "url_params": null,
                        "verbose_name": "Measurement point output queue",
                        "verbose_name_plural": "Measurement point output queue"
                    },
                    [
                        {
                            "blank": false,
                            "choices": null,
                            "db_index": false,
                            "default": null,
                            "description": "Measurement point",
                            "editable": true,
                            "help_text": null,
                            "name": "mp",
                            "null": false,
                            "param": null,
                            "rel_to": "MeasurementPoint",
                            "type": "PtigForeignKey",
                            "unique": false,
                            "url_params": null
                        }
                    ]
                ],
                [
                    {
                        "base_table": "JSONModel",
                        "doc": null,
                        "generic": true,
                        "metaclass_code": null,
                        "name": "MPointOutputQueueStatus",
                        "ordering": "['id']",
                        "proxy_model": null,
                        "table_code": null,
                        "url_params": null,
                        "verbose_name": "Measurement point output queue status",
                        "verbose_name_plural": "Measurement point output queue status"
                    },
                    [
                        {
                            "blank": false,
                            "choices": null,
                            "db_index": false,
                            "default": null,
                            "description": "Measurement point",
                            "editable": true,
                            "help_text": null,
                            "name": "mp",
                            "null": false,
                            "param": null,
                            "rel_to": "MeasurementPoint",
                            "type": "OneToOneField",
                            "unique": false,
                            "url_params": null
                        }
                    ]
                ],
                [
                    {
                        "base_table": "JSONModel",
                        "doc": null,
                        "generic": true,
                        "metaclass_code": null,
                        "name": "MPointControlQueue",
                        "ordering": "['id']",
                        "proxy_model": null,
                        "table_code": null,
                        "url_params": null,
                        "verbose_name": "Measurement point control queue",
                        "verbose_name_plural": "Measurement point control queue"
                    },
                    [
                        {
                            "blank": false,
                            "choices": null,
                            "db_index": false,
                            "default": null,
                            "description": "Measurement point",
                            "editable": true,
                            "help_text": null,
                            "name": "mp",
                            "null": false,
                            "param": null,
                            "rel_to": "MeasurementPoint",
                            "type": "PtigForeignKey",
                            "unique": false,
                            "url_params": null
                        },
                        {
                            "blank": true,
                            "choices": null,
                            "db_index": false,
                            "default": null,
                            "description": "Description",
                            "editable": true,
                            "help_text": null,
                            "name": "description",
                            "null": true,
                            "param": "max_length=128",
                            "rel_to": null,
                            "type": "CharField",
                            "unique": false,
                            "url_params": null
                        }
                    ]
                ],
                [
                    {
                        "base_table": "JSONModel",
                        "doc": null,
                        "generic": true,
                        "metaclass_code": null,
                        "name": "MPointControlQueueStatus",
                        "ordering": "['id']",
                        "proxy_model": null,
                        "table_code": null,
                        "url_params": null,
                        "verbose_name": "Measurement point control queue status",
                        "verbose_name_plural": "Measurement point control queue status"
                    },
                    [
                        {
                            "blank": false,
                            "choices": null,
                            "db_index": false,
                            "default": null,
                            "description": "Measurement point",
                            "editable": true,
                            "help_text": null,
                            "name": "mp",
                            "null": false,
                            "param": null,
                            "rel_to": "MeasurementPoint",
                            "type": "OneToOneField",
                            "unique": false,
                            "url_params": null
                        }
                    ]
                ]
            ],
            [],
            [],
            [
                {
                    "asynchronous": false,
                    "direct_to_template": null,
                    "name": "Feature",
                    "tags_mount": null,
                    "template_code": "% extends \"forms/form.html\"\n\n% load exfiltry\n% load exsyntax\n\n%% all\n    % with table_type='datatable':\n        {{ block.super }}\n\n%% scroll\n\n%% list_content_actions\n\n%% list_row_header\n    th..._(Data)\n\n%% list_row\n    td...{{object.jsondata}}\n\n%% list_row_actions\n    % row_actions:\n        .delete\n\n%% row_edit\n    % form:\n",
                    "url": null,
                    "url_parm": null
                },
                {
                    "asynchronous": false,
                    "direct_to_template": null,
                    "name": "Location",
                    "tags_mount": null,
                    "template_code": "% extends \"forms/form.html\"\n\n% load exfiltry\n% load exsyntax\n\n%% all\n    % with table_type='datatable':\n        {{ block.super }}\n\n%% scroll\n\n%% list_content_actions\n    % new_row \"New location\"\n\n%% list_row_header\n    th..._(Name)\n    \n\n%% list_row\n    td...{{ object.name }}\n    \n%% list_row_actions\n    % row_actions:\n        .edit\n        .delete\n\n%% row_edit\n    % form:\n",
                    "url": null,
                    "url_parm": null
                },
                {
                    "asynchronous": false,
                    "direct_to_template": null,
                    "name": "MeasurementPoint",
                    "tags_mount": null,
                    "template_code": "% extends \"forms/form.html\"\n\n% load exfiltry\n% load exsyntax\n\n%% all\n    % with table_type='datatable' table_subtype='table_with_details' table_details_height=\"33vh\":\n        {{ block.super }}\n\n%% scroll\n\n%% list_content_actions\n    % new_row \"New measurement point\"\n\n%% list_row_header\n    th..._(Company)\n    th..._(Facility)\n    th..._(Name)\n    th..._(Status)\n    \n%% list_row\n    td...{{ object.company }}\n    td...{{ object.facility }}\n    td...{{ object.name }}\n    td\n        _MP state:  <i>{{ object.measurementpointstate.jsondata }}</i><br />\n        _MP control queue status: <i>{{ object.mpointcontrolqueuestatus.jsondata }}</i><br />\n        _MP input queue status: <i>{{ object.mpointinputqueuestatus.jsondata }}</i><br />\n        _MP output queue status: <i>{{ object.mpointoutputqueuestatus.jsondata }}</i> \n\n%% list_row_actions\n    % row_actions:\n        .edit\n        .delete\n        .field_edit/input_proc,Edit input procedure\n        .field_edit/control_proc,Edit control procedure\n        .field_edit/com_proc,Edit communication procedure\n        .field_edit/state_proc,Edit state procedure\n\n% comment:\n    %% list_page_sidebar    \n        % v_row_details:\n            *Input queue:otkernel/table/MeasurementPoint/[[table_row_pk]]/mpointinputqueue_set/-/form/sublist/?x1=mpointinputqueue_set\n            .Output queue:otkernel/table/MeasurementPoint/[[table_row_pk]]/mpointoutputqueue_set/-/form/sublist/?x1=mpointoutputqueue_set\n\n%% list_page_footer\n    % row_details:\n        *Input queue:otkernel/table/MeasurementPoint/[[table_row_pk]]/mpointinputqueue_set/-/form/sublist/?x1=mpointinputqueue_set\n        .Output queue:otkernel/table/MeasurementPoint/[[table_row_pk]]/mpointoutputqueue_set/-/form/sublist/?x1=mpointoutputqueue_set\n        .Control queue:otkernel/table/MeasurementPoint/[[table_row_pk]]/mpointcontrolqueue_set/-/form/sublist/?x1=mpointcontrolqueue_set\n        .Logs:otkernel/table/MeasurementPoint/[[table_row_pk]]/log_set/-/form/sublist/?x1=log_set\n        .Extended logs:otkernel/table/MeasurementPoint/[[table_row_pk]]/extendedlog_set/-/form/sublist/?x1=extendedlog_set\n\n                \n%% row_edit\n    % form:\n        .company,facility,name\n",
                    "url": null,
                    "url_parm": null
                },
                {
                    "asynchronous": false,
                    "direct_to_template": null,
                    "name": "MeasurementPointState",
                    "tags_mount": null,
                    "template_code": "% extends \"forms/form.html\"\n\n% load exfiltry\n% load exsyntax\n\n%% all\n    % with table_type='datatable':\n        {{ block.super }}\n\n%% scroll\n\n%% list_content_actions\n\n%% list_row_header\n    th...Measurement point\n    th..._(Data)\n    \n%% list_row\n    td...{{ object.parent.name }}\n    td...{{ object.jsondata }}\n\n%% list_row_actions\n    % row_actions:\n        .edit\n        .delete\n\n%% row_edit\n    % form:\n        .parent\n",
                    "url": null,
                    "url_parm": null
                },
                {
                    "asynchronous": false,
                    "direct_to_template": null,
                    "name": "Product",
                    "tags_mount": null,
                    "template_code": "% extends \"forms/form.html\"\n\n% load exfiltry\n% load exsyntax\n\n%% all\n    % with table_type='datatable':\n        {{ block.super }}\n\n%% scroll\n\n%% list_content_actions\n    % new_row \"new product\"\n\n%% list_row_header\n    th..._(External id)\n    th..._(Name)\n    th..._(Conversion factor)\n    th..._(Active)\n    \n\n%% list_row\n    td...{{ object.external_id }}\n    td...{{ object.name }}\n    td...{{ object.conversion_factor }}\n    td...{{ object.active }}\n    \n\n%% list_row_actions\n    % row_actions:\n        .edit\n        .delete\n        .field_list/inventory_set,Inventory\n\n%% row_edit\n    % form:\n        .external_id,name,conversion_factor,active\n",
                    "url": null,
                    "url_parm": null
                },
                {
                    "asynchronous": false,
                    "direct_to_template": null,
                    "name": "Inventory",
                    "tags_mount": null,
                    "template_code": "% extends \"forms/form.html\"\n\n% load exfiltry\n% load exsyntax\n\n%% all\n    % with table_type='datatable':\n        {{ block.super }}\n\n%% scroll\n\n%% list_content_actions\n\n%% list_row_header\n    th..._(Product)\n    th..._(Location)\n    th..._(Amount)\n    th..._(RFID)\n    th..._(Feature)\n    th..._(Last operation)\n    \n\n%% list_row\n    td...{{ object.product }}\n    td...{{ object.location }}\n    td...{{ object.amount }}\n    td...{{ object.rfid }}\n    td...{{ object.feature }}\n    td...{{ object.last_operation }}\n    \n\n%% list_row_actions\n    % row_actions:\n        .delete\n\n%% row_edit\n    % form:\n        .product,location,amount,rfid,feature,last_operation\n",
                    "url": null,
                    "url_parm": null
                },
                {
                    "asynchronous": false,
                    "direct_to_template": null,
                    "name": "Operation",
                    "tags_mount": null,
                    "template_code": "% extends \"forms/form.html\"\n\n% load exfiltry\n% load exsyntax\n\n%% all\n    % with table_type='datatable':\n        {{ block.super }}\n\n%% scroll\n\n%% list_content_actions\n    % new_row \"New operation\"\n\n%% list_row_header\n    th..._(Previous operation)\n    th..._(Time)\n    th...data\n    \n%% list_row\n    td...{{ object.previous_operation }}\n    td...{{ object.time }}\n    td...{{ object.jsondata }}\n    \n%% list_row_actions\n    % row_actions:\n        .field_list/inventory_set,Inventory\n\n%% row_edit\n    % form:\n        .previous_operation\n",
                    "url": null,
                    "url_parm": null
                },
                {
                    "asynchronous": false,
                    "direct_to_template": null,
                    "name": "Log",
                    "tags_mount": null,
                    "template_code": "% extends \"forms/form.html\"\n\n% load exfiltry\n% load exsyntax\n\n\n%% all\n    % with table_type='datatable':\n        {{ block.super }}\n\n%% scroll\n\n\n%% list_content_actions\n\n\n%% list_row_header_end\n    th data-field=caction,,,data-visible=false\n        ._(Action)\n\n\n%% list_row_header\n    % if vtype != \"sublist\":\n        th..._(Measurement point)\n    th..._(Time)\n    th..._(Attribute)\n    th..._(Amount)\n    \n\n%% list_row\n    % if vtype != \"sublist\":\n        td...{{ object.mp.id }}: {{ object.mp.name }}\n    td...{{ object.time|isoformat }}\n    td...{{ object.attr }}\n    td...{{ object.amount }}\n    \n\n%% list_row_actions\n    % row_actions:\n        .delete\n\n\n%% row_edit\n    % form:\n        .mp,time,attr,amount\n",
                    "url": null,
                    "url_parm": null
                },
                {
                    "asynchronous": false,
                    "direct_to_template": null,
                    "name": "MPointInputQueue",
                    "tags_mount": null,
                    "template_code": "% extends \"forms/form.html\"\n\n% load exfiltry\n% load exsyntax\n\n%% all\n    % with table_type='datatable':\n        {{ block.super }}\n\n%% scroll\n\n%% list_row_header_end\n    th data-field=caction,,,data-visible=false\n        ._(Action)\n\n%% list_row_header\n    % if vtype != \"sublist\":\n        th..._(Measurement point)\n    th...data\n    \n\n%% list_row\n    % if vtype != \"sublist\":\n        td...{{ object.mp }}\n    td...{{ object.jsondata }}\n    \n%% list_row_actions\n    \n\n%% row_edit\n    % form:\n        .mp\n",
                    "url": null,
                    "url_parm": null
                },
                {
                    "asynchronous": false,
                    "direct_to_template": null,
                    "name": "MPointInputQueueStatus",
                    "tags_mount": null,
                    "template_code": "% extends \"forms/form.html\"\n\n% load exfiltry\n% load exsyntax\n\n%% all\n    % with table_type='datatable':\n        {{ block.super }}\n\n%% scroll\n\n%% list_content_actions\n\n%% list_row_header\n    th..._(Measurement point)\n    th...data\n    \n%% list_row\n    td...{{ object.mp }}\n    td...{{ object.jsondata }}\n    \n\n%% list_row_actions\n    % row_actions:\n        .delete\n\n%% row_edit\n    % form:\n        .mp\n",
                    "url": null,
                    "url_parm": null
                },
                {
                    "asynchronous": false,
                    "direct_to_template": null,
                    "name": "MPointOutputQueue",
                    "tags_mount": null,
                    "template_code": "% extends \"forms/form.html\"\n\n% load exfiltry\n% load exsyntax\n\n\n%% all\n    % with table_type='datatable':\n        {{ block.super }}\n\n\n%% scroll\n\n\n%% list_content_actions\n\n\n%% list_row_header_end\n    th data-field=caction,,,data-visible=false\n        ._(Action)\n\n%% list_row_header\n    % if vtype != \"sublist\":\n        th..._(Measurement point)\n    th..._(Data)\n    \n\n%% list_row\n    % if vtype != \"sublist\":\n        td...{{ object.mp }}\n    td...{{ object.jsondata }}\n    \n\n%% list_row_actions\n\n\n%% row_edit\n    % form:\n        .mp\n",
                    "url": null,
                    "url_parm": null
                },
                {
                    "asynchronous": false,
                    "direct_to_template": null,
                    "name": "MPointOutputQueueStatus",
                    "tags_mount": null,
                    "template_code": "% extends \"forms/form.html\"\n\n% load exfiltry\n% load exsyntax\n\n%% all\n    % with table_type='datatable':\n        {{ block.super }}\n\n%% scroll\n\n%% list_content_actions\n\n%% list_row_header\n    th..._(Measurement point)\n    th..._(Data)\n    \n%% list_row\n    td...{{ object.mp }}\n    td...{{ object.jsondata }}\n    \n\n%% list_row_actions\n    % row_actions:\n        .delete\n\n%% row_edit\n    % form:\n        .mp\n",
                    "url": null,
                    "url_parm": null
                },
                {
                    "asynchronous": false,
                    "direct_to_template": null,
                    "name": "MPointControlQueue",
                    "tags_mount": null,
                    "template_code": "% extends \"forms/form.html\"\n\n% load exfiltry\n% load exsyntax\n\n\n%% all\n    % with table_type='datatable':\n        {{ block.super }}\n\n\n%% scroll\n\n\n%% list_content_actions\n\n\n%% list_row_header_end\n    th data-field=caction,,,data-visible=false\n        ._(Action)\n\n\n%% list_row_header\n    % if vtype != \"sublist\":\n        th..._(Measurement point)\n    th..._(Description)\n    th...data\n    \n\n%% list_row\n    % if vtype != \"sublist\":\n        td...{{ object.mp }}\n    td...{{ object.description }}\n    td...{{ object.jsondata }}\n    \n\n%% list_row_actions\n    % row_actions:\n        .delete\n\n\n%% row_edit\n    % form:\n        .mp,description\n",
                    "url": null,
                    "url_parm": null
                },
                {
                    "asynchronous": false,
                    "direct_to_template": null,
                    "name": "RawMaterial",
                    "tags_mount": null,
                    "template_code": "% extends \"forms/form.html\"\n\n% load exfiltry\n% load exsyntax\n\n%% all\n    % with table_type='datatable':\n        {{ block.super }}\n\n%% scroll\n\n%% list_content_actions\n    % new_row \"New raw material\"\n\n%% list_row_header\n    th..._(External id)\n    th..._(Name)\n    th..._(Active)\n    \n%% list_row\n    td...{{ object.external_id }}\n    td...{{ object.name }}\n    td...{{ object.active }}\n    \n\n%% list_row_actions\n    % row_actions:\n        .edit\n        .delete\n\n%% row_edit\n    % form:\n        .external_id,name,active\n",
                    "url": null,
                    "url_parm": null
                },
                {
                    "asynchronous": false,
                    "direct_to_template": null,
                    "name": "ExtendedLog",
                    "tags_mount": null,
                    "template_code": "% extends \"forms/form.html\"\n\n% load exfiltry\n% load exsyntax\n\n\n%% all\n    % with table_type='datatable':\n        {{ block.super }}\n\n\n%% scroll\n\n\n%% list_content_actions\n\n\n%% list_row_header_end\n    th data-field=caction,,,data-visible=false\n        ._(Action)\n\n\n%% list_row_header\n    % if vtype != \"sublist\":\n        th..._(Measurement point)\n    th..._(Time)\n    th..._(Attribute)\n    \n\n%% list_row\n    % if vtype != \"sublist\":\n        td...{{ object.mp.id }}: {{ object.mp.name }}\n    td...{{ object.time }}\n    td...{{ object.attr }}\n    \n\n%% list_row_actions\n    % row_actions:\n        .edit\n        .delete\n\n\n%% row_edit\n    % form:\n        .mp,attr\n",
                    "url": null,
                    "url_parm": null
                }
            ],
            [
                {
                    "icon": "png://apps/internet-group-chat.png",
                    "icon_code": null,
                    "icon_size": "1",
                    "name": "Features",
                    "perms": null,
                    "url": "table/Feature/-/form/list/",
                    "url_type": "-"
                },
                {
                    "icon": "png://categories/applications-internet.png",
                    "icon_code": null,
                    "icon_size": "1",
                    "name": "Locations",
                    "perms": null,
                    "url": "table/Location/-/form/list/",
                    "url_type": "-"
                },
                {
                    "icon": "png://actions/edit-find-replace.png",
                    "icon_code": null,
                    "icon_size": "1",
                    "name": "Measurement points",
                    "perms": null,
                    "url": "table/MeasurementPoint/-/form/list/",
                    "url_type": "-"
                },
                {
                    "icon": "png://places/user-desktop.png",
                    "icon_code": null,
                    "icon_size": "1",
                    "name": "Measurement point states",
                    "perms": null,
                    "url": "table/MeasurementPointState/-/form/list/",
                    "url_type": "-"
                },
                {
                    "icon": "png://apps/system-file-manager.png",
                    "icon_code": null,
                    "icon_size": "1",
                    "name": "Products",
                    "perms": null,
                    "url": "table/Product/-/form/list/",
                    "url_type": "-"
                },
                {
                    "icon": "png://actions/format-justify-fill.png",
                    "icon_code": null,
                    "icon_size": "1",
                    "name": "Inventory",
                    "perms": null,
                    "url": "table/Inventory/-/form/list/",
                    "url_type": "-"
                },
                {
                    "icon": "png://places/start-here.png",
                    "icon_code": null,
                    "icon_size": "1",
                    "name": "Operations",
                    "perms": null,
                    "url": "table/Operation/-/form/list/",
                    "url_type": "-"
                },
                {
                    "icon": "png://actions/document-properties.png",
                    "icon_code": null,
                    "icon_size": "1",
                    "name": "Logs",
                    "perms": null,
                    "url": "table/Log/-/form/list/",
                    "url_type": "-"
                },
                {
                    "icon": "png://status/image-loading.png",
                    "icon_code": null,
                    "icon_size": "1",
                    "name": "Extended logs",
                    "perms": null,
                    "url": "table/ExtendedLog/-/form/list/",
                    "url_type": "-"
                }
            ],
            [],
            [],
            [],
            [
                {
                    "content": "import graphene\nfrom graphene.types.generic import GenericScalar\nfrom . import models\nfrom pytigon_lib.schdjangoext.graphql import add_graphql_to_class\nfrom otkernel.applib.api import pub, prv\nfrom django.forms.models import model_to_dict\n    \ndef extend_query(query_class):        \n    #for model_name in dir(models):\n    #    model = getattr(models, model_name)\n    #    if hasattr(model, \"_meta\") and hasattr(model, \"filter_fields\"):\n    #        add_graphql_to_class(model, getattr(model, \"filter_fields\"), query_class)    \n    \n    class _QueryClass(query_class):                \n        get_first_control_cmd = GenericScalar        \n        def resolve_get_first_control_cmd(root, info, mp_id) :\n            return pub.get_first_control_cmd(mp_id)\n\n        get_first_output_item = GenericScalar        \n        def resolve_get_first_output_item(root, info, mp_id) :\n            return pub.get_first_output_item(mp_id)\n    \n        get_all_control_cmds=graphene.List(GenericScalar, mp_id = graphene.Int())        \n        def resolve_all_control_cmds(root, info, mp_id) :\n            ret = pub.get_all_control_cmds(mp_id)             \n            if ret:\n                return [ model_to_dict(obj) for obj in ret ]\n            else:\n                return []\n\n        get_all_output_items=graphene.List(GenericScalar, mp_id = graphene.Int())        \n        def resolve_get_all_output_items(root, info, mp_id) :\n            ret = pub.get_all_output_items(mp_id)\n            if ret:\n                return [ model_to_dict(obj) for obj in ret ]\n            else:\n                return []\n\n    return _QueryClass\n\nclass PushMeasurment(graphene.Mutation):\n    class Arguments:\n        mp_id = graphene.Int()\n        data = GenericScalar()\n        \n    ok = graphene.Boolean()\n    data = GenericScalar()\n\n    def mutate(root, info, mp_id, data):\n        ret = pub.push_measurement(mp_id, data)        \n        if ret:\n            ok = True\n            if type(ret) == dict:\n                d = ret\n            else:\n                d = model_to_dict(ret)\n        else:\n            ok = False\n            d = None\n        return PushMeasurment(ok=ok, data=d)\n\nclass SetMeasurementPointState(graphene.Mutation):\n    class Arguments:\n        mp_id = graphene.Int()\n        description = graphene.String()\n        data = GenericScalar()\n        \n    ok = graphene.Boolean()\n    data = GenericScalar()\n\n    def mutate(root, info, mp_id, description, data):\n        ret = pub.set_measurement_point_state(mp_id, description, data) \n        if ret:\n            ok = True\n            if type(ret) == dict:\n                d = ret\n            else:\n                d = model_to_dict(ret)\n        else:\n            ok = False\n            d = None\n        return SetMeasurementPointState(ok=ok, data=d)\n\n\nclass ClearAllInputItems(graphene.Mutation):\n    class Arguments:\n        mp_id = graphene.Int()\n                \n    ok = graphene.Boolean()\n    data = GenericScalar()\n\n    def mutate(root, info, mp_id):\n        ret = pub.clear_all_input_items(mp_id) \n        if ret:\n            ok = True\n            if type(ret) == dict:\n                d = ret\n            else:\n                d = model_to_dict(ret)\n        else:\n            ok = False\n            d = None\n        return ClearAllInputItems(ok=ok, data=d)\n\nclass PushControlCmd(graphene.Mutation):\n    class Arguments:\n        mp_id = graphene.Int()\n        description = graphene.String()\n        data = GenericScalar()\n\n    ok = graphene.Boolean()\n    data = GenericScalar()\n\n    def mutate(root, info, mp_id, description, data):\n        ret = pub.push_control_cmd(mp_id, description, data)        \n        if ret:\n            ok = True\n            if type(ret) == dict:\n                d = ret\n            else:\n                d = model_to_dict(ret)\n        else:\n            ok = False\n            d = None\n        return PushControlCmd(ok=ok, data=d)\n\n\nclass PopControlCmd(graphene.Mutation):\n    class Arguments:\n        mp_id = graphene.Int()\n                \n    ok = graphene.Boolean()\n    data = GenericScalar()\n\n    def mutate(root, info, mp_id):\n        ret = pub.pop_control_cmd(mp_id) \n        if ret:\n            ok = True\n            if type(ret) == dict:\n                d = ret\n            else:\n                d = model_to_dict(ret)\n        else:\n            ok = False\n            d = None\n        return PopControlCmd(ok=ok, data=d)\n\n\n\nclass ClearControlCmd(graphene.Mutation):\n    class Arguments:\n        mp_id = graphene.Int()\n        description = graphene.String()\n        data = GenericScalar()\n                \n    ok = graphene.Boolean()\n    data = GenericScalar()\n\n    def mutate(root, info, mp_id, description, data):\n        ret = pub.clear_control_cmd(mp_id, description, data) \n        if ret:\n            ok = True\n            if type(ret) == dict:\n                d = ret\n            else:\n                d = model_to_dict(ret)\n        else:\n            ok = False\n            d = None\n        return ClearControlCmd(ok=ok, data=d)\n\n\nclass ClearAllControlCmds(graphene.Mutation):\n    class Arguments:\n        mp_id = graphene.Int()\n                \n    ok = graphene.Boolean()\n    data = GenericScalar()\n\n    def mutate(root, info, mp_id):\n        ret = pub.clear_all_control_cmds(mp_id) \n        if ret:\n            ok = True\n            if type(ret) == dict:\n                d = ret\n            else:\n                d = model_to_dict(ret)\n        else:\n            ok = False\n            d = None\n        return ClearAllControlCmds(ok=ok, data=d)\n\nclass PopOutputItem(graphene.Mutation):\n    class Arguments:\n        mp_id = graphene.Int()\n                \n    ok = graphene.Boolean()\n    data = GenericScalar()\n\n    def mutate(root, info, mp_id):\n        ret = pub.pop_output_item(mp_id) \n        if ret:\n            ok = True\n            if type(ret) == dict:\n                d = ret\n            else:\n                d = model_to_dict(ret)\n        else:\n            ok = False\n            d = None\n        return PopOutputItem(ok=ok, data=d)\n\nclass ClearOutputItem(graphene.Mutation):\n    class Arguments:\n        mp_id = graphene.Int()\n        data = GenericScalar()\n                \n    ok = graphene.Boolean()\n    data = GenericScalar()\n\n    def mutate(root, info, mp_id, data):\n        ret = pub.clear_output_item(mp_id, data) \n        if ret:\n            ok = True\n            if type(ret) == dict:\n                d = ret\n            else:\n                d = model_to_dict(ret)\n        else:\n            ok = False\n            d = None\n        return ClearOutputItem(ok=ok, data=d)\n\n\nclass ClearAllOutputItems(graphene.Mutation):\n    class Arguments:\n        mp_id = graphene.Int()\n                \n    ok = graphene.Boolean()\n    data = GenericScalar()\n\n    def mutate(root, info, mp_id):\n        ret = pub.clear_all_output_items(mp_id) \n        if ret:\n            ok = True\n            if type(ret) == dict:\n                d = ret\n            else:\n                d = model_to_dict(ret)\n        else:\n            ok = False\n            d = None\n        return ClearAllOutputItems(ok=ok, data=d)\n\n\ndef extend_mutation(mutation_class):\n    mutation_class.push_measurment = PushMeasurment.Field()\n    mutation_class.set_measurement_point_state = SetMeasurementPointState.Field()\n    mutation_class.clear_all_input_items = ClearAllInputItems.Field()\n    mutation_class.push_control_cmd = PushControlCmd.Field()\n    mutation_class.pop_control_cmd = PopControlCmd.Field()\n    mutation_class.clear_control_cmd = ClearControlCmd.Field()\n    mutation_class.clear_all_control_cmds = ClearAllControlCmds.Field()\n    mutation_class.pop_output_item = PopOutputItem.Field()\n    mutation_class.clear_output_item = ClearOutputItem.Field()\n    mutation_class.clear_all_output_items = ClearAllOutputItems.Field()\n    return mutation_class\n",
                    "file_type": "s",
                    "name": "gqlapi"
                },
                {
                    "content": "from otkernel.applib.core_api import mp_input, mp_control, mp_com, mp_state\nfrom otkernel.models import *\n\ndef push_measurement(mp_id, json_data):\n    return mp_input(mp_id, json_data)\n\ndef set_measurement_point_state(mp_id, description, json_data):\n    return mp_state(mp_id, description, json_data)\n\ndef get_measurement_point_state(mp_id):\n    return MeasurementPointState.objects.filter(parent__id = mp_id).first()\n\ndef clear_all_input_items(mp_id):\n    object_list = MPointInputQueue.objects.filter(mp_id=mp_id)\n    return object_list.delete()\n    \ndef push_control_cmd(mp_id, description, json_data):\n    return mp_control(mp_id, description, json_data)\n\ndef pop_control_cmd(mp_id):\n    object_list = MPointControlQueue.objects.filter(mp_id=mp_id).order_by(\"id\")\n    if object_list.count() > 0:\n        obj = object_list[0]        \n        obj.delete()\n        return { 'description': obj.description, 'data': obj.json_data }\n    else:\n        return None\n    \ndef get_first_control_cmd(mp_id):\n    object_list = MPointControlQueue.objects.filter(mp_id=mp_id).order_by(\"id\")\n    if object_list.count() > 0:\n        obj = object_list[0]        \n        return { 'description': obj.description, 'data': obj.json_data }\n    else:\n        return None\n    \ndef get_all_control_cmds(mp_id):\n    object_list = MPointControlQueue.objects.filter(mp_id=mp_id).order_by(\"id\")\n    return object_list\n    \ndef clear_control_cmd(mp_id, description, json_data):\n    object_list = MPointControlQueue.objects.filter(mp_id=mp_id)\n    for obj in object_list:\n        if obj.json_data == json_data:\n            if not description or description == obj.description:\n                return obj.delete()\n    return None\n    \ndef clear_all_control_cmds(mp_id):\n    object_list = MPointControlQueue.objects.filter(mp_id=mp_id)\n    return object_list.delete()\n    \ndef pop_output_item(mp_id):\n    object_list = MPointOutputQueue.objects.filter(mp_id=mp_id).order_by(\"id\")\n    if object_list.count() > 0:\n        obj = object_list[0]        \n        obj.delete()\n        return obj.json_data if obj.json_data else {}\n    else:\n        return None\n    \ndef get_first_output_item(mp_id):\n    object_list = MPointOutputQueue.objects.filter(mp_id=mp_id).order_by(\"id\")\n    if object_list.count() > 0:\n        obj = object_list[0]        \n        return obj.json_data if obj.json_data else {}\n    else:\n        return None\n    \ndef get_all_output_items(mp_id):\n    object_list = MPointOutputQueue.objects.filter(mp_id=mp_id).order_by(\"id\")\n    return object_list\n    \ndef clear_output_item(mp_id, json_data):\n    object_list = MPointOutputQueue.objects.filter(mp_id=mp_id)\n    for obj in object_list:\n        if obj.json_data == json_data:\n            return obj.delete()\n    return None\n        \ndef clear_all_output_items(mp_id):\n    object_list = MPointOutputQueue.objects.filter(mp_id=mp_id)\n    return object_list.delete()\n    \n",
                    "file_type": "l",
                    "name": "public_api"
                },
                {
                    "content": "from otkernel.models import *\n\nclass Api():\n    def __init__(self):\n        pass\n    \n    def register_api(self, namespace, api_obj):\n        setattr(self, namespace, api_obj)\n\nAPI = Api()\n\ndef push_measurement_default(mp_id, json_data):\n    obj = MPointInputQueue()\n    obj.mp_id = mp_id\n    obj.json_data = json_data\n    obj.save()\n    return obj\n\ndef push_control_cmd_default(mp_id, description, json_data):\n    obj = MPointControlQueue()\n    obj.mp_id = mp_id\n    obj.description = description\n    obj.json_data = json_data\n    obj.save()\n    return obj\n\ndef set_measurement_point_state_default(mp_id, description, json_data):\n    mp = MeasurementPoint.objects.get(mp_id)\n    state = mp.measurementpointstate\n    state.description = description\n    state.json_data = json_data\n    state.save()\n    return state\n\ndef _proc(mp_id, command, json_data, **argv):\n    global API\n    obj = MeasurementPoint.objects.get(pk=mp_id)\n    input_str = getattr(obj, command)\n    if input_str:\n        make_proc_str = (\n            \"def proc(obj, json_data, api, **argv):\\n\"\n                + \"\\n\".join([\"    \" + pos for pos in input_str.split(\"\\n\")])\n                + \"\\n\"\n        )    \n        exec(make_proc_str)\n        return locals()[\"proc\"](obj, json_data, API, **argv)\n    else:\n        if command == \"input_proc\":\n            return push_measurement_default(mp_id, json_data)\n        elif command == \"control_proc\":\n            return push_control_cmd_default(mp_id, argv['description'], json_data)\n        elif command == \"state_proc\":\n            return set_measurement_point_state_default(mp_id, json_data)\n\ndef mp_input(mp_id, json_data):\n    return _proc(mp_id, \"input_proc\", json_data)\n\ndef mp_control(mp_id, description, json_data):\n    return _proc(mp_id, \"control_proc\", json_data, description=description)\n    \ndef mp_com(mp_id, json_data):\n    return _proc(mp_id, \"com_proc\", json_data)\n\ndef mp_state(mp_id, description, json_data):\n    return _proc(mp_id, \"state_proc\", json_data, description=description)\n",
                    "file_type": "l",
                    "name": "core_api"
                },
                {
                    "content": "from otkernel.applib.core_api import mp_input, mp_control, mp_com, mp_state\nfrom otkernel.models import *\nfrom django.db import transaction\n\n@transaction.atomic\ndef move_control_to_state(control_mp_id, state_mp_id, description, json_data):\n    state = None\n    object_list = MPointControlQueue.objects.select_for_update().filter(mp_id=control_mp_id).order_by(\"id\")\n    for obj in object_list:\n        if obj.title == title and obj.json_data == json_data:\n            state = mp_state(state_mp_id, description, json_data)\n            obj.delete()\n    return state\n\ndef append_to_input(mp_id, json_data):\n    obj = MPointInputQueue()\n    obj.mp_id = mp_id\n    obj.json_data = json_data\n    obj.save()\n    return obj\n        \ndef append_to_control(mp_id, description, json_data):\n    obj = MPointControlQueue()\n    obj.mp_id = mp_id\n    obj.description = description\n    obj.json_data = json_data\n    obj.save()\n    return obj\n\ndef append_to_output(mp_id, json_data):\n    obj = MPointOutputQueue()\n    obj.mp_id = mp_id\n    obj.json_data = json_data\n    obj.save()\n    return obj\n\n@transaction.atomic\ndef pop_input(mp_id):\n    object_list = MPointInputQueue.objects.select_for_update().filter(mp_id=mp_id).order_by(\"id\")\n    if object_list.count() > 0:\n        obj = object_list[0]\n        obj.delete()\n        return obj.json_data if obj.json_data else {}\n    else:\n        return None\n    \ndef get_inputs(mp_id):\n    object_list = MPointInputQueue.objects.filter(mp_id=mp_id).order_by(\"id\")\n    return object_list\n    \n@transaction.atomic\ndef pop_output(mp_id):\n    object_list = MPointOutputQueue.objects.select_for_update().filter(mp_id=mp_id).order_by(\"id\")\n    if object_list.count() > 0:\n        obj = object_list[0]\n        obj.delete()\n        return obj.json_data if obj.json_data else {}\n    else:\n        return None\n    \ndef get_outputs(mp_id):\n    object_list = MPointOutputQueue.objects.filter(mp_id=mp_id).order_by(\"id\")\n    return object_list\n\n@transaction.atomic\ndef pop_control(mp_id):\n    object_list = MPointControlQueue.objects.select_for_update().filter(mp_id=mp_id).order_by(\"id\")\n    if object_list.count() > 0:\n        obj = object_list[0]\n        obj.delete()\n        return { 'description': obj.description, 'data': obj.json_data }\n    else:\n        return None\n\ndef get_controls(mp_id):\n    object_list = MPointControlQueue.objects.filter(mp_id=mp_id).order_by(\"id\")\n    return object_list\n\ndef create_task(mp_id, task_name, json_data):\n    pass\n    \ndef send_to_event_log(mp_id, text):\n    pass\n\ndef add_feature(mp_id, json_data):\n    obj = Feature()\n    obj.json_data = json_data\n    obj.save()\n    return obj\n    \ndef add_operation(json_data, previous_operation_id=None):\n    obj = Operation()\n    if previous_operation_id:\n        operation.previous_operation_id = previous_operation_id\n    operation.json_data = json_data\n    operation.save()\n    return operation\n        \ndef add_to_inventory(feature_id, operation_id, location_id, product_id=None, product_external_id=None, rfid=None, amount=1):\n    obj = Inventory()\n    if product_id:\n        product = Product.objects.get(pk=product_id, active=True)\n    elif product_external_id:\n        product = Product.objects.filter(external_id = product_external_id, active=True).first()\n    else:\n        product = None    \n    if product:\n        obj.product = product\n        obj.location_id = location_id\n        obj.amount = amount\n        obj.rfid = rfid\n        obj.feature_id = feature_id\n        obj.last_operation_id = operation_id\n        obj.save()\n        return obj\n    else:\n        return None\n    \ndef append_to_log(mp_id, attr, amount):\n    obj = Log()\n    obj.mp_id = mp_id\n    obj.attr = attr\n    obj.amount = amount\n    obj.save()\n    return obj\n    \ndef append_to_extended_log(mp_id, attr, data):\n    obj = ExtendedLog()\n    obj.mp_id = mp_id\n    obj.attr = attr\n    obj.json_data = data\n    obj.save()\n    return obj\n\ndef get_inventory(product_id=None, product_external_id=None, rfid=None, location=None):\n    obj = None\n    if rfid:\n        obj = Inventory.objects.get(rfid=rfid)\n    else:    \n        if product_id:\n            product = Product.objects.get(pk=product_id, active=True)\n        elif product_external_id:\n            product = Product.objects.filter(external_id = product_external_id, active=True).first()\n        else:\n            product = None    \n        if product:\n            if location:\n                object_list = Inventory.objects.get(product = product, location_id = location)\n            else:\n                object_list = Inventory.objects.get(product = product, location_id = location)\n            if object_list.count()==1:\n                obj = object_list[0]\n            else:\n                return None\n    return obj\n\ndef update_inventory(product_id=None, product_external_id=None, rfid=None, location=None, new_location=None, operation_json_data=None, input_mp_id=None):\n    obj = get_inventory(product_id, product_external_id, rfid, location)\n    if obj:\n        save = False\n        if new_location:\n            obj.location_id = new_location\n            save = True\n        if operation_json_data:\n            opr = add_operation(operation_json_data, previous_operation_id=obj.last_operation)\n            obj.last_operation = opr\n            save = True\n        if save:\n            obj.save()\n        return obj\n    return None\n",
                    "file_type": "l",
                    "name": "private_api"
                },
                {
                    "content": "import otkernel.applib.public_api as pub\nimport otkernel.applib.private_api as prv\nfrom django_q import *\nimport django_q\n\nfrom otkernel.applib.core_api import API\n\nAPI.register_api(\"pub\", pub)\nAPI.register_api(\"prv\", prv)\nAPI.register_api(\"django_q\", django_q)\n\n",
                    "file_type": "l",
                    "name": "api"
                },
                {
                    "content": "from django.urls import path\nfrom django.core import serializers\nfrom django.forms.models import model_to_dict\n\nfrom rest_framework.decorators import api_view\nfrom rest_framework.response import Response\n\nfrom otkernel.applib.api import pub, prv\n\n@api_view(['POST', \"DELETE\",])\ndef measurement(request, mp_id):\n    if request.method == 'POST':\n        ret = pub.push_measurement(mp_id, request.data[\"data\"])        \n        if ret:\n            if type(ret) == dict:\n                d = ret\n            else:\n                d = model_to_dict(ret)\n            return Response({ \"ok\": True, \"data\": d })\n        else:\n            return Response({ \"ok\": False })\n    elif request.method == 'DELETE':\n        return Response(pub.clear_all_input_items(mp_id))\n    return Response({ \"ok\": False })\n\n\n@api_view(['GET', 'PUT',])\ndef measurement_point_state(request, mp_id):\n    if request.method == 'GET':\n        ret = pub.get_measurement_point_state(mp_id)        \n        if ret:\n            if type(ret) == dict:\n                d = ret\n            else:\n                d = model_to_dict(ret)\n            return Response({ \"ok\": True, \"data\": d })\n        else:\n            return Response({ \"ok\": False })\n    elif request.method == 'PUT':\n        ret = pub.set_measurement_point_state(mp_id, request.data[\"description\"],  request.data[\"data\"])        \n        if ret:\n            if type(ret) == dict:\n                d = ret\n            else:\n                d = model_to_dict(ret)\n            return Response({ \"ok\": True, \"data\": d })\n        else:\n            return Response({ \"ok\": False })\n    return Response({ \"ok\": False })\n\n\n@api_view(['GET', 'POST', 'DELETE',])    \ndef control_cmd(request, mp_id):\n    if request.method == 'GET':\n        ret = pub.get_all_control_cmds(mp_id)\n        if ret != None:\n            d = serializers.serialize(\"json\", ret)\n            return Response({ \"ok\": True, \"data\": d })\n        else:\n            return Response({ \"ok\": False })\n    elif request.method == 'POST':\n        ret = pub.push_control_cmd(mp_id, request.data[\"description\"],  request.data[\"data\"])        \n        if ret:\n            if type(ret) == dict:\n                d = ret\n            else:\n                d = model_to_dict(ret)\n            return Response({ \"ok\": True, \"data\": d })\n        else:\n            return Response({ \"ok\": False })\n    elif request.method == 'DELETE':\n        ret = pub.clear_all_control_cmds(mp_id)\n        if ret != None:\n            return Response(ret)\n        else:\n            return Response({ \"ok\": False })\n    return Response({ \"ok\": False })\n\n\n@api_view(['GET',])\ndef pop_control_cmd(request, mp_id):\n    if request.method == 'GET':\n        ret = pub.pop_control_cmd(mp_id)        \n        if ret:\n            if type(ret) == dict:\n                d = ret\n            else:\n                d = model_to_dict(ret)\n            return Response({ \"ok\": True, \"data\": d })\n        else:\n            return Response({ \"ok\": False })\n    return Response({ \"ok\": False })\n\n\n@api_view(['GET',])\ndef get_first_control_cmd(request, mp_id):\n    if request.method == 'GET':\n        ret = pub.get_first_control_cmd(mp_id)\n        if ret:\n            if type(ret) == dict:\n                d = ret\n            else:\n                d = model_to_dict(ret)\n            return Response({ \"ok\": True, \"data\": d })\n        else:\n            return Response({ \"ok\": False })\n    return Response({ \"ok\": False })\n\n\n@api_view(['DELETE',])    \ndef clear_control_cmd(request, mp_id):\n    if request.method == 'DELETE':\n        ret = pub.clear_control_cmd(mp_id, request.data[\"description\"],  request.data[\"data\"])        \n        if ret:\n            return Response(ret)\n        else:\n            return Response({ \"ok\": False })\n    return Response({ \"ok\": False })\n\n\n@api_view(['GET', 'DELETE',])    \ndef output_item(request, mp_id):\n    if request.method == 'GET':\n        ret = pub.get_all_output_items(mp_id)\n        if ret != None:\n            d = serializers.serialize(\"json\", ret)\n            return Response({ \"ok\": True, \"data\": d })\n        else:\n            return Response({ \"ok\": False })\n    elif request.method == 'DELETE':\n        ret = pub.clear_all_output_items(mp_id)        \n        if ret:\n            return Response(ret)\n        else:\n            return Response({ \"ok\": False })\n    return Response({ \"ok\": False })\n\n\n@api_view(['GET',])\ndef pop_output_item(request, mp_id):\n    if request.method == 'GET':\n        ret = pub.pop_output_item(mp_id)\n        if ret:\n            return Response(ret)\n        else:\n            return Response({ \"ok\": False })\n    return Response({ \"ok\": False })\n\n\n@api_view(['GET',])\ndef get_first_output_item(request, mp_id):\n    if request.method == 'GET':\n        ret = pub.get_first_output_item(mp_id)\n        if ret:\n            return Response(ret)\n        else:\n            return Response({ \"ok\": False })\n    return Response({ \"ok\": False })\n\n\n@api_view(['DELETE',])\ndef clear_output_item(request, mp_id):\n    if request.method == 'DELETE':\n        ret = pub.clear_output_item(mp_id,  request.data[\"data\"])\n        if ret:\n            return Response(ret)\n        else:\n            return Response({ \"ok\": False })\n    return Response({ \"ok\": False })\n\n\nurlpatterns = [\n    path(\"<int:mp_id>/measurement/\", measurement, name=\"measurement\"),\n    path(\"<int:mp_id>/measurement_point_state/\", measurement_point_state, name=\"measurement_point_state\"),\n\n    path(\"<int:mp_id>/control_cmd/\", control_cmd, name=\"control_cmd\"),\n    \n    path(\"<int:mp_id>/control_cmd/pop/\", pop_control_cmd, name=\"pop_control_cmd\"),\n    path(\"<int:mp_id>/control_cmd/get_first/\", get_first_control_cmd, name=\"get_first_control_cmd\"),\n    path(\"<int:mp_id>/control_cmd/clear/\", clear_control_cmd, name=\"clear_control_cmd\"),\n\n    path(\"<int:mp_id>/output_item/\", output_item, name=\"output_item\"),\n    path(\"<int:mp_id>/output_item/pop/\", pop_output_item, name=\"pop_output_item\"),\n    path(\"<int:mp_id>/output_item/get_first/\", get_first_output_item, name=\"get_first_output_item\"),    \n    path(\"<int:mp_id>/output_item/clear/\", clear_output_item, name=\"clear_output_item\"),\n]\n",
                    "file_type": "r",
                    "name": "restapi"
                }
            ]
        ]
    ],
    []
]