[
    [
        null,
        "schcomponents/components/ptig-d3.js\nschcomponents/components/ptig-codeeditor.js\nschcomponents/components/ptig-plotly.js\nschcomponents/components/ptig-time.js\n_schwiki/components/insert_object.js\nschcomponents/components/ptig-webrtc.js\nschportal/components/teleconference.js",
        "tablet_modern",
        null,
        null,
        "_schtools.schtools,_schwiki.schwiki,_schdata.schreports,schcomponents.standard_components",
        "https://git.pytigon.cloud/pytigon/schportal.git",
        "toolmenu,toolbar(file(exit),clipboard,nav)",
        "tree",
        "None",
        null,
        "1",
        null,
        null,
        null,
        false,
        true,
        true,
        "schportal",
        null,
        true,
        null,
        "smartfon_standard",
        "schwiki/portal/Start/view/",
        "tablet_modern",
        "Pytigon portal",
        "###> templates_src/template/base.ihtml\n%% botstrap_css\n    {% css_link 'themes/bootswatch/materia/bootstrap.min.css' %}\n\n%% extrahead\n    %if standard_web_browser:\n        {% css_link 'themes/wiki.css' %}\n        {% css_link 'vanillajs_plugins/pygments/manni.css' %}\n    {{ block.super }}\n\n### templates_src/template/tablet.ihtml\n{# -*- coding: utf-8 -*- #}\n\n%extends 'template/tablet_base.html'\n\n%% logo\n    img src={{base_path}}static/favicon.ico\n    {{block.super}}\n\n###> settings_app.py\nSEARCH_PATH = \"/schwiki/%s/search/\"\n\nif 'EMAIL_HOST_USER' in os.environ:\n    EMAIL_HOST_USER = os.environ['EMAIL_HOST_USER']\nif 'EMAIL_HOST_PASSWORD' in os.environ:\n    EMAIL_HOST_PASSWORD = os.environ['EMAIL_HOST_PASSWORD']\n\nINSTALLED_APPS.append('allauth.socialaccount.providers.google')\nINSTALLED_APPS.append('allauth.socialaccount.providers.facebook')\nINSTALLED_APPS.append('allauth.socialaccount.providers.github')\nINSTALLED_APPS.append('allauth.socialaccount.providers.azure')\n\n\n#EMAIL_HOST = 'smtp.gmail.com'\n#EMAIL_PORT = 587\n#EMAIL_USE_TLS = True\n#EMAIL_IMAP_HOST = 'imap.gmail.com'\n#EMAIL_IMAP_INBOX = 'inbox'\n#EMAIL_IMAP_OUTBOX = 'outbox'\n",
        "NO_ASGI=True",
        "latest"
    ],
    [
        [
            [
                "",
                null,
                null,
                null,
                "1",
                null,
                null,
                null,
                "teleconference",
                "teleconference",
                false,
                "",
                "Teleconference",
                null,
                "",
                null
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                [
                    "def __init__(self, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n    self.host = True\n    self.base_room_group_name = \"default\"\n    \n\nasync def init_consumer(self, conf):\n    if 'room' in conf:\n        self.base_room_group_name = conf['room']\n\n    if 'host' in conf and conf['host']:\n        self.host = True\n        self.room_group_name = self.base_room_group_name+\"_host\"\n        self.room_other_group_name = self.base_room_group_name\n    else:\n        self.host = False\n        self.room_group_name = self.base_room_group_name\n        self.room_other_group_name = self.base_room_group_name + \"_host\"\n\n    await self.channel_layer.group_add(self.room_group_name, self.channel_name)\n\n    await self.send_json({\"status\": \"initiated\"})\n   \nasync def connect(self):\n    await self.accept()\n    await self.send_json({\"status\": \"connected\"})\n\nasync def disconnect(self, close_code):\n    await self.channel_layer.group_send(\n        self.room_other_group_name, {\"type\": \"chat_destroy\", \"message\": { 'destroy': True, } }\n    )\n    await self.channel_layer.group_discard(self.room_group_name, self.channel_name)\n    print(\"DDDDDDDDDDDDDDDDDIIIIIIIIIIIISSSSSSSSSSCONNECT\")\n\nasync def receive_json(self, content):\n    print(\"receive_json: \", content)\n    if \"init_consumer\" in content:\n        await self.init_consumer(content)\n    elif 'ping' in content:\n        pass\n    else:\n        await self.channel_layer.group_send(\n            self.room_other_group_name, {\"type\": \"chat_message\", \"message\": content}\n        )\n\nasync def chat_message(self, event):\n    message = event[\"message\"]\n    await self.send_json(message)\n\nasync def chat_destroy(self, event):\n    print(\"DEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEESTROY\")\n    message = event[\"message\"]\n    await self.send_json(message)\n",
                    "AsyncJsonWebsocketConsumer",
                    null,
                    "teleconference",
                    "teleconference"
                ]
            ],
            []
        ]
    ],
    [
        [
            ".logo \n    img \n        margin-top: -6px\n        position: absolute\n        right: 5px\n\n    span \n        top: 11px\n        position: absolute\n        font-size: 80%\n        left: -10px !important",
            null,
            "portal",
            "I"
        ],
        [
            "TAG = 'tele-room'\n\nTEMPLATE = \"\"\"\ndiv class=container\n    div class=row\n        div class=col-md-12 my-3\n            h2...Room\n    div class=row\n        div class=col-md-12\n            div class=f\n                ptig-webrtc ref=webrtc,,,width=100%,,,data-bind=:roomId;:src;:host\n\"\"\"\n\nwith DefineWebComponent(TAG, True) as comp:\n    comp.options[\"attributes\"] = {\"roomId\": None, \"host\": None,}        \n    comp.options['template'] = TEMPLATE\n    \n    def init(component):        \n        component.set_state({'src': window.BASE_PATH+\"teleconference/teleconference/channel/\"})\n    comp.options['init'] = init\n",
            null,
            "teleconference",
            "R"
        ],
        [
            "username: \"\",\ntheme: \"\",\ntime_str: \"\"",
            null,
            "globals",
            "G"
        ],
        [
            "def _on_time():\n    nonlocal GLOBAL_BUS \n    d = Date()\n    GLOBAL_BUS.emit(\"time_str\", d.toISOString().replace('T', ' ')[:19])\n    \nGLOBAL_TIMER = setInterval(_on_time, 1000)\n\n",
            null,
            "timer_init",
            "R"
        ]
    ]
]