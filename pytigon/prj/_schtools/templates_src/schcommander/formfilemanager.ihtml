{# -*- coding: utf-8self.CMD -*- #}

% extends "form.html"

% load exfiltry
% load exsyntax

%% pythoncode
    script language=python
        from base64 import b32encode, b32decode
        from pytigon_lib.schtools.schhtmlgen import Html as Hgen
        from pytigon_lib.schtasks.task import get_process_manager
        from PIL import Image
        from pytigon_lib.schtools.tools import extend_fun_to, bencode, bdecode
        from pytigon_gui.guilib.image import bitmap_from_href
        from wx.lib import platebtn

        def init_form(self):
            self.panels_dir=[]
            self.panels_state=[]
            self.tab  = 0
            self.tab2 = 1
            for pos in range(0,4):
                self.panels_dir.append([pos+1, 0, "/", False])
                self.panels_state.append(None)

            #x = [ None, None, None, None ]
            #for base_key in [ 'commander/{{request.user.username}}/path', 'commander/all/path']:
            #    print(base_key)
            #    test  = True
            #    for i in range(4):
            #        if not x[i]:
            #            objs = Parameter.objects.filter(key=base_key+str(i))
            #            if len(objs)>0:
            #                x[i] = objs[0].value
            #            else:
            #                test = False
            #    if test:
            #        break
            #for i in range(0,4):
            #    if x[i]:
            #        self.panels_dir[i][2] = x[i]
                    
            self.panels_to_refresh=[]
            
            self.aTable = [
                    (0, wx.WXK_F1,  self.on_help),
                    (0, wx.WXK_F2,  self.on_rename),
                    (0, wx.WXK_F3,  self.on_view),
                    (0, wx.WXK_F4,  self.on_edit),
                    (0, wx.WXK_F5,  self.on_copy),
                    (0, wx.WXK_F6,  self.on_move),
                    (0, wx.WXK_F7,  self.on_mkdir),
                    (0, wx.WXK_F8,  self.on_delete),
                    (0, wx.WXK_F9,  self.on_setup),
                    (0, wx.WXK_F10, self.on_user_menu),
                    (0, wx.WXK_F11, self.on_newfile),
                    (0, wx.WXK_TAB, self.on_tab),
                    (0, wx.WXK_BACK, self.on_back),
                    (0, wx.WXK_HOME, lambda event: self.CMD.goto_first_row()),
                    (0, wx.WXK_END, lambda event: self.CMD.goto_last_row())
                     ]
            self.set_acc_key_tab(self, self.aTable)

            self.CMD.GetTable().can_append=False
            self.CMD.Bind(wx.EVT_CHAR, self.on_char)
            self.CMD.DisableCellEditControl()
            self.CMD.GetTable().proxy.set_address("../../"+b32encode(self.panels_dir[0][2].encode('utf-8') ).decode('utf-8')+"/_/")
            self.CMD.GetTable().refresh(0)

            self.PANELS.body.Bind(wx.EVT_SET_FOCUS, self.on_panels_set_focus)

            self.refresh_html()
            Image.init()
            self.edit_img_win = None
            wx.grid.EVT_GRID_SELECT_CELL(self.CMD, self.on_select_cell)
            self.PANELS.body.filter_url = self.filter_url
            self.child_win = None
            self.waiting_proc = []

            self._make_process_info_button()

            self.GetParent().register_signal(self, "child_closed_with_ok")
            self.GetParent().register_signal(self, "child_canceled")

        def child_closed_with_ok(self):
            self._refresh_panels()

        def child_canceled(self):
            self.child_win = None

        def _make_process_info_button(self):
            page = self.page.GetParent()
            notebook = page.GetParent()
            id = notebook.GetPageIndex(page)

            b = bitmap_from_href("client://actions/media-record.png", 0)
            image = wx.ImageFromBitmap(b)
            image = image.Scale(16, 12, wx.IMAGE_QUALITY_HIGH)
            bmp = wx.BitmapFromImage(image)

            self.pbutton = platebtn.PlateButton(notebook, wx.ID_ANY, "", bmp, style=platebtn.PB_STYLE_NOBG|platebtn.PB_STYLE_SQUARE)
            self.pbutton.SetWindowVariant(wx.WINDOW_VARIANT_SMALL)
            self.pbutton.Disable()

            notebook.AddControlToPage(id, self.pbutton)
            self.pbutton.Bind(wx.EVT_BUTTON, self.on_pbutton)

        def on_pbutton(self, event):
            wx.GetApp().GetTopWindow().new_main_page("/tasks/form/TaskListForm/?schtml=1", "Task list")

        def handle_process_info(self, info_tab, **argv):
            for pos2 in self.waiting_proc:
                id = pos2[0]
                panels_to_refresh = pos2[1]
                test = True
                for pos in info_tab:
                    if id == pos.id:
                        if pos.status in (0,1):
                            test = False
                        break
                if test:
                    self.CMD.GetTable().clear_state()
                    if panels_to_refresh in (1,3):
                        self.panels_to_refresh.append(self.panels_dir[self.tab][2])
                    if panels_to_refresh in (1,3):
                        self.panels_to_refresh.append(self.panels_dir[self.tab2][2])
                    self._refresh_panels()
                    self.waiting_proc.remove(pos2)

            if len(self.waiting_proc)==0:
                self.unreg_application_signal_handler('PROCESS_INFO')
                self.pbutton.Disable()
            
        def _transform_item(self, item):
            from pytigon_lib.schfs.vfstools import norm_path
            item2 = norm_path(item)
            if len(item2)>32:
                x = item2[-28:]
                id = x.find('/')
                if id>0:
                    item2 = '...'+x[id+1:]
                else:
                    item2 = '...'+item[-27:]
            return item2

        def on_panels_set_focus(self, evt):
            print("ON_SET_FOCUS")
            self.CMD.SetFocus()

        def show_item(self, nr, item):
            strong = False
            if nr == self.tab:
                color = wx.GetApp().COLOUR_HIGHLIGHT
                strong = True
            elif nr == self.tab2:
                strong = True
                color = wx.GetApp().COLOUR_BACKGROUND
            else:
                color = wx.GetApp().COLOUR_BACKGROUND

            p = Hgen("p")
            p.setattr("bgcolor='%s' width='100%%' border='0'" % color)

            item2 = self._transform_item(item)

            a = p.append("a", "href='%s'" % str(nr))
            if len(item2)>32:
                font = a.append("small", "")
            else:
                font = a
            if strong:
                txt = font.append("strong")
                txt.value  = str(nr+1) + ". " + item2
            else:
                font.value = str(nr+1) + ". " + item2
            return p

        def refresh_html(self):
            html = Hgen("html", "")
            body = html.append("body", "width = '100%%' bgcolor='%s'" % wx.GetApp().COLOUR_BACKGROUND)
            for i in range(2):
                body.append( self.show_item(i, self.panels_dir[i][2]) )
            self.PANELS.set_page(html.dump())

        def filter_url(self, target, href):
            id = int(href)
            if id != self.tab:
                self.tab2 = self.tab
                self.tab = id
                self.change_panel()
            return True

        def change_panel(self):
            self.panels_state[self.tab2]=self.CMD.get_table_and_state()

            if self.panels_state[self.tab]==None:
                self.CMD.duplicate_table_and_state()
                self.CMD.GetTable().proxy.set_address("../../"+b32encode(self.panels_dir[self.tab][2].encode('utf-8') ).decode('utf-8')+"/_/")
                self.panels_state[self.tab]=self.CMD.get_table_and_state()
                self.CMD.GetTable().refresh(0)
            else:
                self.CMD.set_table_and_state(self.panels_state[self.tab])

                if self.panels_dir[self.tab][3]:
                    self.panels_dir[self.tab][3]=False
                    self.CMD.GetTable().refresh(0)

            self.refresh_html()


        def on_char(self, evt):
            if evt.KeyCode >= ord('1') and evt.KeyCode <= ord('4'):
                i = evt.KeyCode - ord('1')
                if evt.ControlDown():
                    if i != self.tab2:
                        self.tab2 = i
                        self.refresh_html()
                else:
                    if i != self.tab:
                        self.tab2 = self.tab
                        self.tab = i
                        self.change_panel()
            elif chr(evt.KeyCode).isalpha() or chr(evt.KeyCode).isdigit():
                if not self.child_win:
                    okno = self.new_child_page("^standard/tablefilter/tablefilter.html", title="Filter")
                    self.child_win = okno.body
                    self.child_win.set_acc_key_tab(self.child_win.SEARCH, self.aTable[:-4])
                    if hasattr(self.CMD, 'grid_aTable'):
                        self.child_win.set_acc_key_tab(self.child_win.SEARCH, self.CMD.grid_aTable)
                    self.child_win.refr()
                    self.child_win.Show()
                wx.CallAfter(self.child_win.start_key, evt.KeyCode)
            else:
                evt.Skip()

        def _refresh_panels(self):
            for panel in self.panels_dir:
                if panel[2] in self.panels_to_refresh:
                    panel[3]=True
                    if self.tab+1 == panel[0]:
                        self.CMD.GetTable().refresh(0)
                        self.refresh_html()
            self.panels_to_refresh=[]

        def on_back(self, url):
            key = ""
            self.CMD.GetTable().filter(key)

        def table_url(self, url):
            self.panels_dir[self.tab][2] = b32decode(url.split('/')[-3]).decode('utf-8')
            self.CMD.GetTable().clear_state()
            self.CMD.GetTable().filter("")
            self.CMD.SetGridCursor(0, 0)
            self.CMD.MakeCellVisible(0, 0)
            self.refresh_html()

        def table_command(self, url):
            self.on_edit(None)

        def on_help(self, event):
            pass

        def on_view(self, evt):
            pass

        def get_name_and_ext(self, row=None):
            if row==None:
                row = self.CMD.GetGridCursorRow()
            rec = self.CMD.GetTable().get_rec(row)
            file_name = rec[0] #.decode('utf-8')
            href = self.CMD.GetTable().proxy.tabaddress+"/../../../../open/"+file_name+"/"
            href2 = self.CMD.GetTable().proxy.tabaddress+"/../../../../save/"+file_name+"/"
            try:
                name = b32decode(file_name).decode('utf-8').split('/')[-1]
            except:
                name = b32decode(rec[0]).decode('utf-8').split('/')[-1]
            ext = name.split(".")
            if len(ext)>1:
                return (file_name, name, ext[-1])
            else:
                return (file_name, name, "")

        def is_image(self, row=None):
            id,name,ext = self.get_name_and_ext(row)
            if '.'+ext.lower() in Image.EXTENSION:
                return True
            else:
                return False

        def exec_editor(self, row):
            id, name, ext = self.get_name_and_ext(row)
            href = self.CMD.GetTable().proxy.tabaddress+"/../../../../open/"+id+"/"
            href2 = self.CMD.GetTable().proxy.tabaddress+"/../../../../save/"+id+"/"
            if '.'+ext.lower() in Image.EXTENSION: # ('jpg', 'jpeg', 'gif', 'png', 'bmp'):
                if self.edit_img_win:
                    okno = self.edit_img_win
                    okno.change_notebook_page_title(name)
                else:
                    print("X1")
                    okno = self.new_main_page("^standard/image_viewer/viewer.html", name, None)
                    print("X2", okno)
                    self.edit_img_win=okno
            else:
                if ext.lower() in ('txt', 'py', 'c', 'cpp', 'h', 'hpp', 'java', 'ihtml', 'html'):
                    okno = self.new_main_page("^standard/editor/editor.html", name, None)
                else:
                    if ext.lower() in ('svg',):
                        #href = self.CMD.GetTable().proxy.tabaddress+"/../../../../open_page/"+id+"/"
                        okno = self.new_main_page("^standard/svgctrl/viewer.html", name, None)
                    else:
                        href = self.CMD.GetTable().proxy.tabaddress+"/../../../../open_page/"+id+"/"
                        okno = self.new_main_page("^standard/hexview/viewer.html", name, None)
            ed = okno.body.EDITOR
            ed.load_from_url(href, ext)
            if hasattr(ed, 'GotoPos'):
                ed.GotoPos(0)
            if hasattr(ed, 'set_save_path'):
                okno.body.EDITOR.set_save_path(href2)

        def on_edit(self, evt):
            row = self.CMD.GetGridCursorRow()
            return self.exec_editor(row)


        def on_rename(self, event):
            win = self.new_child_page("/schcommander/form/Rename/")

            commander_form = self

            @extend_fun_to(win.body)
            def href_clicked(self, ctrl, attr_dict, upload=False, fields=False, params=None):
                ret = commander_form.CMD.GetTable().run_cmd('RENAME', ( bencode(commander_form.panels_dir[commander_form.tab][2]), bencode(self.name.GetValue())), 1)
                commander_form.panels_to_refresh.append(commander_form.panels_dir[commander_form.tab][2])
                commander_form._refresh_panels()
                def _exit():
                    self.any_parent_command('on_child_form_cancel')
                wx.CallAfter(_exit)


        def on_copy(self, evt):
            d=self.panels_dir[self.tab2][2]
            for i in range(4):
                if not i in (self.tab, self.tab2):
                    d += ";" + self.panels_dir[i][2]

            win = self.new_child_page("/schcommander/form/Copy/", param={'dir': d, })
            
            commander_form = self

            @extend_fun_to(win.body)
            def href_clicked(self, ctrl, attr_dict, upload=False, fields=False, params=None):
                ret = commander_form.CMD.GetTable().run_cmd('COPY', ( bencode(commander_form.panels_dir[commander_form.tab][2]), bencode(self.dest.GetValue())), 1)
                if 'process' in ret:
                    commander_form.waiting_proc.append((ret['process'], 2))
                    commander_form.pbutton.Enable()
                    commander_form.reg_application_signal_handler(commander_form.handle_process_info, 'PROCESS_INFO')
                def _exit():
                    self.any_parent_command('on_child_form_cancel')
                wx.CallAfter(_exit)

        def on_move(self, evt):
            d=self.panels_dir[self.tab2][2]
            for i in range(4):
                if not i in (self.tab, self.tab2):
                    d += ";" + self.panels_dir[i][2]

            win = self.new_child_page("/schcommander/form/Move/", param={'dir': d, })
            
            commander_form = self
            
            @extend_fun_to(win.body)
            def href_clicked(self, ctrl, attr_dict, upload=False, fields=False, params=None):
                ret = commander_form.CMD.GetTable().run_cmd('MOVE', ( bencode(commander_form.panels_dir[commander_form.tab][2]), bencode(self.dest.GetValue())), 1)
                if 'process' in ret:
                    commander_form.waiting_proc.append((ret['process'], 3))
                    commander_form.pbutton.Enable()
                    commander_form.reg_application_signal_handler(commander_form.handle_process_info, 'PROCESS_INFO')
                def _exit():
                    self.any_parent_command('on_child_form_cancel')
                wx.CallAfter(_exit)


        def on_newfile(self, evt):
            win = self.new_child_page("/schcommander/form/NewFile/")

            commander_form = self

            @extend_fun_to(win.body)
            def href_clicked(self, ctrl, attr_dict, upload=False, fields=False, params=None):
                ret = commander_form.CMD.GetTable().run_cmd('NEWFILE', ( bencode(commander_form.panels_dir[commander_form.tab][2]), bencode(self.name.GetValue())), 1)
                commander_form.panels_to_refresh.append(commander_form.panels_dir[commander_form.tab][2])
                commander_form._refresh_panels()
                def _exit():
                    self.any_parent_command('on_child_form_cancel')
                wx.CallAfter(_exit)
    

        def on_mkdir(self, evt):
            win = self.new_child_page("/schcommander/form/MkDir/")

            commander_form = self

            @extend_fun_to(win.body)
            def href_clicked(self, ctrl, attr_dict, upload=False, fields=False, params=None):
                ret = commander_form.CMD.GetTable().run_cmd('MKDIR', ( bencode(commander_form.panels_dir[commander_form.tab][2]), bencode(self.name.GetValue())), 1)
                commander_form.panels_to_refresh.append(commander_form.panels_dir[commander_form.tab][2])
                commander_form._refresh_panels()
                def _exit():
                    self.any_parent_command('on_child_form_cancel')
                wx.CallAfter(_exit)
   
        def on_delete(self, evt):
            ret = self.CMD.GetTable().run_cmd('DELETE', (b32encode(self.panels_dir[self.tab][2].encode('utf-8')), b32encode(b'TRASH')), 1)
            if 'process' in ret:
                self.waiting_proc.append((ret['process'], 1))
                self.pbutton.Enable()
                self.reg_application_signal_handler(self.handle_process_info, 'PROCESS_INFO')

        def on_setup(self, evt):
            win = self.new_child_page("/schcommander/form/Setup/", param={'dir': ";".join([ pos[2] for pos in self.panels_dir]), })
    
        def on_user_menu(self, evt):
            pass

        def on_tab(self, evt):
            i = self.tab2
            self.tab2 = self.tab
            self.tab =i
            self.change_panel()

        def on_select_cell(self, evt):
            row = evt.GetRow()
            if self.edit_img_win and self.is_image(row):
                self.exec_editor(row)
            evt.Skip()


%%form_title
    .Commander

%% content
    table width=100%
        tr
            td
                CTRL-HTML name=PANELS,,,width=100%,,,height=42
        tr
            td
                CTRL-NOBG_BUTTON width=36,,,height=36,,,name=paste,,,label=paste,,,src=client://actions/list-add.png
                CTRL-NOBG_BUTTON width=36,,,height=36,,,name=paste,,,label=paste,,,src=client://actions/list-add.png
                CTRL-NOBG_BUTTON width=36,,,height=36,,,name=paste,,,label=paste,,,src=client://actions/list-add.png
                CTRL-NOBG_BUTTON width=36,,,height=36,,,name=paste,,,label=paste,,,src=client://actions/list-add.png
                CTRL-NOBG_BUTTON width=36,,,height=36,,,name=paste,,,label=paste,,,src=client://actions/list-add.png
        tr
            td
                CTRL-GRID name=CMD,,,width=100%,,,height=100%,,,READONLY=1,,,src={{base_path}}schcommander/grid/_/_/,,,keymap=standard

