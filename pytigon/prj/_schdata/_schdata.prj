[
    [
        null,
        "schcomponents/components/ptig-wysiwygedit.js\nschcomponents/components/ptig-codeeditor.js",
        "tablet_modern",
        "",
        null,
        "_schtools.schtools",
        "https://git.pytigon.cloud/pytigon/_schdata.git",
        "toolbar(file(open,exit),clipboard",
        "modern",
        "None",
        null,
        "1",
        null,
        null,
        null,
        false,
        false,
        true,
        "_schdata",
        null,
        true,
        null,
        "auto",
        "_schdata",
        "tablet_modern",
        "Data structures",
        "###> templates_src/template/base.ihtml\n\n\n%% botstrap_css\n    {% css_link 'themes/bootswatch/materia.bootstrap.min.css' %}\n\n%% css_links\n    {{ block.super }}\n    {% css_link 'vanillajs_plugins/css_fab/fab.css' %}\n\n%% page_finish\n    {{ block.super }}\n    <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" style=\"height:0px;\">\n        <defs>\n          <filter id=\"shadowed-goo\">\n              <feGaussianBlur in=\"SourceGraphic\" result=\"blur\" stdDeviation=\"10\" />\n              <feColorMatrix in=\"blur\" mode=\"matrix\" values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -7\" result=\"goo\" />\n              <feGaussianBlur in=\"goo\" stdDeviation=\"3\" result=\"shadow\" />\n              <feColorMatrix in=\"shadow\" mode=\"matrix\" values=\"0 0 0 0 0  0 0 0 0 0  0 0 0 0 0  0 0 0 1 -0.2\" result=\"shadow\" />\n              <feOffset in=\"shadow\" dx=\"1\" dy=\"1\" result=\"shadow\" />\n              <feComposite in2=\"shadow\" in=\"goo\" result=\"goo\" />\n              <feComposite in2=\"goo\" in=\"SourceGraphic\" result=\"mix\" />\n          </filter>\n          <filter id=\"goo\">\n              <feGaussianBlur in=\"SourceGraphic\" result=\"blur\" stdDeviation=\"10\" />\n              <feColorMatrix in=\"blur\" mode=\"matrix\" values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -7\" result=\"goo\" />\n              <feComposite in2=\"goo\" in=\"SourceGraphic\" result=\"mix\" />\n          </filter>\n        </defs>\n    </svg>\n",
        "",
        "latest"
    ],
    [
        [
            [
                null,
                "",
                null,
                null,
                "1",
                "",
                null,
                "import copy\nfrom pytigon_lib.schdjangoext.django_ihtml import ihtml_to_html\nfrom django.template.loader import select_template\nimport datetime\nfrom django.db import transaction\nfrom django.contrib.contenttypes.models import ContentType\nfrom pytigon_lib.schtools.tools import content_to_function\nfrom django.db.models import Q, Sum\nfrom django.apps import apps\n\ndef limit_element1():\n    return {}\n    \ndef limit_element2():\n    return {}\n    \ndef limit_element3():\n    return {}\n    \ndef limit_element4():\n    return {}\n        \nLIMIT_ELEMENT1 = OverwritableCallable(limit_element1)\nLIMIT_ELEMENT2 = OverwritableCallable(limit_element2)\nLIMIT_ELEMENT3 = OverwritableCallable(limit_element3)\nLIMIT_ELEMENT4 = OverwritableCallable(limit_element4)\n\ndef get_element_queryset():\n    return None\n\nGET_ELEMENT_QUERYSET =  OverwritableCallable(get_element_queryset)\n\nclass ElementManager(models.Manager):\n    def get_queryset(self):\n        q = GET_ELEMENT_QUERYSET()\n        if q:\n            return super().get_queryset().filter(q)\n        else:\n            return super().get_queryset()\n",
                "main tools",
                "schelements",
                false,
                "",
                "Elements",
                "gen.for_field('DocType', 'dochead_set', 'Documents', prefix=\"doc\", template_name=\"schelements/dochead2.html\")\n",
                "",
                "from django.urls import resolve\nfrom django.conf import settings\nfrom django.db import transaction\nfrom django_select2.forms import HeavySelect2Widget, ModelSelect2Widget\nfrom django.core.validators import int_list_validator\n\nfrom pytigon_lib.schtools.tools import content_to_function\nfrom pytigon_lib.schdjangoext.fastform import form_from_str\nfrom django.db.models import Q, F\n\ndef year_ago():\n    dt = datetime.date.today()    \n    try:\n        dt = dt.replace(year=dt.year-1)\n    except ValueError:\n        dt = dt.replace(year=dt.year-1, day=dt.day-1)\n    return dt\n\ndef change_status(request, pk, action='accept'):    \n    doc_head = models.DocHead.objects.get(pk=pk)\n    doc_type = doc_head.doc_type_parent\n    doc_reg = doc_type.parent\n    action_name = request.GET.get('x1', '')\n    reg_status_list = models.DocRegStatus.objects.filter(parent=doc_reg, name=action_name)\n    if len(reg_status_list)==1:\n        reg_status = reg_status_list[0]\n    else: \n        reg_status = None\n    form = None\n\n    if reg_status:\n        if action=='accept':\n            form_txt = reg_status.accept_form\n            fun = content_to_function(reg_status.accept_proc, \"request, doc_head, reg_status, doc_type, doc_reg, doc_status, form\", globals_dict = { 'models': models ,})\n        else:\n            form_txt = reg_status.undo_form\n            fun = content_to_function(reg_status.undo_proc, \"request, doc_head, reg_status, doc_type, doc_reg, doc_status, form\", globals_dict = { 'models': models ,})\n\n        params = {\n            'request': request,\n            'doc_head': doc_head,\n            'doc_type': doc_type,\n            'doc_reg': doc_reg,\n        }\n        if form_txt:\n            form_class = form_from_str(form_txt, params)\n        else:\n            form_class = None\n\n        if (not form_class) or request.POST :\n            if form_class:\n                form = form_class(request.GET, request.POST)\n            else:\n                form = None\n\n            if (not form) or form.is_valid():\n                doc_status = models.DocHeadStatus()\n                doc_status.parent = doc_head\n\n                try:\n                    with transaction.atomic(): \n                        errors = fun(request, doc_head, reg_status, doc_type, doc_reg, doc_status, form)\n                except ValueError as err:\n                    errors = err.args\n\n                if not errors:\n                    if action_name and action_name != doc_head.status:\n                        doc_head.status = action_name\n                        doc_head.save()\n\n                    if action != 'accept':\n                        models.DocItem.objects.filter(parent=doc_head, level__gte = reg_status.order).delete()\n\n                    doc_status.date = datetime.datetime.now()\n                    doc_status.operator = request.user.username\n                    doc_status.save()\n\n                    return actions.update_row_ok(request, int(doc_head.id), str(doc_head))\n                else:\n                    return { 'errors': errors, 'form': form, 'doc_head': doc_head, 'doc_type': doc_type, 'doc_reg': doc_reg, 'reg_status': reg_status, 'action_name': action_name, }\n        if not form:\n            if form_class:\n                form = form_class()\n            else:\n                form = None\n            return { 'error': False, 'form': form, 'doc_head': doc_head, 'doc_type': doc_type, 'doc_reg': doc_reg, 'reg_status': reg_status, \n                'action_name': action_name,\n            }\n    else:\n        return { 'error': \"Status %s doesn't exists\" % action_name }\n"
            ],
            [
                [
                    [
                        null,
                        null,
                        true,
                        null,
                        "Element",
                        "['id']",
                        null,
                        "def init_new(self, request, view, param=None):\n    defaults = { 'type': param }\n    return defaults\n\n\ndef save(self, *argi, **argv):\n    if not self.code:\n        object_list = Element.objects.filter(type=self.type, code__startswith=self.type).order_by('-id')\n        if len(object_list)>0:\n            x = object_list[0].code.split('-')[-1]\n            try:\n                i = int(x) + 1\n            except:\n                i = 1\n            self.code = self.type+\"-\"+str(i)\n        else:\n            self.code = self.type+\"-1\"\n\n    path = self.code\n    if self.key:\n        key_path = self.key.name\n    else:\n        key_path = \"\"\n\n    tab = self.parents()\n    for pos in tab:\n        path = pos.code + \"/\" + path\n        if pos.key:\n            if key_path:\n                key_path = pos.key.name + '/' + key_path\n            else:\n                key_path = pos.key.name\n\n    self.path = path\n    self.key_path = key_path\n    \n    if len(tab)>0:\n        print(\"U1\", tab)\n        self.first_ancestor = tab[-1]\n        super().save(*argi, **argv)\n    else:\n        super().save(*argi, **argv)\n        print(\"U2\", self)\n        self.first_ancestor = self\n        super().save(*argi, **argv)\n    \n\ndef get_name(self):\n    return self.name\n\ndef _get_parent_elem(element_type):\n    tab = self.parents()\n    for pos in tab:\n        if pos.type==element_type:\n            return pos\n    return None\n    \n\ndef company(self):\n    return self._get_parent_elem('O-COM')\n\ndef division(self):\n    return self._get_parent_elem('O-DIV')\n\ndef departament(self):\n    return self._get_parent_elem('O-DEP')\n\ndef position(self):\n    return self._get_parent_elem('O-POS')\n\ndef location(self):\n    return self._get_parent_elem('O-LOC')\n\ndef owner_group(self):\n    return self._get_parent_elem('O-GRP')\n\ndef owner_grand_group(self):\n    grp =  self._get_parent_elem('O-GRP')\n    if grp:\n        return grp._get_parent_elem('O-GRP')\n    else:\n        return None\n\ndef item_group(self):\n    return self._get_parent_elem('I-GRP')\n\ndef item_grand_group(self):\n    grp =  self._get_parent_elem('I-GRP')\n    if grp:\n        return grp._get_parent_elem('I-GRP')\n    else:\n        return None\n\n\ndef related(self):\n    ret = \"\"\n    for obj in (self.grand_parent1, self.grand_parent2, self.grand_parent3, self.grand_parent4):\n        if obj:\n            if ret == \"\":\n                ret = obj.name\n            else:\n                ret = ret + \"; \" + obj.name\n    return ret\n\ndef parents(self):\n    p = []\n    parent = self.parent\n    while(parent):\n        p.append(parent)\n        if parent==parent.parent:\n            break\n        parent = parent.parent\n    return p\n\ndef del_get_children(self, child_type):\n    ret = []\n    object_list = Element.objects.filter(parent=self)\n    for child in object_list:\n        if child.type == child_type:\n            ret.append(child)\n        else:\n            x = child.get_children(child_type)\n            if x:\n                ret.extend(list(x))\n    return ret\n\n\ndef q_for_children(self, child_type):\n    ret = []\n    ret.append(Q(parent=self))\n    object_list = list(Element.objects.filter(parent=self).exclude(type=child_type))\n    if len(object_list)>0:\n        for child in object_list:\n                x = child.get_children(child_type)\n                if x:\n                    ret.extend(list(x))\n    return ret\n\ndef get_children(self, child_type):\n    qq = self.q_for_children(child_type)\n    return Element.objects.filter(*qq)\n\n\n@staticmethod\ndef get_children_for_element(parent_code, child_type):\n    object_list = Element.objects.filter(code=parent_code)\n    if len(object_list)>0:\n        return object_list[0].get_children(child_type)\n    return []\n\n@staticmethod\ndef limit_choices(parent_code, child_type):\n    ids = []\n    objects = Element.get_children_for_element(parent_code, child_type)\n    for obj in objects:\n        ids.append(obj.id)\n    return Q(id__in=ids)\n\ndef path(self):\n    p = self.parents()\n    n=\"\"\n    for parent in p:\n        if parent.code and parent.code!=\"\":\n            n = \"/\" + przodek.code + n\n        else:\n            n = \"/?\" + n\n    return n + \"/\" + self.code\n\ndef href_path(self):\n    p = self.parents()\n    n=\"\"\n    for parent in p:\n        href = \"<a target='_refresh_data' href='../../%s/form/tree'>\" % parent.id\n        if parent.code and parent.code!=\"\":\n            n = href + parent.code + \"</a>/\" + n\n        else:\n            n = href + \"?</a>/\" + n\n    return \"<a target='_refresh_data' href='../../0/form/tree'>/</a>\" + n + self.code\n\ndef href_path_list(self):\n    p = self.parents()\n    n=[]\n    for parent in p:\n        href = \"<a target='_refresh_data' href='../../%s/form/tree'>\" % parent.id\n        if parent.code and parent.code!=\"\":\n            n.append(href + parent.code + \"</a>\")\n        else:\n            n.append(href + \"?</a>\")\n    n.append(\"<a target='_refresh_data' href='../../0/form/tree'>/</a>\")\n    return n\n\ndef __str__(self):\n    p = self.parents()\n    if self.code and self.code!=\"\":\n        n = self.code + \":\" + self.name\n    else:\n        n = self.name\n    for parent in p:\n        if parent.code and parent.code!=\"\":\n            n = parent.code + \"/\" + n\n        else:\n            n = \"?/\" + n\n    return n\n\n@staticmethod\ndef gen_url(value):\n    if value:\n        id = int(value)\n    else:\n        id = -1\n    return \"/schsys/treedialog/schelements/Element/%s/\" % id\n    \n#def redirect_href(self, view, request):\n#    t = None\n#    if type(self)==Element:\n#        if 'add_param' in view.kwargs:\n#            t = view.kwargs['add_param']\n#        else:\n#            t = self.type\n#    if t:\n#        if hasattr(self, \"get_structure\"):\n#            s = self.get_structure()\n#            if t in s:\n#                redirect = s[t]['app'] + \"/table/\" + s[t]['table']\n#                return request.path.replace('schelements/table/Element',redirect)\n#    return None\n\n\ndef get_derived_object(self, param=None):\n    t = None\n    if hasattr(self, \"get_structure\"):\n        s = self.get_structure()\n\n    if type(self)==Element:\n        if hasattr(self, \"get_structure\"):\n            s = self.get_structure()\n            if param and 'view' in param and 'add_param' in param['view'].kwargs:\n                t = param['view'].kwargs['add_param']\n                if t=='-':\n                    return self\n                if t in s:\n                    model = apps.get_model(s[t]['app'], s[t]['table'])\n                    obj2 = copy.copy(self)\n                    obj2.__class__ = model\n                    return obj2\n                    #return ContentType.objects.get(app_label=s[t]['app'], model=s[t]['table']).model_class()()\n            else:\n                t = self.type\n                if t in s:\n                    if hasattr(self, s[t]['table'].lower()):\n                        return getattr(self, s[t]['table'].lower())\n                    else:\n                        model = apps.get_model(s[t]['app'], s[t]['table'])\n                        obj2 = copy.copy(self)\n                        obj2.__class__ = model\n                        return obj2\n    return self\n\n\ndef template_for_object(self, view, context, doc_type):\n    if self.id and doc_type in ('html', 'json'):\n        if hasattr(self, \"get_structure\"):\n            s = self.get_structure()\n            t = self.type\n            if t in s:\n                names = [ s[t]['app'].lower() + '/' + s[t]['table'].lower()+\".html\", ]\n                template = select_template(names)\n                if template:\n                    return template\n    return None\n\n\n@staticmethod\ndef _get_new_buttons(elem_type=\"ROOT\"):\n    buttons = []\n    \n    if hasattr(Element, \"get_structure\"):\n        s = Element.get_structure()\n        if elem_type in s:\n            if 'next' in s[elem_type]:\n                for item in s[elem_type]['next']:\n                    if item in s:\n                        button = {}\n                        button['type'] = item\n                        if 'title' in s[item]:\n                            button['title'] = s[item]['title']\n                        else:\n                            button['title'] = item\n                        if 'app' in s[item]:\n                            button['app'] = s[item]['app']\n                        else:\n                            button['app'] = \"\"\n                        if 'table' in s[item]:\n                            button['table'] = s[item]['table']\n                        else:\n                            button['table'] = \"\"\n\n                        buttons.append(button)\n    return buttons\n    \n@staticmethod\ndef get_root_new_buttons():\n    return Element._get_new_buttons(\"ROOT\")\n\ndef get_new_buttons(self):\n    if self.type in ('O-GRP', 'I-GRP'):\n        obj = self\n        while obj and obj.type in ('O-GRP', 'I-GRP'):\n            obj = obj.parent\n        if obj:\n            buttons = self._get_new_buttons(obj.type)\n        else:\n            buttons = self._get_new_buttons(\"ROOT\")\n        if self.description and '(' in self.description and ')' in self.description:\n            item = self.description.split('(')[1].split(')')[0]\n            if not ',' in item and not ';' in item:\n                s = Element.get_structure()\n                if item in s:\n                    button = {}\n                    button['type'] = item\n                    if 'title' in s[item]:\n                        button['title'] = s[item]['title']\n                    else:\n                        button['title'] = item\n                    if 'app' in s[item]:\n                        button['app'] = s[item]['app']\n                    else:\n                        button['app'] = \"\"\n                    if 'table' in s[item]:\n                        button['table'] = s[item]['table']\n                    else:\n                        button['table'] = \"\"\n                    if not button in buttons:\n                        buttons.append(button)\n            ret = []\n            for button in buttons:\n                if button['type'] in self.description:\n                    ret.append(button)\n            return ret\n        else:\n            return buttons\n        \n    else:\n        return self._get_new_buttons(self.type)\n\nobjects = ElementManager()\n    ",
                        null,
                        "Element",
                        "Elements"
                    ],
                    [
                        [
                            true,
                            "",
                            false,
                            "",
                            "Parent",
                            true,
                            "",
                            "parent",
                            true,
                            "",
                            "'self'",
                            "PtigTreeForeignKey",
                            false,
                            ""
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "First ancestor",
                            true,
                            null,
                            "first_ancestor",
                            true,
                            "related_name='first_ancestors'",
                            "'self'",
                            "ForeignKey",
                            false,
                            null
                        ],
                        [
                            false,
                            "element_type_choice",
                            false,
                            null,
                            "Element type",
                            true,
                            null,
                            "type",
                            false,
                            "max_length=8",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            true,
                            null,
                            "Code",
                            true,
                            null,
                            "code",
                            true,
                            "max_length=16",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            true,
                            null,
                            "Path",
                            true,
                            null,
                            "path",
                            true,
                            "max_length=1024",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            false,
                            "",
                            false,
                            "",
                            "Name",
                            true,
                            "",
                            "name",
                            false,
                            "max_length=64",
                            "",
                            "CharField",
                            false,
                            ""
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Grand parent 1",
                            true,
                            null,
                            "grand_parent1",
                            true,
                            "related_name='grandparent1', limit_choices_to=LIMIT_ELEMENT1",
                            "'self'",
                            "ForeignKey",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Grand parent 2",
                            true,
                            null,
                            "grand_parent2",
                            true,
                            "related_name='grandparent2', limit_choices_to=LIMIT_ELEMENT2",
                            "'self'",
                            "ForeignKey",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Grand parent 3",
                            true,
                            null,
                            "grand_parent3",
                            true,
                            "related_name='grandparent3', limit_choices_to=LIMIT_ELEMENT3",
                            "'self'",
                            "ForeignKey",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Grand parent 4",
                            true,
                            null,
                            "grand_parent4",
                            true,
                            "related_name='grandparent4', limit_choices_to=LIMIT_ELEMENT4",
                            "'self'",
                            "ForeignKey",
                            false,
                            null
                        ],
                        [
                            false,
                            null,
                            false,
                            null,
                            "Key",
                            true,
                            null,
                            "key",
                            false,
                            "key =  models.ForeignKey('auth.Group', on_delete=models.CASCADE, null=True, blank=True,)",
                            null,
                            "UserField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            true,
                            null,
                            "Key path",
                            false,
                            null,
                            "key_path",
                            true,
                            "max_length=256",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            "",
                            false,
                            "",
                            "Description",
                            true,
                            "",
                            "description",
                            true,
                            "max_length=64",
                            "",
                            "CharField",
                            false,
                            ""
                        ]
                    ]
                ],
                [
                    [
                        null,
                        null,
                        true,
                        null,
                        "DocReg",
                        "['id']",
                        null,
                        "def save(self, *args, **kwargs):\n    super().save(*args, **kwargs)\n\ndef get_parent(self):\n    if '/' in self.name:\n        x = self.name.rsplit('/',1)\n        objs = DocReg.objects.filter(name=x[0])\n        if len(objs)==1:\n            return objs[0]\n    return None\n\ndef get_last_subname(self):\n    if '/' in self.name:\n        return self.name.rsplit('/',1)[1]\n    else:\n        return self.name\n\n",
                        null,
                        "Document register",
                        "Document registers"
                    ],
                    [
                        [
                            false,
                            null,
                            false,
                            null,
                            "Application",
                            true,
                            null,
                            "app",
                            false,
                            "max_length=16",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            false,
                            null,
                            false,
                            null,
                            "Name",
                            true,
                            null,
                            "name",
                            false,
                            "max_length=32",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Group",
                            true,
                            null,
                            "group",
                            true,
                            "max_length=64",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            false,
                            null,
                            false,
                            null,
                            "Description",
                            true,
                            null,
                            "description",
                            false,
                            "max_length=64",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Head form",
                            false,
                            null,
                            "head_form",
                            true,
                            null,
                            null,
                            "TextField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Item form",
                            false,
                            null,
                            "item_form",
                            true,
                            null,
                            null,
                            "TextField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Save head function",
                            false,
                            null,
                            "save_head_fun",
                            true,
                            null,
                            null,
                            "TextField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Save item function",
                            false,
                            null,
                            "save_item_fun",
                            true,
                            null,
                            null,
                            "TextField",
                            false,
                            null
                        ]
                    ]
                ],
                [
                    [
                        null,
                        null,
                        true,
                        null,
                        "DocType",
                        "['id']",
                        null,
                        null,
                        null,
                        "Type of document",
                        "Types of documents"
                    ],
                    [
                        [
                            false,
                            null,
                            true,
                            null,
                            "Parent",
                            true,
                            null,
                            "parent",
                            false,
                            null,
                            "DocReg",
                            "PtigHiddenForeignKey",
                            false,
                            null
                        ],
                        [
                            false,
                            null,
                            false,
                            null,
                            "Name",
                            true,
                            null,
                            "name",
                            false,
                            "max_length=16",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            false,
                            null,
                            false,
                            null,
                            "Description",
                            true,
                            null,
                            "description",
                            false,
                            "max_length=64",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Correction",
                            true,
                            null,
                            "correction",
                            true,
                            null,
                            null,
                            "NullBooleanField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Head form",
                            false,
                            null,
                            "head_form",
                            true,
                            null,
                            null,
                            "TextField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Item form",
                            false,
                            null,
                            "item_form",
                            true,
                            null,
                            null,
                            "TextField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Save head function",
                            false,
                            null,
                            "save_head_fun",
                            true,
                            null,
                            null,
                            "TextField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Save item function",
                            false,
                            null,
                            "save_item_fun",
                            true,
                            null,
                            null,
                            "TextField",
                            false,
                            null
                        ],
                        [
                            true,
                            "doctype_status",
                            false,
                            null,
                            "Status of document type",
                            true,
                            null,
                            "doctype_status",
                            true,
                            "max_length=1",
                            null,
                            "CharField",
                            false,
                            null
                        ]
                    ]
                ],
                [
                    [
                        "JSONModel",
                        null,
                        true,
                        null,
                        "DocHead",
                        "['id']",
                        null,
                        "@classmethod\ndef get_documents_for_reg(cls, value):\n    reg = DocReg.objects.filter(name = value.replace('_', '/'))\n    ret = []\n    if len(reg) == 1:\n        docs = DocType.objects.filter(parent=reg[0])\n        for doc in docs:\n            ret.append(doc)\n    return ret\n\n@classmethod\ndef filter(cls, value):\n    if value:\n        rej = value.replace('_','/')\n        return cls.objects.filter(doc_type_parent__parent__name = rej)\n    else:\n        return cls.objects.all()\n\n\ndef init_new(self, request, view, add_param=None):\n    if add_param:\n        docs = DocType.objects.filter(name = add_param)\n        if len(docs)==1: \n            self.doc_type_parent = docs[0]\n            self.date = datetime.datetime.now()\n            self.status = 'draft'\n            self.operator = request.user.username\n            \n    return None\n    \n\n@staticmethod\ndef template_for_list(view, model, context, doc_type):\n    if doc_type in ('html', 'json') and 'filter' in context:\n        tmp = DocReg.objects.filter(name=context['filter'].replace('_','/'))\n        if len(tmp)==1:\n            names = []\n            x = tmp[0]\n            while x:\n                names.append((x.app+\"/\"+x.name.replace('/','_')+\"_dochead_list.html\").lower())\n                x = x.get_parent()\n            \n            if 'target' in view.kwargs and 'calendar' in view.kwargs['target']:\n                names2 = []\n                for name in names:\n                    names2.append(name.replace(\".html\", \"_\"+view.kwargs['target']+\".html\"))\n                names = names2\n            template = select_template(names)\n            names.append(view.template_name)\n            if template:\n                return template\n            \n    return None\n    \n    \ndef template_for_object(self, view, context, doc_type):\n    if doc_type in ('html', 'json'):\n        try:\n            if 'add_param' in view.kwargs:\n                objects = DocType.objects.filter(name=view.kwargs['add_param'])\n                doc_type = objects[0]\n                reg = doc_type.parent\n                obj = None\n            else: \n                obj = DocHead.objects.get(pk=self.id)            \n                reg = obj.doc_type_parent.parent\n            names = []\n            names.append('%s/%s'% (self._meta.app_label, self._meta.model.__name__))\n            if obj:\n                names.append((reg.app+\"/\"+obj.doc_type_parent.name+\"_dochead_edit.html\").lower())        \n            else:\n                names.append((reg.app+\"/\"+doc_type.name+\"_dochead_edit.html\").lower())        \n            names.append((reg.app+\"/\"+reg.name.replace('/', '_') + \"_dochead_edit.html\").lower())\n            x = reg.get_parent()\n            while x:\n                names.append((x.app+\"/\"+x.name.replace('/', '_') + \"_dochead_edit.html\").lower())\n                x = x.get_parent()\n            names.append(context['view'].template_name)\n            template = select_template(names)\n            if template:\n                return template\n        except:\n            return None\n    return None\n    \n\ndef get_form_source(self):\n    if self.id:\n        obj = DocHead.objects.get(pk=self.id)            \n        if obj.doc_type_parent.head_form:\n           return obj.doc_type_parent.head_form \n           \n        x = obj.doc_type_parent.parent\n        while x:\n            if x.head_form:\n                return x.head_form\n            x = x.get_parent()\n    \n    return None\n\n\ndef save(self, *args, **kwargs):        \n    if self.id:\n        obj = DocHead.objects.get(pk=self.id)\n        save_fun_src = None\n        if obj.doc_type_parent.save_head_fun:\n            save_fun_src = obj.doc_type_parent.save_head_fun\n        else:\n            x = obj.doc_type_parent.parent\n            while x:\n                if x.save_head_fun:\n                    save_fun_src = x.save_head_fun\n                    break\n                x = x.get_parent()\n        if save_fun_src:\n            content_to_function(save_fun_src, \"object\")(self)\n\n    if not self.pk:\n        self.date_c = datetime.datetime.now()\n        \n        y = \"%04d\" % datetime.date.today().year\n        t = self.doc_type_parent.name\n        objects = DocHead.objects.filter(doc_type_parent=self.doc_type_parent, number__startswith=t+\"/\"+y).order_by('-number')\n        if len(objects)>0:\n            tmp = objects[0].number\n            \n            try:\n                max_num = int(tmp.split('/')[-1])+1\n            except:\n                max_num = 1\n        else:\n            max_num = 1\n        self.number = \"%s/%s/%06d\" % (t, y, max_num)\n    \n    super().save(*args, **kwargs)\n    \ndef get_visible_statuses(self, request=None):\n    if self.id:\n        obj = DocHead.objects.get(pk=self.id)\n        reg = obj.doc_type_parent.parent\n        while reg:\n            statuses = reg.docregstatus_set.all().order_by('order')\n            if len(statuses)>0:\n                ret = []\n                for status in statuses:\n                    if status.can_set_proc:\n                        data = content_to_function(status.can_set_proc, \"request, doc_head\")(request, self)\n                        if data:\n                            ret.append(status)\n                    else:\n                        ret.append(status)\n\n                return ret\n                \n            reg = reg.get_parent()\n            \n    return []\n\ndef status_can_be_undo(self, request=None):\n    if self.id:\n        obj = DocHead.objects.get(pk=self.id)\n        reg = obj.doc_type_parent.parent\n        statuses = reg.docregstatus_set.filter(name=obj.status)\n        if len(statuses)==1:\n            status = statuses[0]\n            if status.can_undo_proc:\n                data = content_to_function(status.can_undo_proc, \"request, doc_head\")(request, self)\n                if data:\n                    return True\n                else:\n                    return False\n        if obj.status == \"\" or obj.status == \"edit\":\n            return False\n        else:\n            return True\n    \n    return False        \n\n\ndef get_reg_status(self):\n    reg = self.doc_type_parent.parent\n    statuses = reg.docregstatus_set.filter(name=self.status)\n    if len(statuses)>0:\n        return statuses[0]\n    return None\n\n\ndef get_undo_target(self):\n    print(\"F1\")\n    reg = self.doc_type_parent.parent\n    print(\"F2\")\n    statuses = reg.docregstatus_set.filter(name=self.status)\n    if len(statuses)>0:\n        status = statuses[0]\n        print(\"F3\")\n        return status.get_undo_target()\n    print(\"F4\")\n    return \"refresh_frame\"\n    \n    \ndef get_derived_object(self, param=None):\n    t = None\n    if type(self)==DocHead:\n        if param and 'view' in param and 'add_param' in param['view'].kwargs:\n            t = param['view'].kwargs['add_param']\n            if t=='-':\n                return self\n            object_list = DocType.objects.filter(name=t)\n            if len(object_list):\n                t = object_list[0].parent.name\n            return ContentType.objects.get(model=t.lower()+\"dochead\").model_class()()\n\n        else:\n            t = self.doc_type_parent.parent.name\n            name = t.lower()+\"dochead\"\n            if hasattr(self, name):\n                return getattr(self, name)\n    return self\n\n@classmethod\ndef table_action(cls, list_view, request, data):\n    return standard_table_action(cls, list_view, request, data, ['copy', 'paste', 'delete'])\n    ",
                        null,
                        "Document header",
                        "Document headers"
                    ],
                    [
                        [
                            false,
                            null,
                            true,
                            null,
                            "Parents",
                            false,
                            null,
                            "parents",
                            false,
                            null,
                            "'self'",
                            "ManyToManyField",
                            false,
                            null
                        ],
                        [
                            false,
                            null,
                            true,
                            null,
                            "Document type parent",
                            false,
                            null,
                            "doc_type_parent",
                            false,
                            null,
                            "DocType",
                            "PtigHiddenForeignKey",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            true,
                            null,
                            "Parent element",
                            false,
                            null,
                            "parent_element",
                            true,
                            null,
                            "Element",
                            "PtigHiddenForeignKey",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            true,
                            null,
                            "Document number",
                            true,
                            null,
                            "number",
                            true,
                            "max_length=32",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            false,
                            null,
                            false,
                            "datetime.datetime.now",
                            "Creation date",
                            false,
                            null,
                            "date_c",
                            false,
                            null,
                            null,
                            "DateTimeField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            true,
                            "datetime.date.today",
                            "Date",
                            true,
                            null,
                            "date",
                            true,
                            null,
                            null,
                            "DateField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Description",
                            true,
                            null,
                            "description",
                            true,
                            "max_length=128",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Comments",
                            true,
                            null,
                            "comments",
                            true,
                            "max_length=256",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            true,
                            null,
                            "Status",
                            false,
                            null,
                            "status",
                            true,
                            "max_length=16",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Operator",
                            false,
                            null,
                            "operator",
                            true,
                            "max_length=32",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Parameter 1",
                            true,
                            null,
                            "param1",
                            true,
                            "max_length=16",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Parameter 2",
                            true,
                            null,
                            "param2",
                            true,
                            "max_length=16",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Parameter 3",
                            true,
                            null,
                            "param3",
                            true,
                            "max_length=16",
                            null,
                            "CharField",
                            false,
                            null
                        ]
                    ]
                ],
                [
                    [
                        "JSONModel",
                        null,
                        true,
                        null,
                        "DocItem",
                        "['id']",
                        null,
                        "@staticmethod\ndef template_for_list(view, model, context, doc_type):\n    if doc_type in ('html', 'json'):\n        if 'parent_pk' in context['view'].kwargs:\n            parent_pk = int(context['view'].kwargs['parent_pk'])\n            dochead = DocHead.objects.get(pk=parent_pk)\n            reg = dochead.doc_type_parent.parent            \n            names = []\n            names.append((reg.app+\"/\"+dochead.doc_type_parent.name+\"_docitem_list.html\").lower())\n            names.append((reg.app+\"/\"+reg.name.replace('/', '_') + \"_docitem_list.html\").lower())\n            \n            x = reg.get_parent()\n            while x:\n                names.append(x.app+\"/\"+x.name.replace('/', '_') + \"_docitem_list.html\")\n                x = x.get_parent()\n            names.append(view.template_name)\n            print(names)\n            template = select_template(names)\n            if template:\n                return template\n            \n    return None\n\n\ndef template_for_object(self, view, context, doc_type):\n    if doc_type in ('html', 'json'):\n        try:\n            obj = DocItem.objects.get(pk=self.id)\n            dochead = obj.parent\n        except:\n            dochead = context['view'].object.parent\n\n        reg = dochead.doc_type_parent.parent            \n        names = []\n        names.append((reg.app+\"/\"+dochead.doc_type_parent.parent.name+\"_docitem_edit.html\").lower())\n        names.append((reg.app+\"/\"+reg.name.replace('/', '_') + \"_docitem_edit.html\").lower())\n        x = reg.get_parent()\n        while x:\n            names.append(x.app+\"/\"+x.name.replace('/', '_') + \"_docitem_edit.html\")\n            x = x.get_parent()\n            \n        names.append(context['view'].template_name.replace(reg.app+'/', 'schelements/'))\n        print(names)\n        template = select_template(names)\n        if template:\n            return template                            \n    return None\n    \n\ndef get_form_source(self):\n    obj = self\n    if obj.parent.doc_type_parent.item_form:\n       return obj.parent.doc_type_parent.item_form \n       \n    x = obj.parent.doc_type_parent.parent\n    while x:\n        if x.item_form:\n            return x.item_form\n        x = x.get_parent()\n    \n    return None\n\ndef init_new(self, request, view, param=None):\n    if 'parent_pk' in view.kwargs:\n        parent_pk = view.kwargs['parent_pk']\n        parent = DocHead.objects.get(pk=parent_pk)\n        items = DocItem.objects.filter(parent=parent).order_by('-order')\n        if len(items)>0:\n            max_nr = int(items[0].order)+1\n        else:\n            max_nr = 1\n        \n        if request.POST:\n            return { 'parent': str(parent.id), 'order': max_nr, 'date_c': datetime.datetime.now(), 'level': 0 }\n        \n    return None\n\n\ndef save(self, *args, **kwargs):\n    if self.id:\n        obj = DocItem.objects.get(pk=self.id).parent\n        save_fun_src = None\n        if obj.doc_type_parent.save_head_fun:\n            save_fun_src = obj.doc_type_parent.save_item_fun\n        else:\n            x = obj.doc_type_parent.parent\n            while x:\n                if x.save_head_fun:\n                    save_fun_src = x.save_item_fun\n                    break\n                x = x.get_parent()\n        if save_fun_src:\n            exec(save_fun_src)\n        \n    super().save(*args, **kwargs)\n    \n   \ndef get_derived_object(self, param=None):\n    t = None\n    if type(self)==DocItem:\n        if param and 'view' in param and 'add_param' in param['view'].kwargs:\n            t = param['view'].kwargs['add_param']\n            if t=='-':\n                return self\n            return ContentType.objects.get(model=t.lower()+\"docitem\").model_class()()\n        else:\n            t = self.parent.doc_type_parent.parent.name\n            name = t.lower()+\"docitem\"\n            if hasattr(self, name):\n                return getattr(self, name)\n            else:\n                obj2 = copy.copy(self)\n                obj2.__class__ =  ContentType.objects.get(model=name).model_class()\n                return obj2\n    return self\n\ndef get_period(self):\n    return \"%04d-%02d\" % (self.parent.date.year, self.parent.date.month)\n\ndef new_account_operation(self, target, account_name, description, sign, amount, element, classifier1value=None, classifier2value=None, classifier3value=None, subcode=None, payment=None, save=True):\n    if subcode == '*':\n        account = Account.objects.get(name=account_name)\n        object_list = AccountState.get_account_state(target, account, element, classifier1valu, classifier2value, classifier3value, \"*\", None)\n        subcode_sum = object_list.values('subcode').annotate(csum=Sum('credit'), dsum=sum('debit')).order_by('subcode')\n        a = amount\n        ret = []\n        for s in subcode_sum:\n            subcode2 = s['subcode']\n            c = s['credit']\n            d = s['debit']\n            b = d - s\n            if b>a:\n                a2 = a\n                a = 0\n            else:\n                a2 = b\n                a -= b\n            x = self.new_account_operation(target, account_name, description, sign, a2, element, classifier1value, classifier2value, classifier3value, subcode2, payment, save)\n            ret.append(x)\n            if a == 0:\n                return ret\n    else:\n        account = Account.objects.get(name=account_name)\n        period = self.get_period()\n        object_list = AccountState.objects.filter(\n            parent=account, \n            element=element, \n            target=target, \n            classifier1value = classifier1value, \n            classifier2value = classifier2value, \n            classifier3value = classifier3value,\n            period = period\n        )\n        if object_list.count() > 0:\n            object = object_list[0]\n        else:\n            object = AccountState()\n            object.parent = account\n            object.element = element\n            object.target = target\n            object.classifier1value = classifier1value\n            object.classifier2value = classifier2value\n            object.classifier3value = classifier3value\n            object.period = period\n            object.debit = 0\n            object.credit = 0\n            object.agregate = False\n            object.save()\n        account_operation = AccountOperation()\n        account_operation.parent = self\n        account_operation.description = description\n        account_operation.payment = payment\n        account_operation.account_state = object\n        account_operation.sign = sign\n        account_operation.amount = amount\n        account_operation.enabled = False\n        if save:\n            account_operation.save()\n        return [account_operation,]\n\n",
                        null,
                        "Document item",
                        "Document items"
                    ],
                    [
                        [
                            false,
                            null,
                            true,
                            null,
                            "Parent",
                            false,
                            null,
                            "parent",
                            false,
                            null,
                            "DocHead",
                            "PtigHiddenForeignKey",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            true,
                            null,
                            "Parent item",
                            false,
                            null,
                            "parent_item",
                            true,
                            null,
                            "'self'",
                            "PtigHiddenForeignKey",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            true,
                            null,
                            "Owner",
                            true,
                            null,
                            "owner",
                            true,
                            "related_name=\"owners\"",
                            "Element",
                            "PtigForeignKey",
                            false,
                            null
                        ],
                        [
                            false,
                            null,
                            false,
                            "1",
                            "Order",
                            false,
                            null,
                            "order",
                            false,
                            null,
                            null,
                            "IntegerField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            true,
                            null,
                            "Item",
                            true,
                            null,
                            "item",
                            true,
                            null,
                            "Element",
                            "PtigForeignKey",
                            false,
                            null
                        ],
                        [
                            true,
                            "",
                            false,
                            "",
                            "Amount",
                            true,
                            "",
                            "amount",
                            true,
                            "max_digits=16, decimal_places=2",
                            "",
                            "DecimalField",
                            false,
                            ""
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Amount",
                            true,
                            null,
                            "alt_amount",
                            true,
                            "max_digits=16, decimal_places=2",
                            null,
                            "DecimalField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Alternate unit",
                            true,
                            null,
                            "alt_unit",
                            true,
                            "max_length=32",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            "",
                            false,
                            "",
                            "Description",
                            true,
                            "",
                            "description",
                            true,
                            "max_length=255",
                            "",
                            "CharField",
                            false,
                            ""
                        ],
                        [
                            false,
                            null,
                            false,
                            "0",
                            "Level",
                            false,
                            null,
                            "level",
                            false,
                            null,
                            null,
                            "IntegerField",
                            false,
                            null
                        ],
                        [
                            false,
                            null,
                            true,
                            "True",
                            "Active item",
                            true,
                            null,
                            "active",
                            false,
                            null,
                            null,
                            "BooleanField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Parameter 1",
                            false,
                            null,
                            "param1",
                            true,
                            "max_length=16",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Parameter 2",
                            false,
                            null,
                            "param2",
                            true,
                            "max_length=16",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Parameter 3",
                            false,
                            null,
                            "param3",
                            true,
                            "max_length=16",
                            null,
                            "CharField",
                            false,
                            null
                        ]
                    ]
                ],
                [
                    [
                        null,
                        null,
                        true,
                        null,
                        "DocRegStatus",
                        "['id']",
                        null,
                        "def get_editor_header(self, field_name):\n    if field_name == \"can_set_proc\":\n        return \"def can_set_proc(request, doc_head):\"\n    elif field_name == \"can_undo_proc\":\n        return \"def can_undo_proc(request, doc_head):\"\n    elif field_name == \"accept_proc\":\n        return \"def accept_proc(request, doc_head, reg_status, doc_type, doc_reg, form):\"\n    elif field_name == \"undo_proc\":\n        return \"def undo_proc(request, doc_head, reg_status, doc_type, doc_reg, form):\"\n        \ndef get_accept_target(self):\n    if self.accept_form:\n        return \"popup_edit\"\n    else:\n        return \"refresh_frame\"\n\ndef get_undo_target(self):\n    if self.undo_form:\n        return \"popup_edit\"\n    else:\n        return \"refresh_frame\"\n",
                        null,
                        "Document status",
                        "Document status"
                    ],
                    [
                        [
                            false,
                            null,
                            true,
                            null,
                            "Parent",
                            true,
                            null,
                            "parent",
                            false,
                            null,
                            "DocReg",
                            "PtigHiddenForeignKey",
                            false,
                            null
                        ],
                        [
                            false,
                            null,
                            false,
                            null,
                            "Order",
                            true,
                            null,
                            "order",
                            false,
                            null,
                            null,
                            "IntegerField",
                            false,
                            null
                        ],
                        [
                            false,
                            null,
                            false,
                            null,
                            "Name",
                            true,
                            null,
                            "name",
                            false,
                            "max_length=16",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Description",
                            true,
                            null,
                            "description",
                            true,
                            "max_length=64",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Icon",
                            true,
                            null,
                            "icon",
                            true,
                            "max_length=64",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Accept status procedure",
                            false,
                            null,
                            "accept_proc",
                            true,
                            null,
                            null,
                            "TextField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Undo status procedure",
                            false,
                            null,
                            "undo_proc",
                            true,
                            null,
                            null,
                            "TextField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Check if status can be set",
                            false,
                            null,
                            "can_set_proc",
                            true,
                            null,
                            null,
                            "TextField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Check if status can be removed",
                            false,
                            null,
                            "can_undo_proc",
                            true,
                            null,
                            null,
                            "TextField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Form for accept",
                            false,
                            null,
                            "accept_form",
                            true,
                            null,
                            null,
                            "TextField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Form for undo",
                            false,
                            null,
                            "undo_form",
                            true,
                            null,
                            null,
                            "TextField",
                            false,
                            null
                        ]
                    ]
                ],
                [
                    [
                        "JSONModel",
                        null,
                        true,
                        null,
                        "DocHeadStatus",
                        "['id']",
                        null,
                        null,
                        null,
                        "Document head status",
                        "Documents head status"
                    ],
                    [
                        [
                            false,
                            null,
                            true,
                            null,
                            "Parent",
                            true,
                            null,
                            "parent",
                            false,
                            null,
                            "DocHead",
                            "PtigHiddenForeignKey",
                            false,
                            null
                        ],
                        [
                            false,
                            null,
                            true,
                            null,
                            "Date",
                            true,
                            null,
                            "date",
                            false,
                            null,
                            null,
                            "DateTimeField",
                            false,
                            null
                        ],
                        [
                            false,
                            null,
                            false,
                            null,
                            "Name",
                            true,
                            null,
                            "name",
                            false,
                            "max_length=16",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Description",
                            false,
                            null,
                            "description",
                            true,
                            "max_length=64",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Operator",
                            true,
                            null,
                            "operator",
                            true,
                            "max_length=32",
                            null,
                            "CharField",
                            false,
                            null
                        ]
                    ]
                ],
                [
                    [
                        null,
                        null,
                        true,
                        null,
                        "Account",
                        "['id']",
                        null,
                        "def save(self, *args, **kwargs):\n    if self.parent:\n        self.parent.type1='S'\n        self.parent.save()\n        self.type2 = self.parent.type2\n    self.type1 = 'A'\n    super().save(*args, **kwargs)\n\ndef __str__(self):\n    x = self\n    ret = self.name\n    while(x.parent):\n        x = x.parent\n        ret = x.name + \"/\" + ret\n    ret+=\": \"\n    ret+=self.description\n    return ret\n        \n",
                        null,
                        "Account",
                        "Account"
                    ],
                    [
                        [
                            true,
                            null,
                            true,
                            null,
                            "Parent",
                            true,
                            null,
                            "parent",
                            true,
                            null,
                            "'self'",
                            "PtigTreeForeignKey",
                            false,
                            null
                        ],
                        [
                            true,
                            "account_type_choice_1",
                            false,
                            null,
                            "Type 1",
                            false,
                            null,
                            "type1",
                            true,
                            "max_length=1",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            "account_type_choice_2",
                            true,
                            null,
                            "Type 2",
                            true,
                            null,
                            "type2",
                            true,
                            "max_length=1",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            false,
                            null,
                            true,
                            null,
                            "Name",
                            true,
                            null,
                            "name",
                            false,
                            "max_length=32",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            false,
                            null,
                            false,
                            null,
                            "Description",
                            true,
                            null,
                            "description",
                            false,
                            "max_length=256",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Correctness rule",
                            true,
                            null,
                            "correctness_rule",
                            true,
                            "max_length=256",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Root classifier 1",
                            true,
                            null,
                            "root_classifier1",
                            true,
                            "related_name='baseaccount_rc1_set'",
                            "Element",
                            "PtigForeignKey",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Root classifier 2",
                            true,
                            null,
                            "root_classifier2",
                            true,
                            "related_name='baseaccount_rc2_set'",
                            "Element",
                            "PtigForeignKey",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Root classifier 3",
                            true,
                            null,
                            "root_classifier3",
                            true,
                            "related_name='baseaccount_rc3_set'",
                            "Element",
                            "PtigForeignKey",
                            false,
                            null
                        ],
                        [
                            false,
                            null,
                            true,
                            "True",
                            "Enabled",
                            true,
                            null,
                            "enabled",
                            false,
                            null,
                            null,
                            "NullBooleanField",
                            false,
                            null
                        ]
                    ]
                ],
                [
                    [
                        null,
                        null,
                        true,
                        null,
                        "AccountState",
                        "['id']",
                        null,
                        "def __str__(self):\n    s = self.target.name + \"/\" + self.parent.name\n    if self.classifier1value:\n        s+= \"/\"+classifier1value\n    if self.classifier2value:\n        s+= \"/\"+classifier2value\n    if self.classifier3value:\n        s+= \"/\"+classifier3value\n    if self.subcode:\n        s+=self.subcode\n    s+=\"(\"+self.element.name+\")\"\n    return s\n\n\n@staticmethod    \ndef get_account_state(target=None, account=None, element=None, classifier1value=None, classifier2value=None, classifier3value=None, subcode=None, period=None, q=None):\n    object_list = AccountState.objects.all()\n    if target!=None:\n        if isinstance(target, int):\n            object_list = object_list.filter(target__id=target)\n        elif isinstance(target, Element):\n            object_list = object_list.filter(target=target)\n        elif isinstance(target, str):\n            object_list = object_list.filter(target__code = target)\n        else:\n            return None\n    else:\n        object_list = object_list.filter(target__isnull = True)\n\n    if account!=None:\n        if isinstance(target, int):\n            object_list = object_list.filter(parent__id=account)\n        elif isinstance(target, Account):\n            object_list = object_list.filter(parent=account)\n        elif isinstance(target, str):\n            object_list = object_list.filter(parent__name = account)\n        else:\n            return None\n    \n    if elementt!=None:\n        if isinstance(element, int):\n            object_list = object_list.filter(element__id=element)\n        elif isinstance(element, Element):\n            object_list = object_list.filter(element=element)\n        elif isinstance(target, str):\n            object_list = object_list.filter(element__code = element)\n        else:\n            return None\n    else:\n        object_list = object_list.filter(element__isnull = True)\n\n    if classifier1value!=None:\n        if isinstance(classifier1value, int):\n            object_list = object_list.filter(classifier1value__id=classifier1value)\n        elif isinstance(classifier, Element):\n            object_list = object_list.filter(classifier1value=classifier1value)\n        elif isinstance(classifier, str):\n            object_list = object_list.filter(classifier1value__code = classifier1value)\n        else:\n            return None\n    else:\n        object_list = object_list.filter(classifier1value__isnull = True)\n\n    if classifier2value!=None:\n        if isinstance(classifier2value, int):\n            object_list = object_list.filter(classifier2value__id=classifier2value)\n        elif isinstance(classifier, Element):\n            object_list = object_list.filter(classifier2value=classifier2value)\n        elif isinstance(classifier, str):\n            object_list = object_list.filter(classifier2value__code = classifier2value)\n        else:\n            return None\n    else:\n        object_list = object_list.filter(classifier2value__isnull = True)\n\n    if classifier3value!=None:\n        if isinstance(classifier3value, int):\n            object_list = object_list.filter(classifier3value__id=classifier3value)\n        elif isinstance(classifier, Element):\n            object_list = object_list.filter(classifier3value=classifier3value)\n        elif isinstance(classifier, str):\n            object_list = object_list.filter(classifier3value__code = classifier3value)\n        else:\n            return None\n    else:\n        object_list = object_list.filter(classifier3value__isnull = True)\n\n    if subcode:\n        object_list = object_list.filter(subcode=subcode)\n    else:\n        object_list = object_list.filter(Q(subcode__isnull = True) | Q(subcode__exact = \"\"))\n\n    if period:\n        object_list = object_list.filter(period=period)\n    else:\n        object_list = object_list.filter(Q(period__isnull = True) | Q(period__exact = \"\"))\n\n    if q:\n        object_list = object_list.filter(q)\n\n    return object_list\n\n    \n@staticmethod    \ndef get_balance(target=None, account=None, element=None, classifier1value=None, classifier2value=None, classifier3value=None, subcode=None, period=None, q=None):\n    ret = AccountState.get_account_state(target, account, element, classifier1value, classifier2value, classifier3value, subcode, period, q)\n    result = ret.aggregate(Sum('credit'), Sum('debit'))\n    result['balance__sum'] = result['debit__sum'] - result['credit__sum']\n    return result\n\n\ndef save(self, *args, **kwargs):\n    if self.parent.correctness_rule:\n        x = self.parent.correctness_rule.split(\":\")\n        if len(x)>1:\n            expression = x[0]\n            error_txt = x[1]\n        else:\n            expression = x[0]\n            error_txt = \"The validation rule is not ensured: \" + self.parent.correctness_rule\n            \n        s = expression.replace(\"DEBIT\", str(self.debit)).replace(\"CREDIT\", str(self.credit))\n        if self.period:\n            s = s.replace(\"PERIOD\", self.period)\n        ret = eval(s)\n        if not ret:\n            raise ValueError(error_txt)\n    if self.debit == self.credit:\n        self.zero_balance = True\n    else:\n        self.zero_balance = False\n    super().save(*args, **kwargs)\n",
                        null,
                        "State of account",
                        "States of account"
                    ],
                    [
                        [
                            false,
                            null,
                            true,
                            null,
                            "Parent",
                            true,
                            null,
                            "parent",
                            false,
                            null,
                            "Account",
                            "ForeignKey",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            true,
                            null,
                            "Target",
                            true,
                            null,
                            "target",
                            true,
                            "related_name='state_targets'",
                            "Element",
                            "ForeignKey",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            true,
                            null,
                            "Classifier 1 value",
                            true,
                            null,
                            "classifier1value",
                            true,
                            "related_name='account_c1_set'",
                            "Element",
                            "ForeignKey",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            true,
                            null,
                            "Classifier 2 value",
                            true,
                            null,
                            "classifier2value",
                            true,
                            "related_name='account_c2_set'",
                            "Element",
                            "ForeignKey",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            true,
                            null,
                            "Classifier 3 value",
                            true,
                            null,
                            "classifier3value",
                            true,
                            "related_name='account_c3_set'",
                            "Element",
                            "ForeignKey",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            true,
                            null,
                            "Period",
                            true,
                            null,
                            "period",
                            true,
                            "max_length=10",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            true,
                            null,
                            "Subcode",
                            true,
                            null,
                            "subcode",
                            true,
                            "max_length=16",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            false,
                            null,
                            true,
                            null,
                            "Element",
                            true,
                            null,
                            "element",
                            false,
                            null,
                            "Element",
                            "ForeignKey",
                            false,
                            null
                        ],
                        [
                            false,
                            null,
                            false,
                            null,
                            "Debit",
                            true,
                            null,
                            "debit",
                            false,
                            "max_digits=16, decimal_places=2",
                            null,
                            "DecimalField",
                            false,
                            null
                        ],
                        [
                            false,
                            null,
                            false,
                            null,
                            "Credit",
                            true,
                            null,
                            "credit",
                            false,
                            "max_digits=16, decimal_places=2",
                            null,
                            "DecimalField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            true,
                            "True",
                            null,
                            true,
                            null,
                            "zero_balance",
                            true,
                            null,
                            null,
                            "BooleanField",
                            false,
                            null
                        ],
                        [
                            false,
                            null,
                            false,
                            "False",
                            "Aggregate",
                            true,
                            null,
                            "aggregate",
                            false,
                            null,
                            null,
                            "NullBooleanField",
                            false,
                            null
                        ],
                        [
                            false,
                            null,
                            false,
                            "datetime.datetime.now",
                            "Creation date",
                            true,
                            null,
                            "date_c",
                            false,
                            null,
                            null,
                            "DateTimeField",
                            false,
                            null
                        ]
                    ]
                ],
                [
                    [
                        null,
                        null,
                        true,
                        null,
                        "AccountOperation",
                        "['id']",
                        null,
                        "def get_or_create_account_state(self, target, account, element, classifier1, classifier2, classifier3, subcode, period):\n    objs = AccountState.objects.filter(parent=account, element=element, subcode=subcode, period=period)\n    if target:\n        objs = objs.filter(target=target)\n    else:\n        objs = objs.filter(target__isnull=True)\n\n    if classifier1:\n        objs = objs.filter(classifier1value=classifier1)\n    else:\n        objs = objs.filter(classifier1value__isnull=True)\n\n    if classifier2:\n        objs = objs.filter(classifier2value=classifier2)\n    else:\n        objs = objs.filter(classifier2value__isnull=True)\n\n    if classifier3:\n        objs = objs.filter(classifier3value=classifier3)\n    else:\n        objs = objs.filter(classifier3value__isnull=True)\n    \n    \n    if subcode:\n        objs = objs.filter(subcode=subcode)\n    else:\n        objs = objs.filter(Q(subcode__isnull = True) | Q(subcode__exact = \"\"))\n\n    if period:\n        objs = objs.filter(period=period)\n    else:\n        objs = objs.filter(Q(period__isnull = True) | Q(period__exact = \"\"))\n    \n    if objs.count() > 0:\n        return objs[0]\n    else:\n        obj = AccountState()\n        obj.parent = account\n        obj.target = target\n        obj.classifier1value = classifier1\n        obj.classifier2value = classifier2\n        obj.classifier3value = classifier3\n        obj.period = period\n        obj.subcode = subcode\n        obj.element = element\n        obj.aggregate=True\n        obj.debit = 0\n        obj.credit = 0\n        obj.save()\n        return obj\n\n\ndef _update_account_state(self, account, state, debit, credit, with_subcode):\n    targets = (state.target, None) if state.target else (None, )\n    classifier1values = ( state.classifier1value, None) if state.classifier1value else (None,)\n    classifier2values = ( state.classifier2value, None) if state.classifier2value else (None,)\n    classifier3values = ( state.classifier3value, None) if state.classifier3value else (None,)\n    periods = (state.period, None) if state.period else (None, )\n    subcodes = (state.subcode, None) if state.subcode and with_subcode else (None, )\n        \n    for target in targets:\n        for classifier1value in classifier1values:\n            for classifier2value in classifier2values:\n                for classifier3value in classifier3values:\n                    for period in periods:\n                        for subcode in subcodes:\n                            state = self.get_or_create_account_state(target, account, state.element, classifier1value, classifier2value, classifier3value, subcode, period)\n                            state.debit += debit\n                            state.credit += credit\n                            state.save()\n\n\ndef update_accounts_state(self, debit, credit):\n    state = self.account_state\n    account = state.parent\n    self._update_account_state(account, state, debit, credit, True)\n    account = account.parent\n    while account:\n        self._update_account_state(account, state, debit, credit, False)\n        account = account.parent\n\ndef confirm(self):\n    ret = False\n    self.refresh_from_db()\n    if not self.enabled:\n        self.enabled = True\n        if self.sign > 0:\n            self.update_accounts_state(0, self.amount)\n        else:\n            self.update_accounts_state(self.amount, 0)\n        self.save()\n        ret = True\n    return ret\n\ndef atomic_confirm(self):\n    ret = False\n    with transaction.atomic():                \n        ret = self.confirm()\n    return ret\n\ndef cancel_confirmation(self):\n    ret = False\n    self.refresh_from_db()\n    if self.enabled:\n        self.enabled = False\n        if self.sign > 0:\n            self.update_accounts_state(0, -1 * self.amount)\n        else:\n            self.update_accounts_state(-1 * self.amount, 0)\n        self.save()\n        ret = True\n    return ret\n\ndef atomic_cancel_confirmation(self):\n    ret = False\n    with transaction.atomic():                \n        ret = self.cancel_confirmation()\n    return ret\n",
                        null,
                        "Account operation",
                        "Account operations"
                    ],
                    [
                        [
                            false,
                            null,
                            true,
                            null,
                            "Parent",
                            true,
                            null,
                            "parent",
                            false,
                            null,
                            "DocItem",
                            "PtigHiddenForeignKey",
                            false,
                            null
                        ],
                        [
                            false,
                            null,
                            false,
                            "datetime.date.today",
                            "Date",
                            true,
                            null,
                            "date",
                            false,
                            null,
                            null,
                            "DateField",
                            false,
                            null
                        ],
                        [
                            false,
                            null,
                            false,
                            "datetime.datetime.now",
                            "Creation date",
                            false,
                            null,
                            "date_c",
                            false,
                            null,
                            null,
                            "DateTimeField",
                            false,
                            null
                        ],
                        [
                            false,
                            "",
                            false,
                            "",
                            "Description",
                            true,
                            "",
                            "description",
                            false,
                            "max_length=255",
                            "",
                            "CharField",
                            false,
                            ""
                        ],
                        [
                            true,
                            null,
                            true,
                            null,
                            "Name of payment",
                            true,
                            null,
                            "payment",
                            true,
                            "max_length=64",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            true,
                            null,
                            "Account state",
                            true,
                            null,
                            "account_state",
                            true,
                            "related_name='accountoper_set', search_fields=['parent__name__icontains',]",
                            "AccountState",
                            "PtigForeignKey",
                            false,
                            null
                        ],
                        [
                            false,
                            null,
                            false,
                            null,
                            "Sign - debit or credit",
                            true,
                            null,
                            "sign",
                            false,
                            null,
                            null,
                            "IntegerField",
                            false,
                            null
                        ],
                        [
                            false,
                            "",
                            false,
                            "",
                            "Amount",
                            true,
                            "",
                            "amount",
                            false,
                            "max_digits=16, decimal_places=2",
                            "",
                            "DecimalField",
                            false,
                            ""
                        ],
                        [
                            true,
                            null,
                            true,
                            "False",
                            "Enabled",
                            false,
                            null,
                            "enabled",
                            true,
                            null,
                            null,
                            "NullBooleanField",
                            false,
                            null
                        ]
                    ]
                ],
                [
                    [
                        null,
                        null,
                        false,
                        "abstract = True",
                        "BaseObject",
                        "['id']",
                        null,
                        "def to_str(self, obj):\n    if self.to_str_fun:\n        tmp = \"def _to_str(self):\\n\" + \"\\n\".join([ \"    \" + pos for pos in self.to_str_fun.split('\\n')])\n        exec(tmp)\n        return locals()['_to_str'](obj)\n    else:\n        if obj.title:\n            return obj.title + \" [\"+self.name+\"]\"\n        else:\n            return str(obj) + \" [\"+self.name+\"]\"\n\ndef get_action_template(self):\n    if self.action_template:\n        return ihtml_to_html(None, self.action_template)\n    else:\n        return None",
                        null,
                        "Base object",
                        "Base objects"
                    ],
                    [
                        [
                            false,
                            null,
                            true,
                            null,
                            "Application",
                            true,
                            null,
                            "app",
                            false,
                            "max_length=16",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            false,
                            null,
                            true,
                            null,
                            "Name",
                            true,
                            null,
                            "name",
                            false,
                            "max_length=64",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            false,
                            null,
                            false,
                            null,
                            "Description",
                            true,
                            null,
                            "description",
                            false,
                            "max_length=64",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Declaration",
                            false,
                            null,
                            "declaration",
                            true,
                            null,
                            null,
                            "TextField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Template source",
                            false,
                            null,
                            "template_src",
                            true,
                            null,
                            null,
                            "TextField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Template",
                            false,
                            null,
                            "template",
                            true,
                            null,
                            null,
                            "TextField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Convert fields to html",
                            false,
                            null,
                            "to_html_rec",
                            true,
                            null,
                            null,
                            "TextField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Save function",
                            false,
                            null,
                            "save_fun",
                            true,
                            null,
                            null,
                            "TextField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Load function",
                            false,
                            null,
                            "load_fun",
                            true,
                            null,
                            null,
                            "TextField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Object to str function",
                            false,
                            null,
                            "to_str_fun",
                            true,
                            null,
                            null,
                            "TextField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Action template",
                            false,
                            null,
                            "action_template",
                            true,
                            null,
                            null,
                            "TextField",
                            false,
                            null
                        ]
                    ]
                ]
            ],
            [
                [
                    [
                        "account_type_choice_2",
                        "Account type 2"
                    ],
                    [
                        [
                            "B",
                            "Balance"
                        ],
                        [
                            "O",
                            "Off-balance"
                        ],
                        [
                            "N",
                            "Non-financial"
                        ],
                        [
                            "V",
                            "Inventory"
                        ],
                        [
                            "I",
                            "Inventory income"
                        ],
                        [
                            "D",
                            "Disposal"
                        ]
                    ]
                ],
                [
                    [
                        "account_type_choice_1",
                        "Account type 1"
                    ],
                    [
                        [
                            "S",
                            "Synthetic"
                        ],
                        [
                            "A",
                            "Analytical"
                        ]
                    ]
                ],
                [
                    [
                        "element_type_choice",
                        "Element type choice"
                    ],
                    [
                        [
                            "O-GRP",
                            "Owner/Group"
                        ],
                        [
                            "O-COM",
                            "Owner/Company"
                        ],
                        [
                            "O-DIV",
                            "Owner/Division"
                        ],
                        [
                            "O-DEP",
                            "Owner/Department"
                        ],
                        [
                            "O-POS",
                            "Owner/Position"
                        ],
                        [
                            "O-EMP",
                            "Owner/Employee"
                        ],
                        [
                            "O-LOC",
                            "Owner/Location"
                        ],
                        [
                            "O-PER",
                            "Owner/Person"
                        ],
                        [
                            "O-CUS",
                            "Owner/Customer"
                        ],
                        [
                            "O-SUP",
                            "Owner/Supplier"
                        ],
                        [
                            "O-DEV",
                            "Owner/Device"
                        ],
                        [
                            "O-OTH",
                            "Owner/Other"
                        ],
                        [
                            "O-ALI",
                            "Owner/Alias"
                        ],
                        [
                            "I-GRP",
                            "Item/Group"
                        ],
                        [
                            "I-SRV",
                            "Item/Service"
                        ],
                        [
                            "I-INT",
                            "Item/Intellectual value"
                        ],
                        [
                            "I-CUR",
                            "Item/Currency"
                        ],
                        [
                            "I-MAT",
                            "Item/Material"
                        ],
                        [
                            "I-RAW",
                            "Item/Raw material"
                        ],
                        [
                            "I-PRD",
                            "Item/Product"
                        ],
                        [
                            "I-IPR",
                            "Item/Intermediate product"
                        ],
                        [
                            "I-MER",
                            "Item/Merchandise"
                        ],
                        [
                            "I-DEV",
                            "Item/Device"
                        ],
                        [
                            "I-PMA",
                            "Item/Production machine"
                        ],
                        [
                            "I-VEH",
                            "Item/Vehicle"
                        ],
                        [
                            "I-OTH",
                            "Item/Other"
                        ],
                        [
                            "I-ALI",
                            "Item/Alias"
                        ],
                        [
                            "C-SYS",
                            "Config/System"
                        ],
                        [
                            "C-UNT",
                            "Config/Unit of measure"
                        ],
                        [
                            "C-DIC",
                            "Config/Dictionary"
                        ],
                        [
                            "C-OTH",
                            "Config/Other"
                        ],
                        [
                            "C-ALI",
                            "Config/Alias"
                        ]
                    ]
                ],
                [
                    [
                        "doctype_status",
                        "Status of document head"
                    ],
                    [
                        [
                            "0",
                            "Disabled"
                        ],
                        [
                            "1",
                            "Activ"
                        ]
                    ]
                ]
            ],
            [
                [
                    false,
                    null,
                    null,
                    "view_doc_heads",
                    "filter, target, vtype",
                    "U",
                    "table/DocHead/(?P<filter>[\\w=_,;-]*)/(?P<target>[\\w_-]*)/[_]?(?P<vtype>)docheadlist/",
                    "{}",
                    "regs = models.DocReg.objects.filter(name = filter.replace('_','/'))\nif regs.count()>0:\n    new_url = make_href(\"/schelements/table/DocHead/%s/%s/%slist/\" % (filter, target, vtype))\n    view, args, kwargs = resolve(new_url)\n    kwargs['request'] = request\n        \n    #def init(view_obj):\n    #    view_obj.template_name = \"abc\"    \n    #kwargs['init'] = init\n    \n    return view(*args, **kwargs)\nelse:\n    return HttpResponse(\"Error - %s document register doesn't exists\" % filter)\n",
                    "u"
                ],
                [
                    false,
                    null,
                    null,
                    "view_doc_items",
                    "parent_id",
                    "U",
                    "table/DocItem/(?P<parent_id>\\d+)/docitemlist/",
                    "{}",
                    "items = models.DocItem.objects.filter(parent=parent_id)\nif items.count()>0:\n    new_url = make_href(\"/schelements/table/DocHead/%s/%s/%slist\" % (filter, target, vtype))\n    view, args, kwargs = resolve(new_url)\n    kwargs['request'] = request\n    return view(*args, **kwargs)\nelse:\n    return HttpResponse(\"Error - %s document register doesn't exists\" % filter)\n",
                    "u"
                ],
                [
                    false,
                    null,
                    null,
                    "edit_head",
                    "id",
                    "U",
                    "table/DocHead/(?P<id>\\d+)/edit_head/",
                    "{}",
                    "return HttpResponse(\"Error\")\n",
                    "u"
                ],
                [
                    false,
                    null,
                    null,
                    "edit_item",
                    "id",
                    "U",
                    "table/DocItem/(?P<id>\\d+)/edit_item/",
                    "{}",
                    "return HttpResponse(\"Error\")\n",
                    "u"
                ],
                [
                    false,
                    null,
                    null,
                    "approve",
                    "pk",
                    "T",
                    "DocHead",
                    null,
                    "return change_status(request, pk, action='accept')    \n",
                    "r"
                ],
                [
                    false,
                    null,
                    null,
                    "discard",
                    "pk",
                    "T",
                    "DocHead",
                    null,
                    "return change_status(request, pk, action='undo')    \n",
                    "r"
                ],
                [
                    false,
                    null,
                    null,
                    "view_elements",
                    "code",
                    "U",
                    "view_elements/<slug:code>/",
                    "{}",
                    "#if settings.URL_ROOT_FOLDER and len(settings.URL_ROOT_FOLDER) > 0:\n#    url_base = '/' + settings.URL_ROOT_FOLDER + '/'\n#else:\n#    url_base = '/'\n\nid = 0\n\nif code:\n    objs = models.Element.objects.filter(code=code)\n    if len(objs)>0:\n        id = objs[0].pk\n        \nhref2 = make_href('/schelements/table/Element/%d/%d/form/treelist/?only_content' % (id,id), request.get_full_path())\nreturn HttpResponseRedirect(href2)\n",
                    "u"
                ],
                [
                    false,
                    null,
                    null,
                    "view_elements_as_tree",
                    "code,filter,template",
                    "U",
                    "view_elements_as_tree/<slug:code>/<slug:filter>/<slug:template>/",
                    "{}",
                    "#if settings.URL_ROOT_FOLDER and len(settings.URL_ROOT_FOLDER) > 0:\n#    url_base = '/' + settings.URL_ROOT_FOLDER + '/'\n#else:\n#    url_base = '/'\n\nid = 0\n\nif code and code != '-':\n    objs = models.Element.objects.filter(code=code)\n    if len(objs)>0:\n        id = objs[0].pk\n\nif template:\n    target = 'form__'+template\nelse:\n    target = 'form'\n        \nhref2 = make_href('/schelements/table/Element/%d/%s/%s/tree/?only_content' % (id,filter,target), request.get_full_path())\nreturn HttpResponseRedirect(href2)\n",
                    "u"
                ]
            ],
            [
                [
                    false,
                    null,
                    "Element",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n%extends \"forms/tree.html\"\n\n%load exfiltry\n%load exsyntax\n\n%% pythoncode\n    script language=python\n        def signal_from_child(self, child, signal):\n            if signal=='set_bitmap_list':\n                bitmaps = {\n                    \"name1\": \"image_path1\",\n                    \"name2\": \"image_path2\",\n                }\n                child.set_bitmaps(bitmaps)\n\n        def filter_url(self, target, href):\n            return href\n\n%% on_dialog_load {:}\n    function show_hide(typ):\n        if (typ=='S'):\n            $('label[for|=\"id_grand_parent\"]').show()\n            $('label[for|=\"id_description\"]').show()\n            $('select[name^=\"grand_parent\"]').show()\n            $('input[name=\"description\"]').show()\n            $('#id_key').show()\n        else:\n            $('label[for|=\"id_grand_parent\"]').hide()\n            $('label[for|=\"id_description\"]').hide()\n            $('select[name^=\"grand_parent\"]').hide()\n            $('input[name=\"description\"]').hide()\n            $('#id_key').hide()\n\n    $('#id_type').change(\n        function():\n            var typ\n            typ = $(this)[0].options[$(this)[0].selectedIndex].value\n            show_hide(typ)\n            return false\n\n    var id_type=$('#id_type')[0].options[$('#id_Typ')[0].selectedIndex].value\n    show_hide(id_type)\n    if(id_type!=\"\"):\n        $('label[for|=\"id_type\"]').hide()\n        $('select[name=\"type\"]').hide()\n\n\n%% all\n    %with table_type='datatable' title=\"Elements\":\n        {{ block.super }}\n\n%% list_content_actions_new_row\n    % if not readonly:\n        % if parent_pk > 0:\n            % with buttons=parent.get_new_buttons:\n                % if buttons:\n                    % for button in buttons:\n                        % new_row \"new \"|append_str:button.title url=base_path|append_str:button.app|append_str:\"/table/\"|append_str:button.table|append_str:'/%d/this/'|format:parent_pk|append_str:button.type|append_str:\"/add/\"\n                % else:\n                    % if parent_pk:\n                        % new_row \"_(New element)\" url=table_path|append_str:'%d/this/-/add/'|format:parent_pk\n        % else\n            % with buttons=model.get_root_new_buttons:\n                % if buttons:\n                    % for button in buttons:\n                        % new_row \"new \"|append_str:button.title url=base_path|append_str:button.app|append_str:\"/table/\"|append_str:button.table|append_str:'/0/this/'|append_str:button.type|append_str:\"/add/\"\n                % else:\n                    % new_row \"_(New element)\" url=table_path|append_str:'0/this/-/add/'\n\n%% list_row_header\n    th...Type \n    th...Code\n    th...Name\n\n%% list_row\n    td\n        img src={{ STATIC_URL }}icons/struct/elm_{{object.type}}.png\n    td...{{object.code}}\n    td...{{object.name}}\n\n\n%% row_edit\n    % if form_add\n        % form:\n            .parent:!, type\n    % else\n        % form:\n            .parent,type:!\n    % form: \n        \"code\", \"name\", \"key\"   \n    %if not object.type or object.type == 'S'\n        % form:\n            \"grand_parent1\", \"grand_parent2\", \"grand_parent3\"\n    % form:\n        \"description\"\n\n",
                    null,
                    null
                ],
                [
                    false,
                    null,
                    "OrgChartElem",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n%extends \"forms/tree.html\"\n\n%load exfiltry\n%load exsyntax\n\n%% pythoncode\n    script language=python\n        def signal_from_child(self, child, signal):\n            if signal=='set_bitmap_list':\n                bitmaps = {\n                    \"name1\": \"image_path1\",\n                    \"name2\": \"image_path2\",\n                }\n                child.set_bitmaps(bitmaps)\n\n        def filter_url(self, target, href):\n            return href\n\n%% on_dialog_load {:}\n    function show_hide(typ):\n        if (typ=='S'):\n            $('label[for|=\"id_grand_parent\"]').show()\n            $('label[for|=\"id_description\"]').show()\n            $('select[name^=\"grand_parent\"]').show()\n            $('input[name=\"description\"]').show()\n            $('#id_key').show()\n        else:\n            $('label[for|=\"id_grand_parent\"]').hide()\n            $('label[for|=\"id_description\"]').hide()\n            $('select[name^=\"grand_parent\"]').hide()\n            $('input[name=\"description\"]').hide()\n            $('#id_key').hide()\n\n    $('#id_type').change(\n        function():\n            var typ\n            typ = $(this)[0].options[$(this)[0].selectedIndex].value\n            show_hide(typ)\n            return false\n\n    var id_type=$('#id_type')[0].options[$('#id_Typ')[0].selectedIndex].value\n    show_hide(id_type)\n    if(id_type!=\"\"):\n        $('label[for|=\"id_type\"]').hide()\n        $('select[name=\"type\"]').hide()\n\n\n%% all\n    %with table_type='datatable' title=\"Organization chart\":\n        {{ block.super }}\n\n%% list_row_header\n    th...Type \n    th...Code\n    th...Name\n\n%% list_row\n    td\n        img src={{ STATIC_URL }}icons/struct/elm_{{object.type}}.png\n    td...{{object.code}}\n    td...{{object.name}}\n\n\n%% row_edit\n    % if form_add\n        % form:\n            .parent:!, type\n    % else\n        % form:\n            .parent,type:!\n    % form: \n        \"code\", \"name\", \"key\"   \n    %if not object.type or object.type == 'S'\n        % form:\n            \"grand_parent1\", \"grand_parent2\", \"grand_parent3\"\n    % form:\n        \"description\"\n\n",
                    "",
                    ""
                ],
                [
                    false,
                    null,
                    "BaseAccount",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n%extends \"form.html\"\n\n%load exfiltry\n%load exsyntax\n\n%% pythoncode\n    script language=python\n        def signal_from_child(self, child, signal):\n            if signal=='set_bitmap_list':\n                bitmaps = {\n                    \"<<name1>>\": \"<<image_path1>>\",\n                    \"<<name2>>\": \"<<image_path2>>\",\n                }\n                child.set_bitmaps(bitmaps)\n\n        def filter_url(self, target, href):\n            return href\n\n%% all\n    %with form_width=<<dx>> form_height=<<dy>>\n        {{ block.super }}\n\n%% scroll\n\n%% form_header\n    p\n        % new_row \"<<new_row_title>>\"\n        % action_table \"<<action>>\" \"<<action_title>>\"\n\n%% table_header\n  tr\n    td...ID\n    td...<<col_name>>\n    td...Action\n\n%% table_content\n    tr\n        td:::a href={{object.id}}/info?width=<<info_dy>>&height=<<info_dx>>,,,title=<<info_title>>,,,class=thickbox...{{object.id}}\n        td...{{object.<<object_name>>}}\n        td\n            % list_field \"<<child_name>>_set\" \"<<child_id>>\" \"<<child_title>>\"\n\n            % edit_field \"<<field_name>>\" \"<<field_id>>\" \"<<field_title>>\"\n\n            % action_row \"<<name1>>\" \"<<action_title_1>>\"\n            % action_row \"<<name2>>\" \"<<action_title_2>>\"\n\n            % edit_row \"update\"\n            % delete_row \"delete\"\n\n%% table_footer\n  tr\n    td...-\n    td...-\n    td:::\n        % new_row \"<<new_row_title>>\"\n\n%% table_row_edit\n    {{form.as_table}}\n    {{form.fields_as_table.<<field1>>__<<field2>>__<<field3>>}}\n",
                    null,
                    null
                ],
                [
                    false,
                    null,
                    "Classifier",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n%extends \"forms/tree.html\"\n\n%load exfiltry\n%load exsyntax\n\n%% pythoncode\n    script language=python\n        def signal_from_child(self, child, signal):\n            if signal=='set_bitmap_list':\n                bitmaps = {\n                }\n                child.set_bitmaps(bitmaps)\n\n        def filter_url(self, target, href):\n            return href\n\n\n%% all\n    %with form_width=800 form_height=600 table_type='datatable' title=_(\"Classifier\"):\n        {{ block.super }}\n\n%% list_row_header\n    th...Name\n    th...Description\n\n%% list_row\n    td...{{object.name}}\n    td...{{object.description}}\n\n%% row_edit\n    % if form_add:\n        % form:\n            \"name\",\n            \"description\"\n    % else\n        % form:\n            \"parent\",\n            \"name\",\n            \"description\"\n",
                    null,
                    null
                ],
                [
                    false,
                    null,
                    "Account",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n%extends \"forms/tree.html\"\n\n%load exfiltry\n%load exsyntax\n\n%% pythoncode\n    script language=python\n        def signal_from_child(self, child, signal):\n            if signal=='set_bitmap_list':\n                bitmaps = {\n                    \"name1\": \"image_path1\",\n                    \"name2\": \"image_path2\",\n                }\n                child.set_bitmaps(bitmaps)\n\n        def filter_url(self, target, href):\n            return href\n\n%% on_dialog_load {:}\n    function show_hide(typ):\n        if (typ=='S'):\n            $('label[for|=\"id_grand_parent\"]').show()\n            $('label[for|=\"id_description\"]').show()\n            $('select[name^=\"grand_parent\"]').show()\n            $('input[name=\"description\"]').show()\n            $('#id_key').show()\n        else:\n            $('label[for|=\"id_grand_parent\"]').hide()\n            $('label[for|=\"id_description\"]').hide()\n            $('select[name^=\"grand_parent\"]').hide()\n            $('input[name=\"description\"]').hide()\n            $('#id_key').hide()\n\n    $('#id_type').change(\n        function():\n            var typ\n            typ = $(this)[0].options[$(this)[0].selectedIndex].value\n            show_hide(typ)\n            return false\n\n    var id_type=$('#id_type')[0].options[$('#id_Typ')[0].selectedIndex].value\n    show_hide(id_type)\n    if(id_type!=\"\"):\n        $('label[for|=\"id_type\"]').hide()\n        $('select[name=\"type\"]').hide()\n\n\n%% all\n    %with table_type='datatable' title=\"Accounts\":\n        {{ block.super }}\n\n\n%% list_row_header\n    th...Type 1\n    th...Type 2\n    th...Name\n    th...Description\n    th...Classifier 1\n    th...Classifier 2\n    th...Classifier 3\n\n%% list_row\n    td...{{object.type1}}\n    td...{{object.type2}}\n    td...{{object.name}}\n    td...{{object.description}}\n    td...{{object.root_classifier1|none_to_empty}}\n    td...{{object.root_classifier2|none_to_empty}}\n    td...{{object.root_classifier3|none_to_empty}}\n\n%% list_row_actions\n    % row_actions:\n        .edit\n        .delete\n\n%% row_edit\n    % if form_add\n        % form:\n            .parent:!\n    % else\n        % form:\n            .parent\n    \n    % if object.parent:\n        % form:\n            .type2:!\n    % else:\n        % form:\n            .type2\n                \n    % form: \n        .name,description,correctness_rule,root_classifier1,root_classifier2,root_classifier3\n\n",
                    null,
                    null
                ],
                [
                    false,
                    null,
                    "AccountDocument",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n%extends \"form.html\"\n\n%load exfiltry\n%load exsyntax\n\n%% pythoncode\n    script language=python\n        def signal_from_child(self, child, signal):\n            if signal=='set_bitmap_list':\n                bitmaps = {\n                    \"<<name1>>\": \"<<image_path1>>\",\n                    \"<<name2>>\": \"<<image_path2>>\",\n                }\n                child.set_bitmaps(bitmaps)\n\n        def filter_url(self, target, href):\n            return href\n\n%% all\n    %with form_width=<<dx>> form_height=<<dy>>\n        {{ block.super }}\n\n%% scroll\n\n%% list_content_actions\n    % new_row \"<<new_row_title>>\"\n    % action_table \"<<action>>\" \"<<action_title>>\"\n\n%% list_row_header\n    th...<<col_name>>\n\n%% list_row\n    td...{{object.<<object_name>>}}\n\n\n%% list_row_actions\n    {% if not forloop.first %}\n        % row_actions:... field_up,Move up\n    {% endif %}\n    {% if not forloop.last %}\n        % row_actions:...field_down,Move down\n    {% endif %}\n\n    % row_actions:\n        .edit\n        .field_edit/<<field_name>>,<<name>>,<<field_id>>\n        .field_list/<<child_name>>_set,<<field_title>>,<<field_id>>\n        .<<action_name>>,<<action_title>>\n        .delete\n\n\n%% row_edit\n    % form:\n\n    % form:\n            \"<<field_1>>\", \"<<field_2>>\"\n\n",
                    null,
                    null
                ],
                [
                    false,
                    null,
                    "AccountStack",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n%extends \"form.html\"\n\n%load exfiltry\n%load exsyntax\n\n%% pythoncode\n    script language=python\n        def signal_from_child(self, child, signal):\n            if signal=='set_bitmap_list':\n                bitmaps = {\n                    \"<<name1>>\": \"<<image_path1>>\",\n                    \"<<name2>>\": \"<<image_path2>>\",\n                }\n                child.set_bitmaps(bitmaps)\n\n        def filter_url(self, target, href):\n            return href\n\n%% all\n    %with form_width=<<dx>> form_height=<<dy>>\n        {{ block.super }}\n\n%% scroll\n\n%% list_content_actions\n    % new_row \"<<new_row_title>>\"\n    % action_table \"<<action>>\" \"<<action_title>>\"\n\n%% list_row_header\n    th...<<col_name>>\n\n%% list_row\n    td...{{object.<<object_name>>}}\n\n\n%% list_row_actions\n    {% if not forloop.first %}\n        % row_actions:... field_up,Move up\n    {% endif %}\n    {% if not forloop.last %}\n        % row_actions:...field_down,Move down\n    {% endif %}\n\n    % row_actions:\n        .edit\n        .field_edit/<<field_name>>,<<name>>,<<field_id>>\n        .field_list/<<child_name>>_set,<<field_title>>,<<field_id>>\n        .<<action_name>>,<<action_title>>\n        .delete\n\n\n%% row_edit\n    % form:\n\n    % form:\n            \"<<field_1>>\", \"<<field_2>>\"\n\n",
                    null,
                    null
                ],
                [
                    false,
                    null,
                    "AccountMoves",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n%extends \"form.html\"\n\n%load exfiltry\n%load exsyntax\n\n%% pythoncode\n    script language=python\n        def signal_from_child(self, child, signal):\n            if signal=='set_bitmap_list':\n                bitmaps = {\n                    \"<<name1>>\": \"<<image_path1>>\",\n                    \"<<name2>>\": \"<<image_path2>>\",\n                }\n                child.set_bitmaps(bitmaps)\n\n        def filter_url(self, target, href):\n            return href\n\n%% all\n    %with form_width=<<dx>> form_height=<<dy>>\n        {{ block.super }}\n\n%% scroll\n\n%% list_content_actions\n    % new_row \"<<new_row_title>>\"\n    % action_table \"<<action>>\" \"<<action_title>>\"\n\n%% list_row_header\n    th...<<col_name>>\n\n%% list_row\n    td...{{object.<<object_name>>}}\n\n\n%% list_row_actions\n    {% if not forloop.first %}\n        % row_actions:... field_up,Move up\n    {% endif %}\n    {% if not forloop.last %}\n        % row_actions:...field_down,Move down\n    {% endif %}\n\n    % row_actions:\n        .edit\n        .field_edit/<<field_name>>,<<name>>,<<field_id>>\n        .field_list/<<child_name>>_set,<<field_title>>,<<field_id>>\n        .<<action_name>>,<<action_title>>\n        .delete\n\n\n%% row_edit\n    % form:\n\n    % form:\n            \"<<field_1>>\", \"<<field_2>>\"\n\n",
                    null,
                    null
                ],
                [
                    false,
                    null,
                    "DocumentLines",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n%extends \"form.html\"\n\n%load exfiltry\n%load exsyntax\n\n%% pythoncode\n    script language=python\n        def signal_from_child(self, child, signal):\n            if signal=='set_bitmap_list':\n                bitmaps = {\n                    \"<<name1>>\": \"<<image_path1>>\",\n                    \"<<name2>>\": \"<<image_path2>>\",\n                }\n                child.set_bitmaps(bitmaps)\n\n        def filter_url(self, target, href):\n            return href\n\n%% all\n    %with form_width=<<dx>> form_height=<<dy>>\n        {{ block.super }}\n\n%% scroll\n\n%% list_content_actions\n    % new_row \"<<new_row_title>>\"\n    % action_table \"<<action>>\" \"<<action_title>>\"\n\n%% list_row_header\n    th...<<col_name>>\n\n%% list_row\n    td...{{object.<<object_name>>}}\n\n\n%% list_row_actions\n    {% if not forloop.first %}\n        % row_actions:... field_up,Move up\n    {% endif %}\n    {% if not forloop.last %}\n        % row_actions:...field_down,Move down\n    {% endif %}\n\n    % row_actions:\n        .edit\n        .field_edit/<<field_name>>,<<name>>,<<field_id>>\n        .field_list/<<child_name>>_set,<<field_title>>,<<field_id>>\n        .<<action_name>>,<<action_title>>\n        .delete\n\n\n%% row_edit\n    % form:\n\n    % form:\n            \"<<field_1>>\", \"<<field_2>>\"\n\n",
                    null,
                    null
                ],
                [
                    false,
                    null,
                    "AccountOperation",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n%extends \"form.html\"\n\n%load exfiltry\n%load exsyntax\n\n%% pythoncode\n    script language=python\n        def signal_from_child(self, child, signal):\n            if signal=='set_bitmap_list':\n                bitmaps = {\n                }\n                child.set_bitmaps(bitmaps)\n\n        def filter_url(self, target, href):\n            return href\n\n%% all\n    %with table_type='datatable':\n        {{ block.super }}\n\n%% scroll\n\n%% list_content_actions\n    % new_row \"New account operation\"\n\n%% list_row_header\n    th...Date\n    th...Description\n    th...Payment\n    th...Account state\n    th...Sign\n    th...Amount\n\n%% list_row\n    td...{{object.date}}\n    td...{{object.description}}\n    td...{{object.payment}}\n    td...{{object.account_state}}\n    td...{{object.sign}}\n    td...{{object.amount}}\n\n%% list_row_actions\n    % row_actions:\n        .edit\n        .delete\n\n%% row_edit\n    % form:\n        .parent,description,payment,account_state\n    % comment:\n        div class=ajax-region,,,data-region=get_row\n            div class=row\n                % get_table_row form.account_state search_fields=\"parent__name__icontains\"\n    % form:\n        .sign,amount\n\n        ",
                    null,
                    null
                ],
                [
                    false,
                    null,
                    "DocReg",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n%extends \"form.html\"\n\n%load exfiltry\n%load exsyntax\n\n%% pythoncode\n    script language=python\n        def signal_from_child(self, child, signal):\n            if signal=='set_bitmap_list':\n                bitmaps = {\n                }\n                child.set_bitmaps(bitmaps)\n\n        def filter_url(self, target, href):\n            return href\n\n%% all\n    %with table_type='simple':\n        {{ block.super }}\n\n%% scroll\n\n%% list_content_actions\n    % new_row _(\"New document register\")\n\n%% list_row_header\n    th..._(name)\n    th..._(description)\n\n%% list_row\n    td...{{object.name}}\n    td...{{object.description}}\n\n%% list_row_actions\n    % row_actions:\n        .edit\n        .field_list/doctype_set,Types of documents,doctype_set        \n        .field_list/docregstatus_set,Types of document statuses,docregstatus_set        \n        .field_edit/head_form,Head form,head_form\n        .field_edit/item_form,Item form,item_form\n        .field_edit/save_head_fun,Save head function,save_head_fun\n        .field_edit/save_item_fun,Save item function,save_item_fun\n        .delete\n\n%% row_edit\n    % form:\n        .app,name,group,description\n\n",
                    null,
                    null
                ],
                [
                    false,
                    null,
                    "DocHead",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n%extends \"form.html\"\n\n%load exfiltry\n%load exsyntax\n\n%% pythoncode\n    script language=python\n        def signal_from_child(self, child, signal):\n            if signal=='set_bitmap_list':\n                bitmaps = {\n                }\n                child.set_bitmaps(bitmaps)\n\n        def filter_url(self, target, href):\n            return href\n\n%% all\n    %with table_type='datatable':\n        {{ block.super }}\n\n%% scroll\n\n%% list_content_actions\n    % with object_list.model|args:filter|call:\"get_documents_for_reg\" as doctypes:\n        % for item in doctypes:\n            % new_row \"New document: \"|append_str:item.name action=\"new_row/\"|append_str:item.name\n\n%% list_row_header\n    th..._(Register)\n    th..._(Target)\n    th..._(Name)\n    th..._(Number)\n    th..._(Description)\n    th..._(Date)\n    th..._(Status)\n    \n%% list_row\n    td...{{object.doc_type_parent.name}}\n    td...{{object.org_chart_parent.name}}\n    td...{{object.name}}\n    td...{{object.number}}\n    td...{{object.description}}\n    td...{{object.date|isoformat}}\n    td...{{object.status}}\n\n%% id_extra\n    % row_actions:\n        .field_list/docitem_set,Document items,fa fa-lg fa-plus/fa fa-list-ol        \n    {{ block.super }}\n\n%% list_row_actions\n    % if object.status == \"\" or object.status == 'draft':\n        % row_actions:\n            .edit-inline\n            .delete\n        \n    % with object|args:request|call:\"get_visible_statuses\" as vs:    \n        % if vs:\n            % for row in vs:\n                % if row.order > object.get_reg_status.order:\n                    % action \"approve_status\"|append_str:\"/\"|append_str:row.name row.description row.icon target=row.get_accept_target url=table_path|append_str:\"{id}/action/approve/\"\n\n    % with object|args:request|call:\"get_visible_statuses\" as vs:    \n        % if vs:\n            % for row in vs:\n                % if row.order < object.get_reg_status.order:\n                    % action \"decline_status\"|append_str:\"/\"|append_str:row.name \"_(Back to status:)\"|append_str:row.name row.icon target=row.get_undo_target tag_class=\"+btn-danger\" url=table_path|append_str:\"{id}/action/discard/\"\n\n    % comment:\n        % if object|args:request|call:\"status_can_be_undo\":\n            % action \"decline_status\"|append_str:\"/\"|append_str:object.status \"_(Discard status:) \"|append_str:object.status \"fa fa-undo\" target=object.get_undo_target tag_class=\"+btn-danger\" url=table_path|append_str:\"{id}/action/discard/\"\n\n\n%% row_edit\n    %% dochead_edit\n        % form:\n    % if object.id:\n        %% docitem_list\n            % frame table_path|append_str:object.id|append_str:\"/docitem_set/-/form/sublist/?only_content=1\" \"200px\"\n    % else:\n        <button type=\"button\" class=\"btn btn-warning\" target=\"refresh_frame\" rettype=\"RETURN_HTML_ERROR\" data-region=\"subframe\" get-param=\"redirect='1'\" style=\"width:100%\"> << Expand >> </button>\n",
                    null,
                    null
                ],
                [
                    false,
                    null,
                    "AccountState",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n%extends \"form.html\"\n\n%load exfiltry\n%load exsyntax\n\n%% pythoncode\n    script language=python\n        def signal_from_child(self, child, signal):\n            if signal=='set_bitmap_list':\n                bitmaps = {\n                }\n                child.set_bitmaps(bitmaps)\n\n        def filter_url(self, target, href):\n            return href\n\n%% all\n    %with table_type='datatable':\n        {{ block.super }}\n\n%% scroll\n\n%% list_content_actions\n    % new_row _(\"Account state\")\n\n%% list_row_header\n    th...Account\n    th...Subcode\n    th...Account name\n    th...Target\n    th...Period\n    th...debit\n    th...credit\n    th...element\n    th...classifier1value\n    th...classifier2value\n    th...classifier3value\n\n%% list_row\n    td...{{object.parent.name}}\n    td...{{object.subcode|none_to_empty}}\n    td...{{object.parent}}\n    td...{{object.target|none_to_empty}}\n    td...{{object.period|none_to_empty}}\n    td...{{object.debit}}\n    td...{{object.credit}}\n    td...{{object.element}}\n    td...{{object.classifier1value|none_to_empty}}\n    td...{{object.classifier2value|none_to_empty}}\n    td...{{object.classifier3value|none_to_empty}}\n\n%% list_row_actions\n    % row_actions:\n        .edit\n        .delete\n\n%% row_edit\n    % form:\n\n",
                    null,
                    null
                ],
                [
                    false,
                    null,
                    "DocType",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n%extends \"form.html\"\n\n%load exfiltry\n%load exsyntax\n\n%% pythoncode\n    script language=python\n        def signal_from_child(self, child, signal):\n            if signal=='set_bitmap_list':\n                bitmaps = {\n                }\n                child.set_bitmaps(bitmaps)\n\n        def filter_url(self, target, href):\n            return href\n\n%% all\n    %with table_type='simple':\n        {{ block.super }}\n\n%% scroll\n\n%% list_content_actions\n    % new_row \"Document type\"\n\n%% list_row_header\n    th...Name\n    th...Description\n    th...Correction\n\n%% list_row\n    td...{{object.name}}\n    td...{{object.description}}\n    td...{{object.correction}}\n\n\n%% list_row_actions\n    % row_actions:\n        .edit\n        .field_edit/head_form,Head form,head_form\n        .field_edit/item_form,Item form,item_form\n        .field_edit/save_head_fun,Save head function,save_head_fun\n        .field_edit/save_item_fun,Save item function,save_item_fun        \n        .delete\n\n\n%% row_edit\n    % form:\n",
                    null,
                    null
                ],
                [
                    false,
                    null,
                    "DocRegStatus",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n%extends \"form.html\"\n\n%load exfiltry\n%load exsyntax\n\n%% pythoncode\n    script language=python\n        def signal_from_child(self, child, signal):\n            if signal=='set_bitmap_list':\n                bitmaps = {\n                }\n                child.set_bitmaps(bitmaps)\n\n        def filter_url(self, target, href):\n            return href\n\n%% all\n    %with table_type='simple':\n        {{ block.super }}\n\n%% scroll\n\n%% list_content_actions\n    % new_row \"New status\"\n\n%% list_row_header\n    th..._(Order)\n    th..._(Name)\n    th..._(Description)\n\n%% list_row\n    td...{{object.order}}\n    td...{{object.name}}\n    td...{{object.description}}\n\n\n%% list_row_actions\n    {% if not forloop.first %}\n        % row_actions:...doc_reg_status_up,Move up,fa fa-caret-square-o-down\n    {% endif %}\n    {% if not forloop.last %}\n        % row_actions:...doc_reg_status_down,Move down,fa fa-caret-square-o-down\n    {% endif %}\n\n    % row_actions:\n        .edit\n        .field_edit/accept_proc,Accept procedure,accept_proc\n        .field_edit/undo_proc,Undo procedure,undo_proc\n        .field_edit/can_set_proc,Check if status can be set\n        .field_edit/can_undo_proc,Check if status can be removed\n        .field_edit/accept_form,Form for acceptance process \n        .field_edit/undo_form,Form for acceptance withdrawal process \n        .delete\n\n\n%% row_edit\n    % form:\n",
                    null,
                    null
                ],
                [
                    false,
                    null,
                    "DocHeadStatus",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n%extends \"form.html\"\n\n%load exfiltry\n%load exsyntax\n\n%% pythoncode\n    script language=python\n        def signal_from_child(self, child, signal):\n            if signal=='set_bitmap_list':\n                bitmaps = {\n                }\n                child.set_bitmaps(bitmaps)\n\n        def filter_url(self, target, href):\n            return href\n\n%% all\n    %with table_type='datatable':\n        {{ block.super }}\n\n%% scroll\n\n%% list_content_actions\n\n%% list_row_header\n    th..._(Date)\n    th..._(Name)\n    th..._(Operator)\n    th..._(Data)\n\n%% list_row\n    td...{{object.date}}\n    td...{{object.name}}\n    td...{{object.operator}}\n    td...{{object.data}}\n\n%% list_row_actions\n\n%% row_edit\n    % form:\n\n",
                    null,
                    null
                ],
                [
                    false,
                    null,
                    "Form_FilterFormDocHead",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n% extends \"forms/user_tab.html\"\n\n% load exfiltry\n% load exsyntax\n\n\n%% all\n    %with show_title_bar=1 title='<<form_title>>'\n        {{ block.super }}\n\n\n%% user_header\n    th...<<col_name1>>\n    th...<<col_name2>>\n    th...<<col_name3>>\n\n\n%% user_row\n    tr\n        td... {{object.0}}\n        td align=right... {{object.1|floatnullformat}}\n        td align=right... {{object.2|to_int}}\n\n",
                    null,
                    null
                ],
                [
                    false,
                    null,
                    "DocItem",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n%extends \"form.html\"\n\n%load exfiltry\n%load exsyntax\n\n%% pythoncode\n    script language=python\n        def signal_from_child(self, child, signal):\n            if signal=='set_bitmap_list':\n                bitmaps = {\n                }\n                child.set_bitmaps(bitmaps)\n\n        def filter_url(self, target, href):\n            return href\n\n%% all\n    %with table_type='simple':\n        {{ block.super }}\n\n%% scroll\n\n%% list_content_actions\n    % new_row \"New document item\"\n\n%% list_row_header\n    th...order\n    th...description\n    th...amount\n    th...level\n\n%% list_row\n    td...{{object.order}}\n    td...{{object.description}}\n    td...{{object.amount}}\n    td...{{object.level}}\n\n\n%% id_extra\n    % row_actions:\n        .field_list-parent/accountoperation_set,Account operations,fa fa-lg fa-plus/fa fa-list-ol\n    {{ block.super }}\n\n%% list_row_actions\n    % row_actions:\n        .edit\n        .delete\n\n%% row_edit\n    % form:\n        .description,amount\n\n",
                    null,
                    null
                ],
                [
                    false,
                    null,
                    "admin_delegation_dochead_list",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n%extends \"schelements/dochead.html\"\n\n%load exfiltry\n%load exsyntax\n\n",
                    null,
                    null
                ],
                [
                    false,
                    null,
                    "admin_delegation_dochead_edit",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n%extends \"schelements/dochead.html\"\n\n%load exfiltry\n%load exsyntax\n\n%% dochead_edit\n    % form:\n        .description\n    % get_table_row \"account_id\" \"schelements\" \"Account\" \"name__icontains\" filter=\"1\"\n    ",
                    null,
                    null
                ],
                [
                    false,
                    null,
                    "admin_delegation_docitem_list",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n%extends \"schelements/docitembase.html\"\n\n%load exfiltry\n%load exsyntax\n\n",
                    null,
                    null
                ],
                [
                    false,
                    null,
                    "DocItemBase",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n%extends \"schelements/docitem.html\"\n\n%load exfiltry\n%load exsyntax\n\n%%list_content_header_first_row\n\n%%list_content_header_second_row\n",
                    null,
                    null
                ],
                [
                    false,
                    null,
                    "v_approve",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n\n%extends 'template/only_content.html'\n%load exfiltry\n%load exsyntax\n\n\n%% all\n    %with show_form=True form_edit=True\n        % if errors:\n            meta name=RETURN,,,content=$$RETURN_HTML_ERROR\n        {{ block.super }}\n\n%% form_action\n    {{request.path}}?x1={{ action_name }}\n\n%% row_edit_form    \n    % if errors:\n        % for error in errors:\n            div class=alert alert-secondary,,,role=alert\n                {{ error|safe }}\n    % else:\n        % if description:\n            {{ description|safe }}\n        % else:\n            h3..._(Are you sure you want to accept the document)? <br>\n            h4..._(You accept the status): {{ action_name }}\n    % if form:\n        br    \n        % form:\n",
                    null,
                    null
                ],
                [
                    false,
                    null,
                    "v_discard",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n\n%extends 'template/only_content.html'\n%load exfiltry\n%load exsyntax\n\n\n%% all\n    %with show_form=True form_edit=True\n        % if errors:\n            meta name=RETURN,,,content=$$RETURN_HTML_ERROR\n        {{ block.super }}\n\n%% form_action\n    {{request.path}}?x1={{ action_name }}\n\n%% row_edit_form    \n    % if errors:\n        % for error in errors:\n            div class=alert alert-secondary,,,role=alert\n                {{ error|safe }}\n    % else:\n        % if description:\n            {{ description|safe }}\n        % else:\n            h3..._(Are you sure you want to discard the document)? <br>\n            h4..._(You discard the status): {{ action_name }}\n    % if form:\n        br    \n        % form:\n",
                    null,
                    null
                ]
            ],
            [
                [
                    "bi-stack",
                    null,
                    "1",
                    "Elements",
                    null,
                    "table/Element/0/form/tree/",
                    "desktop"
                ],
                [
                    "client://actions/folder-new.png",
                    null,
                    "1",
                    "Documents register",
                    null,
                    "table/DocReg/-/form/list/",
                    "desktop"
                ],
                [
                    null,
                    null,
                    "1",
                    "Types of documents",
                    null,
                    "table/DocType/-/form/list/",
                    "desktop"
                ],
                [
                    "ART_INFORMATION",
                    null,
                    "1",
                    "Definition of document status",
                    null,
                    "table/DocRegStatus/-/form/list/",
                    "desktop"
                ],
                [
                    "client://apps/system-file-manager.png",
                    null,
                    "1",
                    "Accounts",
                    null,
                    "table/Account/0/form/tree/",
                    "desktop"
                ],
                [
                    "client://mimetypes/package-x-generic.png",
                    null,
                    "1",
                    "States of accounts",
                    null,
                    "table/AccountState/-/form/list/",
                    "desktop"
                ],
                [
                    "client://actions/edit-find-replace.png",
                    null,
                    "1",
                    "Account operations",
                    null,
                    "table/AccountOperation/-/form/list/",
                    "desktop"
                ],
                [
                    "client://actions/format-justify-fill.png",
                    null,
                    "1",
                    "Documents",
                    null,
                    "table/DocHead/-/form/list/",
                    "desktop"
                ],
                [
                    "client://categories/applications-development.png",
                    null,
                    "1",
                    "Documents [safety]",
                    null,
                    "table/DocHead/rep_safety/form/docheadlist/",
                    "desktop"
                ],
                [
                    "client://actions/mail-send-receive.png",
                    null,
                    "1",
                    "DEL",
                    null,
                    "table/DocHead/admin_delegation/form/docheadlist/",
                    "desktop"
                ]
            ],
            [
                [
                    [
                        false,
                        "",
                        "def process_empty_or_invalid(self, request, queryset):\n    return queryset.filter(date__gte = year_ago())\n    ",
                        "",
                        null,
                        "_FilterFormDocHead",
                        "date_from = self.cleaned_data['date_from']\ndate_to = self.cleaned_data['date_to']\ntarget = self.cleaned_data['target']\nnumber = self.cleaned_data['number']\n\nif date_from:\n    queryset = queryset.filter(date__gte = date_from)\nif date_to:\n    queryset = queryset.filter(date__lt = date_to + datetime.timedelta(days=1))\nif target:\n    queryset = queryset.filter(org_chart_parent__name__icontains = target)\nif number:\n    queryset = queryset.filter(number__icontains = number)\n\nreturn queryset\n"
                    ],
                    [
                        [
                            null,
                            null,
                            "year_ago",
                            "Date from",
                            "date_from",
                            null,
                            false,
                            "DateField",
                            null
                        ],
                        [
                            null,
                            null,
                            null,
                            "Data to",
                            "date_to",
                            null,
                            false,
                            "DateField",
                            null
                        ],
                        [
                            null,
                            null,
                            null,
                            "Target",
                            "target",
                            "max_length=None, min_length=None",
                            false,
                            "CharField",
                            null
                        ],
                        [
                            null,
                            null,
                            null,
                            "Number",
                            "number",
                            "max_length=None, min_length=None",
                            false,
                            "CharField",
                            null
                        ]
                    ]
                ],
                [
                    [
                        false,
                        "",
                        "def process_empty_or_invalid(self, request, queryset):\n    if not self.is_bound:\n        return queryset\n        \n    if self.data['account_target']:\n        queryset = queryset.filter(target__id = int(self.data['account_target'][0]))\n    if self.cleaned_data['account']:\n        pass\n    if self.cleaned_data['classifier1']:\n        pass\n    if self.cleaned_data['classifier2']:\n        pass\n    if self.cleaned_data['classifier3']:\n        pass\n    if self.cleaned_data['subcode']:\n        pass\n\n    if self.cleaned_data['period']:\n        if self.cleaned_data['period'] == '*':\n            pass\n        else:\n            queryset = queryset.filter(period=self.cleaned_data['period'])\n    else:\n        queryset = queryset.filter(Q(period__isnull=True)|Q(period=\"\"))\n\n    if self.cleaned_data['not_null']:\n        queryset = queryset.exclude(debit=F('credit'))\n\n    if self.cleaned_data['not_empty']:\n        queryset = queryset.exclude(debit=0,credit=0)\n\n    if self.cleaned_data['analytical']:\n        queryset = queryset.filter(aggregate=False)\n\n    return queryset\n",
                        "",
                        null,
                        "_FilterFormAccountState",
                        "return self.process_empty_or_invalid(request, queryset)\n"
                    ],
                    [
                        [
                            null,
                            null,
                            null,
                            "Target",
                            "account_target",
                            "queryset=models.Element.objects.filter(type='O-DIV'), search_fields=['name__istartswith'], attrs={'data-minimum-input-length': 0}",
                            false,
                            "ModelSelect2Field",
                            null
                        ],
                        [
                            null,
                            null,
                            null,
                            "Account",
                            "account",
                            "queryset=models.Account.objects.all(), search_fields=['name__istartswith'], attrs={'data-minimum-input-length': 0}",
                            false,
                            "ModelSelect2Field",
                            null
                        ],
                        [
                            null,
                            null,
                            null,
                            "Classifier 1",
                            "classifier1",
                            "max_length=None, min_length=None",
                            false,
                            "CharField",
                            null
                        ],
                        [
                            null,
                            null,
                            null,
                            "Classifier 2",
                            "classifier2",
                            "max_length=None, min_length=None",
                            false,
                            "CharField",
                            null
                        ],
                        [
                            null,
                            null,
                            null,
                            "classifier3",
                            "classifier3",
                            "max_length=None, min_length=None",
                            false,
                            "CharField",
                            null
                        ],
                        [
                            null,
                            null,
                            null,
                            "Subcode",
                            "subcode",
                            "max_length=None, min_length=None",
                            false,
                            "CharField",
                            null
                        ],
                        [
                            null,
                            null,
                            null,
                            "Period",
                            "period",
                            "max_length=None, min_length=None",
                            false,
                            "CharField",
                            null
                        ],
                        [
                            null,
                            null,
                            null,
                            "Not null",
                            "not_null",
                            null,
                            false,
                            "BooleanField",
                            null
                        ],
                        [
                            null,
                            null,
                            null,
                            "Not empty",
                            "not_empty",
                            null,
                            false,
                            "BooleanField",
                            null
                        ],
                        [
                            null,
                            null,
                            null,
                            "Analytical",
                            "analytical",
                            null,
                            false,
                            "BooleanField",
                            null
                        ]
                    ]
                ]
            ],
            [],
            [],
            []
        ],
        [
            [
                null,
                null,
                null,
                null,
                "1",
                null,
                null,
                "from pytigon_lib.schtools.schjson import json_dumps, json_loads\n#from schlib.schdjangoext.django_ihtml import ihtml_to_html\n#from django.template import Context, Template\nfrom django.db.models import Max, Min\n\nfrom schelements.models import *",
                "Reports",
                "schreports",
                true,
                "",
                "Reports",
                null,
                "",
                "from pytigon_lib.schtools.schjson import json_dumps, json_loads\nfrom pytigon_lib.schdjangoext.django_ihtml import ihtml_to_html\nfrom pytigon_lib.schdjangoext.fastform import form_from_str\nfrom pytigon_lib.schviews import make_path\nfrom schelements.models import DocReg, DocType, DocHead, Element\nfrom django.db.models import F\nfrom schelements.views import year_ago\n\ndef move_rep(request, id, to_pos = \"+1\"):\n    obj = models.Report.objects.get(pk=id)\n    url = make_path('ok')\n    if not obj.parent:\n        return HttpResponseRedirect(url)\n    \n    if type(to_pos)==str:\n        if to_pos==\"+1\":\n            objects = models.Report.objects.filter(parent = obj.parent).filter(order__gt = obj.order)\n            if len(objects)>0:\n                obj2 = objects[0]\n            else: \n                return HttpResponseRedirect(url)\n        elif to_pos=='-1':    \n            objects = models.Report.objects.filter(parent = obj.parent).filter(order__lt = obj.order)\n            if len(objects)>0:\n                obj2 = list(objects)[-1]\n            else: \n                return HttpResponseRedirect(url)\n                \n        tmp_order = obj.order\n        obj.order = obj2.order\n        obj2.order = tmp_order\n        obj.save()\n        obj2.save()\n        \n    elif type(to_pos)==int:\n        obj2 = models.Report.objects.get(pk=to_pos)\n        order = obj2.order\n        if obj.order < order:\n            objects = models.Report.objects.filter(parent = obj.parent).filter(order__gt = obj2.order).update(order=F('order')+2)\n            obj.order = order+1\n        else:\n            objects = models.Report.objects.filter(parent = obj.parent).filter(order__gte = obj2.order).update(order=F('order')+2)\n            obj.order = order\n        obj.save()\n\n    return actions.refresh(request)\n"
            ],
            [
                [
                    [
                        "schelements.BaseObject",
                        "Declaration:\n    return Form()\n\nTemplate: django template\n\nchild(name):\n    child_header(name)\n    child_table(name)\n    \n    <html></html>\n\n\n\nto_html:\n    convert form data to html\n    \n",
                        true,
                        null,
                        "ReportDef",
                        "['id']",
                        null,
                        "def getsubrep(self, name):\n    return ReportDef.objects.get(name = self.name + \"/\" + name)\n    \n",
                        null,
                        "Report definition",
                        "Reports definitions"
                    ],
                    []
                ],
                [
                    [
                        "JSONModel",
                        null,
                        true,
                        "ordering = ['parent_id', 'order', 'id']",
                        "Report",
                        "['id']",
                        null,
                        "def template_for_object(self, view, context, doc_type):\n    if doc_type=='pdf':\n        x = ReportDef.objects.filter(name=self.report_def_name)\n        if x.count()>0:\n            return \"%s/report_%s_pdf.html\" % (x[0].app, self.report_def_name)\n    return None\n\n@staticmethod    \ndef get_rep_types():\n    repdef_list = ReportDef.objects.exclude(name__contains='/')\n    return [pos.name for pos in repdef_list]\n\n\n@staticmethod    \ndef get_rep_by_nagid(nagid):\n    r = Report.objects.filter(order=nagid)\n    if r.count()>0:\n        return r[0]\n    else:\n        return None\n\n@staticmethod    \ndef filter(f):\n    if f == 'main_reports':\n        return Report.objects.filter(parent=None)\n    else:\n        return Report.objects.all()\n\ndef getsubreps(self, name):\n    return Report.objects.filter(parent=self).filter(report_def_name__endswith=name)\n        \ndef to_html(self):\n    rep_def = ReportDef.objects.get(name = self.report_def_name)\n    return rep_def.to_html(self)\n\n#def  __getattr__(self, name):    \n#    if name.startswith('json_'):\n#        if not hasattr(self, '_data'):\n#            self._data = json_loads(self.data)\n#        if name[5:] in self._data:\n#            return self._data[name[5:]]\n#        else:\n#            return None\n#    else:\n#        return super().__getattr__(name)\n\ndef save(self, *args, **kwargs):\n    if self.pk is None:\n        if self.parent:\n            m = Report.objects.filter(parent=self.parent).aggregate(Max('order'))['order__max']\n            if m:\n                self.order = m + 1\n            else:\n                self.order = 1        \n    super().save(*args, **kwargs)\n\n\n\n",
                        null,
                        "Report",
                        "Reports"
                    ],
                    [
                        [
                            true,
                            null,
                            false,
                            null,
                            "Parent",
                            false,
                            null,
                            "parent",
                            true,
                            null,
                            "'self'",
                            "PtigForeignKey",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Order number",
                            true,
                            null,
                            "order",
                            true,
                            null,
                            null,
                            "IntegerField",
                            false,
                            null
                        ],
                        [
                            false,
                            null,
                            false,
                            null,
                            "Report definition name",
                            true,
                            null,
                            "report_def_name",
                            false,
                            "max_length=64",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Date",
                            true,
                            null,
                            "date",
                            true,
                            null,
                            null,
                            "DateTimeField",
                            false,
                            null
                        ]
                    ]
                ],
                [
                    [
                        "schelements.BaseObject",
                        null,
                        true,
                        null,
                        "CommonGroupDef",
                        "['id']",
                        null,
                        null,
                        null,
                        "Common group definition",
                        "Common groups definition"
                    ],
                    [
                        [
                            true,
                            null,
                            false,
                            null,
                            "On new elemetn event",
                            false,
                            null,
                            "on_new_elem_event",
                            true,
                            null,
                            null,
                            "TextField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Allowed new fields",
                            false,
                            null,
                            "allowed_new_fields",
                            true,
                            null,
                            null,
                            "TextField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Main group",
                            true,
                            null,
                            "main_group",
                            true,
                            null,
                            null,
                            "NullBooleanField",
                            false,
                            null
                        ]
                    ]
                ],
                [
                    [
                        "JSONModel",
                        null,
                        true,
                        null,
                        "CommonGroup",
                        "['id']",
                        null,
                        "def code(self):\n    return self.title\n\ndef get_def(self):\n    x = CommonGroupDef.objects.filter(name=self.group_def_name)\n    if len(x)>0:\n        return x[0]\n    else:\n        return None\n\ndef to_str(self):\n    def_obj = self.get_def()\n    if def_obj:\n        return def_obj.to_str(self)\n    else:\n        return None\n\ndef __str__(self): \n    return f\"{self.title} [{self.group_def_name}]\"\n\n@staticmethod    \ndef get_group_types(parent_pk):\n    if not parent_pk:\n        groupdef_list = CommonGroupDef.objects.filter(main_group=True)\n        return [pos for pos in groupdef_list]\n    else:\n        group = CommonGroup.objects.get(id=int(parent_pk))        \n        groupdef = CommonGroupDef.objects.filter(name=group.group_def_name)\n        ret = []\n        if len(groupdef)>0:\n            allowed_new_fields = groupdef[0].allowed_new_fields\n            if allowed_new_fields:                    \n                for pos in allowed_new_fields.replace(',',';').split(';'):\n                    if pos:\n                        objs = CommonGroupDef.objects.filter(name=pos)\n                        if len(objs)>0:\n                            ret.append(objs[0])\n        return ret\n\n",
                        null,
                        "Common group",
                        "Common groups"
                    ],
                    [
                        [
                            true,
                            null,
                            false,
                            null,
                            "Parent",
                            true,
                            null,
                            "parent",
                            true,
                            null,
                            "'self'",
                            "PtigTreeForeignKey",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Grand parent",
                            true,
                            null,
                            "gparent",
                            true,
                            "related_name='gparentrel'",
                            "'self'",
                            "ForeignKey",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Title",
                            true,
                            null,
                            "title",
                            true,
                            "max_length=64",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            false,
                            null,
                            false,
                            null,
                            "Group definition name",
                            true,
                            null,
                            "group_def_name",
                            false,
                            "max_length=64",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            false,
                            null,
                            false,
                            null,
                            "Grand parent group definition name",
                            true,
                            null,
                            "gp_group_def_name",
                            false,
                            "max_length=64",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Tag name",
                            true,
                            null,
                            "tag_name",
                            true,
                            "max_length=64",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            true,
                            null,
                            "Key 1",
                            true,
                            null,
                            "key1",
                            true,
                            "max_length=64",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            true,
                            null,
                            "Key 2",
                            true,
                            null,
                            "key2",
                            true,
                            "max_length=64",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            true,
                            null,
                            "Key 3",
                            true,
                            null,
                            "key3",
                            true,
                            "max_length=64",
                            null,
                            "CharField",
                            false,
                            null
                        ]
                    ]
                ],
                [
                    [
                        null,
                        null,
                        true,
                        null,
                        "Plot",
                        "['id']",
                        null,
                        null,
                        null,
                        "Plot",
                        "Polts"
                    ],
                    [
                        [
                            false,
                            null,
                            false,
                            null,
                            "Name",
                            true,
                            null,
                            "name",
                            false,
                            "max_length=64",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            false,
                            null,
                            false,
                            null,
                            "Group",
                            true,
                            null,
                            "group",
                            false,
                            "max_length=64",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Get config",
                            false,
                            null,
                            "get_config",
                            true,
                            null,
                            null,
                            "TextField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Get data",
                            false,
                            null,
                            "get_data",
                            true,
                            null,
                            null,
                            "TextField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Get layout",
                            false,
                            null,
                            "get_layout",
                            true,
                            null,
                            null,
                            "TextField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "On event",
                            false,
                            null,
                            "on_event",
                            true,
                            null,
                            null,
                            "TextField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Permission",
                            true,
                            null,
                            "permission",
                            true,
                            "max_length=64",
                            null,
                            "CharField",
                            false,
                            null
                        ]
                    ]
                ]
            ],
            [],
            [
                [
                    false,
                    null,
                    null,
                    "new_rep",
                    "rep_type,  doc_type_name",
                    "U",
                    "new_rep/(?P<rep_type>\\w+)/(?P<doc_type_name>\\w+)/$",
                    "{}",
                    "#new_rep/(?P<rep_type>\\w+)/(?P<doc_type_name>\\w+)/$\ndoc_type = DocType.objects.filter(name=doc_type_name)\nif len(doc_type)==1:\n    doc = DocHead()\n    doc.doc_type_parent = doc_type[0]\n    doc.date = datetime.datetime.now()\n    doc.status = 'edit'\n    doc.operator = request.user.username\n    doc.save()\n    \n    rep = models.Report()\n    rep.parent = None\n    rep.order = doc.id\n    rep.report_def_name = rep_type\n    rep.date = datetime.datetime.now()\n    rep.save()\n    url = make_href(\"/schreports/table/Report/%d/edit__rep/\" % rep.id)\n    return HttpResponseRedirect(url)\nelse:\n    return HttpResponse(\"Error - document type: %s doesn't exists\" % doc_type_name)\n",
                    "u"
                ],
                [
                    false,
                    null,
                    null,
                    "edit__rep",
                    "rep_id",
                    "U",
                    "table/Report/(?P<rep_id>\\d+)/edit__rep/$",
                    "{}",
                    "rep = models.Report.objects.get(pk=rep_id)\nrep_def = models.ReportDef.objects.get(name=rep.report_def_name)\n\nif rep_def.declaration:\n    form_class = form_from_str(rep_def.declaration)\nelse:\n    return \"ERROR\"\n    \nif request.POST or request.FILES:    \n    if request.method == 'POST':\n        form = form_class(request.POST, request.FILES)\n        if form.is_valid():\n            if rep_def.save_fun:\n                exec(rep_def.save_fun)\n                data = locals()['save'](form, rep)\n            else:\n                data = form.cleaned_data\n            rep._data = data\n            rep._data['json_update'] = True\n            rep.save()\n            url = make_path('ok')\n            return HttpResponseRedirect(url)\n    \nif not request.POST:\n    data = rep.get_json_data()\n    \n    if rep_def.load_fun:\n        exec(rep_def.load_fun)\n        data_form = locals()['load'](data)\n    else:\n        data_form = data\n    form = form_class(initial=data_form)\n\nt = Template(ihtml_to_html(None, rep_def.template))\nc = RequestContext(request, { 'form': form, 'rep': rep, 'rep_def': rep_def})\n\nreturn HttpResponse(t.render(c))\n",
                    "u"
                ],
                [
                    false,
                    null,
                    null,
                    "new_subrep",
                    "parent_rep_id, rep_type",
                    "U",
                    "new_subrep/(?P<parent_rep_id>\\d+)/(?P<rep_type>\\w+)/$",
                    "{}",
                    "rep_parent = models.Report.objects.get(pk=parent_rep_id)\nrep = models.Report()\nrep.parent = rep_parent\nrep.order = 0\nrep.report_def_name = rep_parent.report_def_name + \"/\" + rep_type\nrep.date = datetime.datetime.now()\nrep.save()\nurl = make_href(\"/schreports/table/Report/%d/edit__rep/\" % rep.id)\nreturn HttpResponseRedirect(url)\n",
                    "u"
                ],
                [
                    false,
                    null,
                    null,
                    "edit_subrep",
                    "parent_rep_id, rep_type,view_type",
                    "U",
                    "edit_subrep/(?P<parent_rep_id>\\d+)/(?P<rep_type>\\w+)/(?P<view_type>\\w+)/$",
                    "{}",
                    "parent_rep = models.Report.objects.get(pk=parent_rep_id)\nparent_rep_def = models.ReportDef.objects.get(name=parent_rep.report_def_name)\nrep_def = parent_rep_def.getsubrep(rep_type)\nsubreps = parent_rep.getsubreps(rep_type)\n\ncdict = {}    \ncdict['parent_rep'] = parent_rep\ncdict['parent_rep_def'] = parent_rep_def\ncdict['rep_type'] = rep_type\ncdict['view_type'] = view_type\ncdict['reports']= parent_rep.getsubreps(rep_type)\ncdict['rep_def'] = rep_def\n\ntxt = ihtml_to_html(None, rep_def.to_html_rec)\nt = Template(txt)\nc = RequestContext(request,cdict)\n\nreturn HttpResponse(t.render(c))\n",
                    "u"
                ],
                [
                    false,
                    null,
                    null,
                    "move_up",
                    "pk",
                    "U",
                    "Report",
                    null,
                    "return move_rep(request, pk, \"-1\")\n",
                    "r"
                ],
                [
                    false,
                    null,
                    null,
                    "move_down",
                    "pk",
                    "U",
                    "Report",
                    null,
                    "return move_rep(request, pk, \"+1\")",
                    "r"
                ],
                [
                    false,
                    null,
                    null,
                    "edit__rep2",
                    "dochead_id",
                    "U",
                    "table/Report/(?P<dochead_id>\\d+)/edit__rep2/$",
                    "{}",
                    "reps = models.Report.objects.filter(order=dochead_id)\nif reps.count()>0:\n    new_url = make_href(\"/schreports/table/Report/%d/edit__rep/\" % reps[0].id)\n    return HttpResponseRedirect(new_url)\nelse:\n    return HttpResponse(\"Error - report doesn't exist\")",
                    "u"
                ],
                [
                    false,
                    null,
                    null,
                    "repaction",
                    "dochead_id, rep_action",
                    "U",
                    "table/Report/(?P<dochead_id>\\d+)/repaction/(?P<rep_action>\\w+)/$",
                    "{}",
                    "doc = DocHead.objects.get(pk=dochead_id)\nreps = models.Report.objects.filter(order=doc.id, parent=None)\nif reps.count()>0:\n    url = make_href(\"/schreports/table/Report/%d/%s/\" % (reps[0].id, rep_action.replace('__','/')))\n    return HttpResponseRedirect(url)\nelse:\n    return HttpResponse(\"Error - document: %d doesn't exists\" % dochead_id)\n    \n",
                    "u"
                ],
                [
                    false,
                    null,
                    null,
                    "move_to",
                    "rep_id, to_pos",
                    "U",
                    "table/Report/(?P<rep_id>\\d+)/(?P<to_pos>\\d+)/action/move_to/$",
                    "{}",
                    "return move_rep(request, rep_id, int(to_pos))\n\n",
                    "u"
                ],
                [
                    false,
                    null,
                    null,
                    "plot_service",
                    "**argv",
                    "J",
                    "plot_service/(?P<name>\\w+)/$",
                    "{}",
                    "if 'param' in request.GET:\n    request_param = request.GET['param']\nelse:\n    request_param = None\n    \nparam = json_loads(request.body.decode('utf-8'))\n\naction = param['action']\nname = param['name']\n\nobjs = models.Plot.objects.filter(name=name)\nif len(objs) == 1:\n    obj = objs[0]\nelse:\n    obj = None\n\nif obj:\n    if action == 'get_config':\n        if obj.get_config:\n            tmp = \"def _get_config(request_param):\\n\" + \"\\n\".join([ \"    \" + pos for pos in obj.get_config.split('\\n')])\n            exec(tmp)\n            config = locals()['_get_config'](request_param)        \n        else:\n            config = {\n                'displayModeBar': False, \n                'showLink': False, \n                'displaylogo': False, \n                'scrollZoom': True, \n                'modeBarButtonsToRemove': ['sendDataToCloud'],\n            }\n        return config\n    elif action == 'get_data':\n        if obj.get_data:\n            tmp = \"def _get_data(request_param):\\n\" + \"\\n\".join([ \"    \" + pos for pos in obj.get_data.split('\\n')])\n            exec(tmp)\n            data = locals()['_get_data'](request_param)        \n        else:\n            data = {}\n        return data\n    elif action == 'get_layout':\n        if obj.get_layout:\n            tmp = \"def _get_layout(request_param):\\n\" + \"\\n\".join([ \"    \" + pos for pos in obj.get_layout.split('\\n')])\n            exec(tmp)\n            layout = locals()['_get_layout'](request_param)        \n        else:\n            layout = {}\n        return layout\n    elif action == 'on_event':\n        if obj.on_event:\n            tmp = \"def _on_event(data, request_param):\\n\" + \"\\n\".join([ \"    \" + pos for pos in obj.on_event.split('\\n')])\n            exec(tmp)\n            ret = locals()['_on_event'](param, request_param)                    \n            return ret\n        else:\n            return {}\n    else:\n        return { 'error': 'Action not found'}\n        \nreturn { 'error': 'Plot object not found'}\n",
                    "u"
                ],
                [
                    false,
                    null,
                    null,
                    "new_group",
                    "group_type, parent_id",
                    "U",
                    "new_group/(?P<group_type>\\w+)/(?P<parent_id>\\d+)/$",
                    "{}",
                    "#new_group/(?P<group_type>\\w+)/(?P<parent_id\\d+)/$\nif parent_id and int(parent_id)>0:\n    parent = models.CommonGroup.objects.get(id=int(parent_id))\nelse:\n    parent = None\ngroup = models.CommonGroup()\nif parent:\n    group.parent = parent\n    gparent  = parent\n    while gparent.parent:\n        gparent = gparent.parent\n    group.gparent =gparent\n    group.gp_group_def_name = gparent.group_def_name    \nelse:\n    group.gp_group_def_name = group_type\n    \ngroup.group_def_name = group_type\ngroup.save()\n\nif not group.gparent:\n    group.gparent = group\n    group.save()\n    \nurl = make_href(\"/schreports/table/CommonGroup/%d/edit__group/\" % group.id)\nreturn HttpResponseRedirect(url)\n",
                    "u"
                ],
                [
                    false,
                    null,
                    null,
                    "edit__group",
                    "group_id",
                    "U",
                    "table/CommonGroup/(?P<group_id>\\d+)/edit__group/$",
                    "{}",
                    "group = models.CommonGroup.objects.get(pk=group_id)\ngroup_def = models.CommonGroupDef.objects.get(name=group.group_def_name)\n\nif group_def.declaration:\n    form_class = form_from_str(group_def.declaration)\nelse:\n    return HttpResponse(\"ERROR\")\n    \nif request.POST or request.FILES:    \n    if request.method == 'POST':\n        form = form_class(request.POST, request.FILES)\n        if form.is_valid():\n            if group_def.save_fun:\n                exec(group_def.save_fun)\n                data = locals()['save'](form, group)\n            else:\n                data = form.cleaned_data\n            if 'title' in data:\n                group.title = data['title']\n                del data['title']\n            group._data = data\n            group._data['json_update'] = True\n            group.save()\n            url = make_path('ok')\n            return HttpResponseRedirect(url)\n    \nif not request.POST:\n    data = group.get_json_data()\n    \n    if group_def.load_fun:\n        exec(group_def.load_fun)\n        data_form = locals()['load'](data)\n    else:\n        data_form = data\n    data_form['title'] = group.title\n    form = form_class(initial=data_form)\n\nt = Template(ihtml_to_html(None, group_def.template))\nc = RequestContext(request, { 'form': form, 'group': group, 'group_def': group_def})\n\nreturn HttpResponse(t.render(c))\n",
                    "u"
                ],
                [
                    false,
                    null,
                    null,
                    "list_group_by_tag",
                    "group_tag",
                    "U",
                    "list_group_by_tag/(?P<group_tag>\\w+)/$",
                    "{}",
                    "groups = models.CommonGroup.objects.filter(tag_name=group_tag)\nif len(groups)>0:\n    group = groups[0]\n    url = make_href(\"/schreports/table/CommonGroup/%d/%d/form/tree/?only_content=1\" % (group.id, group.id))\nelse:\n    url = make_href(\"/schreports/table/CommonGroup/0/form/tree/?only_content=1\")\nreturn HttpResponseRedirect(url)    \n",
                    "u"
                ]
            ],
            [
                [
                    false,
                    null,
                    "ReportDef",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n%extends \"form.html\"\n\n%load exfiltry\n%load exsyntax\n\n%% pythoncode\n    script language=python\n        def signal_from_child(self, child, signal):\n            if signal=='set_bitmap_list':\n                bitmaps = {\n                }\n                child.set_bitmaps(bitmaps)\n\n        def filter_url(self, target, href):\n            return href\n\n%% all\n    %with table_type='datatable':\n        {{ block.super }}\n\n%% scroll\n\n%% list_content_actions\n    % new_row \"New report definition\"\n\n%% list_row_header\n    th...name\n    th...description\n\n%% list_row\n    td...{{object.name}}\n    td...{{object.description}}\n\n%% list_row_actions\n    % row_actions:\n        .edit\n        .field_edit/declaration,Declaration,declaration\n        .field_edit/template,Template,template\n        .field_edit/to_html_rec,To html row,to_html_rec\n        .field_edit/save_fun,Save function,save_fun\n        .field_edit/load_fun,Load function,load_fun\n        .delete\n\n%% row_edit\n    % form:\n        .app,name,description\n\n",
                    null,
                    null
                ],
                [
                    false,
                    null,
                    "Report",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n%extends \"form.html\"\n\n%load exfiltry\n%load exsyntax\n\n%% pythoncode\n    script language=python\n        def signal_from_child(self, child, signal):\n            if signal=='set_bitmap_list':\n                bitmaps = {\n                }\n                child.set_bitmaps(bitmaps)\n\n        def filter_url(self, target, href):\n            return href\n\n%% all\n    %with table_type='simple':\n        {{ block.super }}\n\n%% scroll\n\n%% list_content_actions    \n    div class=tr d-inline\n        .New: \n        % for pos in object_list.model.get_rep_types:        \n            % new_row_inline pos \"\" \"\" \"\" \"\" \"../../../../../new_rep/\"|append_str:pos|append_str:\"/0/\" \n\n\n%% list_row_header\n    th...Report type\n    th...Date\n\n%% list_row\n    td...{{object.report_def_name}}\n    td...{{object.date|isoformat}}\n\n\n%% list_row_actions\n    % row_actions:\n        .edit-inline,_(Update),,,,,../../../../../../schreports/table/Report/{id}/edit__rep/        \n        .pdf\n        .odf        \n        .field_edit/data,Data,data        \n        .delete\n\n%% row_edit\n    % form:\n        \"parent\", \"parent_field_name\", \"order\", \"report_def_name\", \"date\"\n\n%% dialog_type\n    .modal-max\n",
                    null,
                    null
                ],
                [
                    false,
                    null,
                    "subreport",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n\n%load exfiltry\n%load exsyntax\n    \n% subform href\n\n%% dialog_type\n    .modal-max\n",
                    null,
                    null
                ],
                [
                    false,
                    null,
                    "v_edit_subrep",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n\n%load exfiltry\n%load exsyntax\n\n    div class=form-group\n        %% header_new_button\n            div class=row\n                div class=tr d-inline\n                    % new_row \"+ \"|append_str:rep_def.description \"\" \"\" \"\" \"-\" \"{{base_path}}schreports/new_subrep/\"|append_str:parent_rep.id|append_str:\"/\"|append_str:rep_type|append_str:\"/\"            \n        \n        div class=row\n            %% header\n            \n            % for object in reports:\n                div \n                    %% rep_line\n                    div class=fab,,,style=transform:scale(0.5); -webkit-transform:scale(0.5); -moz-transform:scale(0.5); -o-transform:scale(0.5); margin-left: -40px;\n                        nav class=menu\n                            input type=checkbox,,,href=#,,,class=menu-open,,,name=menu-open,,,id=menu-open-subrep-{{forloop.counter0}}\n                            label class=menu-open-button,,,for=menu-open-subrep-{{forloop.counter0}},,,draggable=true,,,ondrop=subreport_drop(event,'{{base_path}}');,,,ondragstart=subreport_dragstart(event);,,,ondragenter=subreport_ondragenter(event);,,,ondragleave=subreport_ondragleave(event);,,,ondragover=subreport_ondragover(event);,,,name={{object.id}}\n                                h4...{{forloop.counter}}\n                                span class=fa fa-bars fa-3x\n                                \n                            a class=menu-item,,,data-inline=,,,true,,,href={{base_path}}schreports/table/Report/{{object.id}}/action/move_up/,,,name=move_up,,,title=Move up,,,target=refresh_frame\n                                i class=fa fa-hand-o-left fa-2x\n\n                            a class=menu-item bg-primary popup,,,href={{base_path}}schreports/table/Report/{{object.id}}/edit__rep/,,,name=update/inline,,,title=update,,,target=popup_edit\n                                i class=fa fa-pencil-square-o fa-2x\n                                \n                            a class=menu-item bg-danger popup,,,href={{base_path}}schreports/table/Report/{{object.id}}/delete/,,,name=delete,,,title=delete,,,target=popup_delete\n                                i class=fa fa-trash-o fa-2x\n                                                                                                \n                            a class=menu-item,,,data-inline=true,,,href={{base_path}}schreports/table/Report/{{object.id}}/action/move_down/,,,name=move_down,,,title=Move down,,,target=refresh_frame\n                                i class=fa fa-hand-o-right fa-2x\n                                \n\n                                \n                                                    \n            %% footer\n            \n        %% footer_new_button\n            div class=row\n                div class=tr d-inline\n                    % new_row \"+ \"|append_str:rep_def.description \"\" \"\" \"\" \"-\" \"{{base_path}}schreports/new_subrep/\"|append_str:parent_rep.id|append_str:\"/\"|append_str:rep_type|append_str:\"/\"            \n",
                    null,
                    null
                ],
                [
                    false,
                    null,
                    "Form_FilterFormReport",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n% extends \"forms/user_tab.html\"\n\n% load exfiltry\n% load exsyntax\n\n\n%% all\n    %with show_title_bar=1 title='<<form_title>>'\n        {{ block.super }}\n\n\n%% user_header\n    th...<<col_name1>>\n    th...<<col_name2>>\n    th...<<col_name3>>\n\n\n%% user_row\n    tr\n        td... {{object.0}}\n        td align=right... {{object.1|floatnullformat}}\n        td align=right... {{object.2|to_int}}\n\n",
                    null,
                    null
                ],
                [
                    false,
                    null,
                    "report_pdf",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n%extends \"base_pdf.html\"\n\n%load exfiltry\n%load exsyntax\n%load subreport\n\n%% css\n    style type=text/css{:}\n        body:\n            font-family:sans-serif\n            font-size:80%\n            padding:20\n\n        table:\n            border:0\n            vertical-align:top\n            padding:3\n\n        td table:\n            padding: 1\n            border: 0\n\n        th:\n            cellpadding:3\n            font-weight:bold\n            border: 0\n\n        td:\n            vertical-align:top\n            cellpadding:3\n            border: 0\n\n        strong,b:\n            font-weight:bold\n\n        p:\n            cellpadding:2\n            border:0\n            width:100%\n\n        a:\n            color:#0000ff\n            text-decoration: underline\n\n        strong a:\n            color:#00ffff\n\n        ul:\n            border:0\n\n        li:\n            cellpadding:5\n            width:95%-60\n\n        ul li:\n            font-style: italic\n\n        em:\n            font-style: italic\n\n        b:\n            font-weight: bold\n\n        td:hover.test:\n            bgcolor: #ff0000\n\n        h1:\n            font-size:300%\n            font-weight:bold\n            cellpadding:12 2 12 2\n\n        h2:\n            font-size:240%\n            font-weight:bold\n            cellpadding:10 2 50 2\n\n        h3:\n            font-size:190%\n            font-weight: bold\n            cellpadding:8 2 8 2\n            width: 100%\n            align: center\n\n        h4:\n            font-size:150%\n            font-weight: bold\n            cellpadding:6 2 6 2\n\n        h5:\n            font-size:120%\n            font-weight: bold\n            cellpadding:4 2 4 2\n\n        h6:\n            font-size:100%\n            font-weight: bold\n            cellpadding:2 2 2 2\n\n\n        table.tabdel:\n            border:1\n            width:100%\n\n        table.tabdel tr th:\n            bgcolor:#ccc\n            border:1\n            padding:5\n            cellpadding:5\n\n        table.tabdel tr td:\n            bgcolor:#eee\n            border:1\n            padding:5\n            cellpadding:5\n\n        .helptext:\n            font-size:120%\n            font-style:italic\n            \n        i:\n            font-style:italic\n            \n        .podpis:\n            align: center\n\n        table.simple:\n            border:0\n            padding:0\n        \n        table.simple tr td:\n            cellpadding:0\n            \n        table.tab_header:\n            font-size:60%\n        \n        table.with_border:\n            border:1\n            \n        table.with_border tr td:\n            border:1\n            margins:1\n        \n        table.for_img:\n            border:1\n            margins:0\n            padding:0\n            \n            \n        table.for_img tr td:\n            border:1\n            margins:0\n            padding:0\n            cellpadding:0\n\n        img:\n            margins:0\n            padding:0\n        \n        td.x11:\n            width: 69\n            height: 69\n            margins: 0\n            padding: 0\n        \n        td.x21:\n            width: 138\n            height: 69\n            margins: 0\n            padding: 0\n\n        td.x12:\n            width: 69\n            height: 138\n            margins: 0\n            padding: 0\n        \n        td.x22:\n            width: 138\n            height: 138\n            margins: 0\n            padding: 0\n\n        td.x23:\n            width: 138\n            height: 207\n            margins: 0\n            padding: 0\n\n        td.x11 img:\n            width: 67\n            height: 67\n            margins: 0\n            padding: 0\n        \n        td.x21 img:\n            width: 136\n            height: 67\n            margins: 0\n            padding: 0\n\n        td.x12 img:\n            width: 67\n            height: 136\n            margins: 0\n            padding: 0\n        \n        td.x22 img:\n            width: 136\n            height: 136\n            margins: 0\n            padding: 0\n\n        td.x23 img:\n            width: 136\n            height: 205\n            margins: 0\n            padding: 0\n\n        img.checkbox:\n            width: 12\n            height: 12\n            margin: 20\n\n%% page_setup\n    page\n        %% page_header\n            header height=100        \n                table width=100%,,,class=tab_header\n                    tr\n                        td width=25%\n                            .POLBRUK S.A.\n                        td width=50%\n                            .BEZPIECZE\u0143STWO I CHIGIENA PRACY\n                        td width=25%\n                            .Linia: {{object.json_nag1}}\n                    tr\n                        td...NAZWA PROCESU:\n                        td...{{object.json_nag2}}\n                        td...X\n                    tr\n                        td...NUMER DOKUMENTU: {{object.json_st1}}\n                        td\n                            table width=50%,,,class=simple\n                                tr \n                                    td width=50%\n                                        .WYDANIE: {{object.json_st2}}\n                                    td width=50%\n                                        .DATA WYDANIA: {{object.json_st3}}\n                        td...\u0141\u0105czny czas trwania:\n        %% page_footer\n\n\n%% content \n\n    table width=100%,,,class=with_border\n        tr height=100\n            td width=33%,,,height=40\n                .Opracowa\u0142:\n            td  width=33%\n                .Sprawdzi\u0142:\n            td width=34%\n                .Zatwierdzi\u0142:\n        tr \n            td height=40\n                .Data i podpis:\n            td...Data i podpis:\n            td...Data i podpis:\n        \n    p...{{object.json_ostrz1}}\n    p...{{object.json_ostrz2}}\n    \n    %check object.json_so1\n    .X1 <br>                \n                \n    table width=100%,,,class=simple\n        %for subrep in object|args:\"etap\"|call:\"getsubreps\":\n            %if forloop.counter0|divisibleby:\"4\":\n                <tr>            \n            td width=25%\n                table class=for_img\n                    %if subrep.json_view_type == '1234'    \n                            tr \n                                td class=x11\n                                    img src=data:image/png;base64,{{ subrep.json_obrazek1 }}\n                                td class=x11\n                                    img src=data:image/png;base64,{{ subrep.json_obrazek2 }}\n                            tr \n                                td class=x11\n                                    img src=data:image/png;base64,{{ subrep.json_obrazek3 }}\n                                td class=x11\n                                    img src=data:image/png;base64,{{ subrep.json_obrazek4 }}\n                            tr\n                                td colspan=2,,,class=x21                                    \n                                    {{ subrep.json_opis }}\n                        %elif subrep.json_view_type == '1123'\n                            tr \n                                td colspan=2,,,class=x21\n                                    img src=data:image/png;base64,{{ subrep.json_obrazek1 }}\n                            tr\n                                td class=x11\n                                    img src=data:image/png;base64,{{ subrep.json_obrazek2 }}\n                                td class=x11\n                                    img src=data:image/png;base64,{{ subrep.json_obrazek3 }}\n                            tr\n                                td colspan=2,,,class=x21\n                                    {{ subrep.json_opis }}\n                        %elif subrep.json_view_type == '1213'\n                            tr\n                                td rowspan=2,,,class=x12\n                                    img src=data:image/png;base64,{{ subrep.json_obrazek1 }}\n                                td class=x11\n                                    img src=data:image/png;base64,{{ subrep.json_obrazek2 }}\n                            tr \n                                td class=x11\n                                    img src=data:image/png;base64,{{ subrep.json_obrazek3 }}\n                            tr \n                                td colspan=2,,,class=x21\n                                    {{ subrep.json_opis }}\n                        %elif subrep.json_view_type == '1122'\n                            tr\n                                td class=x21\n                                    img src=data:image/png;base64,{{ subrep.json_obrazek1 }}\n                            tr \n                                td class=x21\n                                    img src=data:image/png;base64,{{ subrep.json_obrazek2 }}\n                            tr \n                                td class=x21\n                                    {{ subrep.json_opis }}\n                        %elif subrep.json_view_type == '1212'\n                            tr\n                                td class=x12\n                                    img src=data:image/png;base64,{{ subrep.json_obrazek1 }}\n                                td class=x12\n                                    img src=data:image/png;base64,{{ subrep.json_obrazek2 }}\n                            tr \n                                td colspan=2,,,class=x21\n                                    {{ subrep.json_opis }}\n                        %elif subrep.json_view_type == '1111'\n                            tr \n                                td  class=x22\n                                    img src=data:image/png;base64,{{ subrep.json_obrazek1 }}\n                            tr \n                                td class=x21\n                                    {{ subrep.json_opis }}\n                        %elif subrep.json_view_type == '0000'\n                            tr \n                                td class=x23\n                                    {{ subrep.json_opis }}\n                        %else\n                            tr \n                                td class=x23\n                                    {{ subrep.json_opis }}                \n\n            %if forloop.counter0|add:\"1\"|divisibleby:\"4\" or forloop.last:\n                </tr>\n        \n    table width=100%,,,class=tab_body\n        tr\n            td width=25%\n                strong...Sprz\u0119t ochronny: \n                <br>\n                %check object.json_so1 \"ochronniki s\u0142uchu<br>\" \n                %check object.json_so2 \"maski przeciwpy\u0142owe<br>\" \n                %check object.json_so3 \"maski przeciwchemiczne<br>\" \n                %check object.json_so4 \"szelki i linka bezpiecze\u0144stwa<br>\" \n                %check object.json_so5 \"okulary ochronne<br>\" \n                %check object.json_so6 \"r\u0119kawice ochronne<br>\" \n                %check object.json_so7 \"kask ochronny<br>\" \n                %check object.json_so8 \"dzie\u017c, obuwie i sprz\u0119t ochronny w EX<br>\" \n                %check object.json_so9 \"inny sprz\u0119t ochronny <br>\" \n                <br>&nbsp;<br>\n                strong...Sprz\u0119t specjalistyczny\n                <br>\n                %check object.json_ss1 \"drabina <br>\" \n                %check object.json_ss2 \"pomost <br>\" \n                %check object.json_ss3 \"rusztowanie <br>\" \n                %check object.json_ss4 \"wysi\u0119gnik z koszem <br>\" \n                %check object.json_ss5 \"podno\u015bniki/wci\u0105gniki <br>\" \n                %check object.json_ss6 \"w\u00f3zek wid\u0142owy <br>\" \n                %check object.json_ss7 \"zawiesie <br>\" \n                <br>&nbsp;<br>\n                strong...Stosowane substancje niebezpieczne\n                <br>\n                .Nazwa: {{sn1}} <br>\n                %check object.json_sn2 \"karty substancji niebezpiecznych <br>\"\n\n            td width=75%\n                table width=100%\n                    tr\n                        td width=33%\n                            .Prace na wysoko\u015bci:\n                        td width=67%\n                            table width=100%\n                                tr\n                                    td width=50%\n                                        .Szczeg\u00f3lne zabezpieczenia w przestrzeniach zamkni\u0119tych\n                                    td width=50%\n                                        .X\n\n    table width=100%,,,class=podpisy            \n        tr\n            td class=podpis...<br />.........................................................................\n            td class=podpis...<br />.........................................................................\n        tr\n            td class=podpis...(sporz\u0105dzi\u0142 \u2013 data i podpis) \n            td class=podpis...(zatwierdzi\u0142 \u2013 data i podpis)              \n        tr\n            td height=80\n            td\n        tr\n            td class=podpis...<br />.........................................................................\n            td\n        tr\n            td class=podpis...(wykona\u0142 - data i podpis)\n            td\n            ",
                    null,
                    null
                ],
                [
                    false,
                    null,
                    "check",
                    null,
                    "% if is_checked:\n    img class=checkbox,,,src=file:///static/fonts/font-awesome/fonts/32x32/check.png\n% else:\n    img class=checkbox,,,src=file:///static/fonts/font-awesome/fonts/32x32/square-o.png\n&nbsp;&nbsp;{{title|safe}}",
                    null,
                    null
                ],
                [
                    false,
                    null,
                    "Plot",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n%extends \"form.html\"\n\n%load exfiltry\n%load exsyntax\n\n%% pythoncode\n    script language=python\n        def signal_from_child(self, child, signal):\n            if signal=='set_bitmap_list':\n                bitmaps = {\n                }\n                child.set_bitmaps(bitmaps)\n\n        def filter_url(self, target, href):\n            return href\n\n%% all\n    %with table_type='datatable':\n        {{ block.super }}\n\n%% scroll\n\n%% list_content_actions\n    % new_row \"New plot\"\n\n%% list_row_header\n    th...name\n    th...group\n    th...permission\n\n%% list_row\n    td...{{object.name}}\n    td...{{object.group}}\n    td...{{object.permission}}\n\n\n%% list_row_actions\n    % row_actions:\n        .edit\n        .field_edit/get_config,Get config,get_config\n        .field_edit/get_data,Get data,get_data\n        .field_edit/get_layout,Get layout,get_layout\n        .field_edit/on_event,On event,on_event\n        .delete\n\n%% row_edit\n    % form:\n",
                    null,
                    null
                ],
                [
                    false,
                    null,
                    "CommonGroup",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n%extends \"forms/tree.html\"\n\n%load exfiltry\n%load exsyntax\n\n%% pythoncode\n    script language=python\n        def signal_from_child(self, child, signal):\n            if signal=='set_bitmap_list':\n                bitmaps = {\n                }\n                child.set_bitmaps(bitmaps)\n\n        def filter_url(self, target, href):\n            return href\n\n%% all\n    %with form_width=800 form_height=600 table_type='simple' title=_(\"Common Groups\"):\n        {{ block.super }}\n\n%% list_content_actions_new_row\n    div class=tr d-inline\n        % with object_list.model|args:parent_pk|call:\"get_group_types\" as tab:\n            % if tab:\n                ._(New): \n                % for pos in tab:\n                    % new_row_inline pos.description \"\" \"\" \"\" \"\" table_path|append_str:\"../../new_group/\"|append_str:pos.name|append_str:\"/\"|append_str:parent_pk|append_str:\"/\"\n\n%% list_row_header\n    th...Title\n\n%% list_row\n    td...{{object.to_str|safe }}\n        \n%% list_row_actions\n    % if object.get_def.action_template:\n        {% subtemplate object.get_def.get_action_template %}\n    % else:\n        % row_actions:\n            .edit-inline,_(Update),,,,,../../../../../../schreports/table/CommonGroup/{id}/edit__group/\n            .pdf\n            .odf        \n            .field_edit/data,Data,data        \n            .delete\n\n%% row_edit\n    % form:\n        \n",
                    null,
                    null
                ],
                [
                    false,
                    null,
                    "CommonGroupDef",
                    null,
                    "{# -*- coding: utf-8 -*- #}\n%extends \"form.html\"\n\n%load exfiltry\n%load exsyntax\n\n%% pythoncode\n    script language=python\n        def signal_from_child(self, child, signal):\n            if signal=='set_bitmap_list':\n                bitmaps = {\n                }\n                child.set_bitmaps(bitmaps)\n\n        def filter_url(self, target, href):\n            return href\n\n%% all\n    %with table_type='datatable':\n        {{ block.super }}\n\n%% scroll\n\n%% list_content_actions\n    % new_row \"New group definition\"\n\n%% list_row_header\n    th...Name\n    th...Description\n    th...Main group\n\n%% list_row\n    td...{{object.name}}\n    td...{{object.description}}\n    td...{{object.main_group}}\n\n%% list_row_actions\n    % row_actions:\n        .edit\n        .field_edit/declaration,Declaration,declaration\n        .field_edit/template,Template,template\n        .field_edit/to_html_rec,To html row,to_html_rec\n        .field_edit/save_fun,Save function,save_fun\n        .field_edit/load_fun,Load function,load_fun\n        .field_edit/on_new_elem_event,On new element,on_new_elem_event\n        .field_edit/allowed_new_fields,Allowed new fields,allowed_new_fields\n        .field_edit/to_str_fun,Convert to string function,to_str_fun\n        .field_edit/action_template,Action template,action_template\n        .delete\n\n%% row_edit\n    % form:\n        .app,name,description,main_group\n\n",
                    null,
                    null
                ]
            ],
            [
                [
                    "client://actions/document-properties.png",
                    null,
                    "1",
                    "Report definition",
                    null,
                    "table/ReportDef/-/form/list/",
                    "desktop"
                ],
                [
                    "client://actions/format-justify-fill.png",
                    null,
                    "1",
                    "Reports",
                    null,
                    "table/Report/main_reports/form/list/",
                    "desktop"
                ],
                [
                    "fa://pencil-square.png",
                    null,
                    "1",
                    "Plots",
                    null,
                    "table/Plot/-/form/list/",
                    "desktop"
                ],
                [
                    "png://apps/system-file-manager.png",
                    null,
                    "1",
                    "Common group definitons",
                    null,
                    "table/CommonGroupDef/-/form/list/",
                    "desktop"
                ],
                [
                    "png://apps/system-file-manager.png",
                    null,
                    "1",
                    "Common groups",
                    null,
                    "table/CommonGroup/0/form/tree/",
                    "desktop"
                ]
            ],
            [
                [
                    [
                        false,
                        "",
                        "def process_empty_or_invalid(self, request, queryset):\n    return queryset.filter(date__gte = year_ago())\n",
                        "",
                        null,
                        "_FilterFormReport",
                        "date_from = self.cleaned_data['date_from']\ndate_to = self.cleaned_data['date_to']\n\nif date_from:\n    queryset = queryset.filter(date__gte = date_from)\nif date_to:\n    queryset = queryset.filter(date__lte = date_to)\nreturn queryset\n"
                    ],
                    [
                        [
                            null,
                            null,
                            "year_ago",
                            "Data od",
                            "date_from",
                            null,
                            null,
                            "DateField",
                            null
                        ],
                        [
                            null,
                            null,
                            null,
                            "Data do",
                            "date_to",
                            null,
                            true,
                            "DateField",
                            null
                        ]
                    ]
                ]
            ],
            [],
            [],
            [
                [
                    "from base64 import b64encode\nimport io\nimport re\nimport itertools\nimport html\n\nfrom django import template\nfrom django.utils.translation import gettext_lazy as _\nfrom django.template.loader import get_template\nfrom django.template import Context, Template, RequestContext\nfrom django.conf import settings\nfrom django.utils.safestring import mark_safe\nfrom django.forms.widgets import CheckboxSelectMultiple\nfrom django.template.base import token_kwargs, TemplateSyntaxError\nfrom django.template.base import Node\n\nfrom pytigon_lib.schhtml.parser import Parser\nfrom pytigon_lib.schtools.wiki import wiki_from_str\nfrom pytigon_lib.schdjangoext.tools import make_href\n\nregister = template.Library()\n\ndef inclusion_tag(file_name):\n    def dec(func):\n        def func2(context, *argi, **argv):\n            ret = func(context, *argi, **argv)\n            t = get_template(file_name)\n            return t.render(ret, context.request)\n        return register.simple_tag(takes_context=True, name=getattr(func, '_decorated_function', func).__name__)(func2)\n    return dec\n\n@inclusion_tag('schreports/subreport.html')\ndef subrep(context, name, type):\n    rep = context['rep']\n    rep_def = context['rep_def']\n    url = make_href(\"/schreports/edit_subrep/%d/%s/%s/\" % (rep.id, name, type))\n    return { 'href':  url }\n\n@inclusion_tag('schreports/check.html')\ndef check(context, is_checked, title=\"\"):\n    return { 'is_checked':  is_checked, 'title': title }\n",
                    "t",
                    "subreport"
                ]
            ]
        ],
        [
            [
                "",
                null,
                "png://apps/preferences-desktop-theme.png",
                null,
                "1",
                null,
                null,
                "from django.contrib.auth import get_user_model\nfrom django.db.models.signals import post_save, pre_delete\nfrom django.dispatch import receiver\nfrom schelements.models import Element \nfrom django.contrib import admin\nfrom django.contrib.auth.admin import UserAdmin as BaseUserAdmin\nfrom pytigon_lib.schtools.tools import get_request\n\ndef limit_owner():\n    return {}\n    \ndef limit_config():\n    return {}\n        \nLIMIT_OWNER = OverwritableCallable(limit_owner)\nLIMIT_CONFIG = OverwritableCallable(limit_config)\n\ndef set_active_variant(user, value):\n    pass\n\ndef get_active_variant(user):\n    return None\n\ndef get_active_variant_description(user):\n    return None\n\ndef get_all_variants(user):\n    return []\n\nSET_ACTIVE_VARIANT = OverwritableCallable(set_active_variant)\nGET_ACTIVE_VARIANT = OverwritableCallable(get_active_variant)\nGET_ACTIVE_VARIANT_DESCRIPTION = OverwritableCallable(get_active_variant_description)\nGET_ALL_VARIANTS = OverwritableCallable(get_all_variants)\n\n$$$\n\nUSER_PROFILES = False\n\ndef init_user_profiles():\n    global USER_PROFILES\n    \n    if not USER_PROFILES:\n        USER_PROFILES = True\n        \n        @receiver(post_save, sender=get_user_model())\n        def create_user_profile(sender, instance, created, **kwargs):\n            if created:\n                Profile.objects.create(user=instance)\n\n        @receiver(post_save, sender=get_user_model())\n        def save_user_profile(sender, instance, **kwargs):\n            if hasattr(instance, \"profile\"):\n                instance.profile.save()\n            else:\n                Profile.objects.create(user=instance)\n\n\n        class UserWithProfileInline(admin.StackedInline):\n            model = Profile\n            can_delete = False\n            verbose_name_plural = 'Profile'\n\n\n        class UserAdmin(BaseUserAdmin):\n            inlines = (UserWithProfileInline,)\n\n\n        admin.site.unregister(get_user_model())\n        admin.site.register(get_user_model(), UserAdmin)\n\n",
                "Profile",
                "schprofile",
                true,
                "",
                "Profile",
                null,
                "",
                null
            ],
            [
                [
                    [
                        null,
                        null,
                        true,
                        null,
                        "Profile",
                        "['id']",
                        null,
                        "user = models.OneToOneField(get_user_model(), on_delete=models.CASCADE)\n\ndef set_active_variant(self, value):\n    request = get_request()\n    if request and request.user:\n        return SET_ACTIVE_VARIANT(request.user, value)\n    else:\n        return None\n\ndef get_active_variant(self):\n    request = get_request()\n    if request and request.user:\n        return GET_ACTIVE_VARIANT(request.user)\n    else:\n        return None\n\ndef get_active_variant_description(self):\n    request = get_request()\n    if request and request.user:\n        return GET_ACTIVE_VARIANT_DESCRIPTION(request.user)\n    else:\n        return None\n\ndef get_all_variants(self):\n    request = get_request()\n    if request and request.user:\n        return GET_ALL_VARIANTS(request.user)\n    else:\n        return None\n",
                        null,
                        "Profile",
                        "Profiles"
                    ],
                    [
                        [
                            true,
                            null,
                            false,
                            null,
                            "Owner",
                            true,
                            null,
                            "owner",
                            true,
                            "related_name=\"profile_owners\", limit_choices_to=LIMIT_OWNER",
                            "schelements.Element",
                            "PtigForeignKey",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Config",
                            true,
                            null,
                            "config",
                            true,
                            "related_name=\"profile_configs\",limit_choices_to=LIMIT_CONFIG",
                            "schelements.Element",
                            "PtigForeignKey",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "User type",
                            true,
                            null,
                            "user_type",
                            true,
                            "max_length=32",
                            null,
                            "CharField",
                            false,
                            null
                        ],
                        [
                            true,
                            null,
                            false,
                            null,
                            "Profile variant",
                            true,
                            null,
                            "variant",
                            true,
                            "max_length=64",
                            null,
                            "CharField",
                            false,
                            null
                        ]
                    ]
                ]
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ]
    ],
    [
        [
            "def subreport_dragstart(ev):\n    ev.dataTransfer.setData(\"text\", ev.target.getAttribute(\"name\"))                        \n\nwindow.subreport_dragstart = subreport_dragstart\n\ndef subreport_drop(ev, base_path):\n    ev.preventDefault()\n    if ev.target.tagName == 'LABEL':\n        target=ev.target\n    else:\n        target=ev.target.parentElement\n    \n    data = ev.dataTransfer.getData(\"text\")\n    data2 = target.getAttribute(\"name\")\n    if data2 != data:\n        href = base_path + 'schreports/table/Report/'+data+'/'+data2+'/action/move_to/'\n        def _callback(data):\n            window.refresh_ajax_frame(target)\n        window.ajax_get(href,_callback)\n        #ajax_get(href,standard_on_data(jQuery(target), href))\n\nwindow.subreport_drop = subreport_drop\n\ndef subreport_ondragenter(ev):\n    if ev.target.tagName == 'LABEL':\n        jQuery(ev.target).addClass('bg-success')\n\nwindow.subreport_ondragenter = subreport_ondragenter\n\ndef subreport_ondragleave(ev):\n    if ev.target.tagName == 'LABEL':\n        jQuery(ev.target).removeClass('bg-success')\n\nwindow.subreport_ondragleave = subreport_ondragleave\n\ndef subreport_ondragover(ev):\n    if ev.target.tagName == 'LABEL':\n        ev.preventDefault()\n    \nwindow.subreport_ondragover = subreport_ondragover\n",
            null,
            "subreport",
            "P"
        ]
    ]
]