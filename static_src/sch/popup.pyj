#import tools


def refresh_fragment(data_item_to_refresh, fun=None):
    refr_block = data_item_to_refresh.closest('.refr_object')
    if refr_block.hasClass('refr_target'):
        target = refr_block
    else:
        target = refr_block.find('.refr_target')
    src = refr_block.find('.refr_source')
    href = src.attr('href')
    if src.prop("tagName") == 'FORM':
        data = new FormData(src[0])
        def _refr2(data):
            target.html(data);
            fragment_init(target)
            if fun:
                fun();
        jQuery.ajax({'type': "POST", 'url': corect_href(href), 'data': data, contentType: False, processData: False,  'success': _refr2  })
    else:
        target.load(corect_href(href), None,
            def(responseText, status, response):
                pass
        )


def on_popup_inline(elem):
    nonlocal WAIT_ICON
    nonlocal COUNTER
    jQuery(elem).attr("data-style", "zoom-out")
    jQuery(elem).attr("data-spinner-color", "#FF0000")
    WAIT_ICON = Ladda.create(elem)
    if is_hybrid():
        cmd_to_python("href_to_elem|"+elem.href+"|#dialog-data")
        jQuery('div.dialog-form-info').modal()
    else:
        if WAIT_ICON:
            WAIT_ICON.start()

        jQuery(elem).closest('table').find(".inline_dialog").remove()

        COUNTER = COUNTER + 1
        id = COUNTER

        href2 = corect_href(jQuery(elem).attr("href"))
        new_fragment = jQuery("<tr class='refr_source inline_dialog hide' id='IDIAL_"+id+"' href='"+href2+"'><td colspan='20'>" + INLINE_TABLE_HTML + "</td></tr>")
        new_fragment.insertAfter(jQuery(elem).closest("tr"))
        elem2 = new_fragment.find(".refr_target")
        elem2.load(href2,None,
            def(responseText, status, response):
                nonlocal WAIT_ICON
                $('#IDIAL_'+id).hide()
                $('#IDIAL_'+id).removeClass('hide')
                $('#IDIAL_'+id).show("slow")
                if status!='error':
                    _dialog_loaded(False, elem2)
                    on_dialog_load()
                if WAIT_ICON:
                    WAIT_ICON.stop()
                    WAIT_ICON = None
        )
    return False

def on_popup_in_form(elem):
    nonlocal WAIT_ICON
    nonlocal COUNTER
    jQuery(elem).attr("data-style", "zoom-out")
    jQuery(elem).attr("data-spinner-color", "#FF0000")
    WAIT_ICON = Ladda.create(elem)
    if is_hybrid():
        cmd_to_python("href_to_elem|"+elem.href+"|#dialog-data")
        jQuery('div.dialog-form-info').modal()
    else:
        if WAIT_ICON:
            WAIT_ICON.start()

        jQuery(elem).closest('div.Dialog').find(".inline_dialog").remove()

        COUNTER = COUNTER + 1
        id = COUNTER

        href2 = corect_href(jQuery(elem).attr("href"))
        new_fragment = jQuery("<div class='refr_source inline_dialog hide' id='IDIAL_"+id+"' href='"+href2+"'>" + INLINE_TABLE_HTML + "</div>")
        new_fragment.insertAfter(jQuery(elem).closest("div.form-group"))
        elem2 = new_fragment.find(".refr_target")
        elem2.load(href2,None,
            def(responseText, status, response):
                nonlocal WAIT_ICON
                $('#IDIAL_'+id).hide()
                $('#IDIAL_'+id).removeClass('hide')
                $('#IDIAL_'+id).show("slow")
                if status!='error':
                    _dialog_loaded(False, elem2)
                    on_dialog_load()
                if WAIT_ICON:
                    WAIT_ICON.stop()
                    WAIT_ICON = None
        )
    return False


def on_popup_edit_new(elem):
    nonlocal WAIT_ICON
    jQuery(elem).attr("data-style", "zoom-out")
    jQuery(elem).attr("data-spinner-color", "#FF0000")
    WAIT_ICON = Ladda.create(elem)
    if is_hybrid():
        cmd_to_python("href_to_elem|"+elem.href+"|#dialog-data")
        jQuery('div.dialog-form').modal()
    else:
        if can_popup() and not jQuery(elem).hasClass('inline') and not ('_inline' in jQuery(elem).attr('name')) :
            elem2 = jQuery("div.dialog-data")
            elem2.closest(".refr_object").attr("related-object", jQuery(elem).uid())
            elem2.load(jQuery(elem).attr("href"), None,
                def(responseText, status, response):
                    if status!='error':
                        _dialog_loaded(True, elem2)
                        on_dialog_load()
            )
        else:
            if WAIT_ICON:
                WAIT_ICON.start()
            if jQuery(elem).hasClass('new-row'):
                elem2 = jQuery("<div class='refr_source inline_dialog tr hide'>" + INLINE_DIALOG_UPDATE_HTML + "</div>")
                elem2.insertAfter(jQuery(elem).closest("div.tr"))
            else:
                test = jQuery(elem).closest('form')
                if test.length > 0:
                    elem2 = jQuery("<div class='refr_source inline_dialog hide'>" + INLINE_DIALOG_UPDATE_HTML + "</div>")
                    elem2.insertAfter(jQuery(elem).closest("div.form-group"))
                else:
                    elem2 = jQuery("<tr class='inline_dialog hide'><td colspan='20'>" + INLINE_DIALOG_UPDATE_HTML + "</td></tr>")
                    elem2.insertAfter(jQuery(elem).closest("tr"))
            elem2.find('.modal-title').html(jQuery(elem).attr('title'))
            elem2.find(".refr_object").attr("related-object", jQuery(elem).uid())
            elem3 = elem2.find("div.dialog-data-inner")
            elem3.load(jQuery(elem).attr("href"),None,
                def(responseText, status, response):
                    nonlocal WAIT_ICON
                    elem2.hide()
                    elem2.removeClass('hide')
                    elem2.show("slow")
                    if status!='error':
                        _dialog_loaded(False, elem3)
                        on_dialog_load()
                    if WAIT_ICON:
                        WAIT_ICON.stop()
                        WAIT_ICON = None
            )
    return False



def on_popup_info(elem):
    if is_hybrid():
        cmd_to_python("href_to_elem|"+elem.href+"|#dialog-data-info")
        jQuery('div.dialog-form-info').modal()
    else:
        if can_popup():
            jQuery("div.dialog-data-info").load(jQuery(elem).attr("href"),None,
                def(responseText, status, response):
                    jQuery('div.dialog-form-info').modal()
            )
        else:
            jQuery(".inline_dialog").remove()
            jQuery("<tr class='inline_dialog'><td colspan='20'>" + INLINE_DIALOG_INFO_HTML + "</td></tr>").insertAfter(jQuery(elem).parents("tr"))
            jQuery("div.dialog-data-inner").load(jQuery(elem).attr("href"),None)

    return False


def on_popup_delete(elem):
    if is_hybrid():
        cmd_to_python("href_to_elem|"+elem.href+"|#dialog-data-delete")
        jQuery('div.dialog-form-delete').modal()
    else:       
        if can_popup():            
            jQuery("div.dialog-data-delete").closest(".refr_object").attr("related-object", jQuery(elem).uid())
            jQuery("div.dialog-data-delete").load(jQuery(elem).attr("href"),None,
                def(responseText, status, response):
                    jQuery('div.dialog-form-delete').modal()
                    jQuery("div.dialog-form-delete").fadeTo( "fast", 1)
            )
        else:
            jQuery(".inline_dialog").remove()            
            elem2 = jQuery("<tr class='inline_dialog'><td colspan='20'>" + INLINE_DIALOG_DELETE_HTML + "</td></tr>")
            elem2.insertAfter(jQuery(elem).parents("tr"))
            elem2.find(".refr_object").attr("related-object", jQuery(elem).uid())
            jQuery("div.dialog-data-inner").load(jQuery(elem).attr("href"),None)

    return False


def on_dialog_load():
    pass


def _dialog_loaded(is_modal, elem):
    #if is_modal:
    #    fragment_init(jQuery("div.dialog-form"))
    #    jQuery("div.dialog-form").fadeTo( "fast", 1)
    #    jQuery('div.dialog-form').modal()
    #    jQuery('div.dialog-form').drags({ "handle": ".modal-header" })
    
    fragment_init(elem)
    if is_modal:
        jQuery("div.dialog-form").fadeTo( "fast", 1)
        jQuery('div.dialog-form').modal()
        jQuery('div.dialog-form').drags({ "handle": ".modal-header" })


def dialog_ex_load2(responseText, status, response):
    if status!='error':
        _dialog_loaded(False)
        on_dialog_load()


def progressHandlingFunction(e):
    if e.lengthComputable:
        $('#progress').width(""+parseInt(100*e.loaded/e.total)+'%');


def xhr():
    myXhr = jQuery.ajaxSettings.xhr()
    if myXhr.upload:
        myXhr.upload.addEventListener('progress', progressHandlingFunction, False)
    return myXhr


def on_edit_ok(form):
    data = new FormData(form[0])
    if "multipart" in form.attr("enctype"):
        form.closest('div').append("<div class='progress progress-striped active'><div id='progress' class='progress-bar' role='progressbar' style='width: 0%;'></div></div>")
        jQuery.ajax({'type': "POST", 'url': corect_href(form.attr('action')), 'data': data, contentType: False, processData: False, 'xhr': xhr, 'success': def(data): _refresh_win_after_ok(data, form); })
    else:
        jQuery.ajax({'type': "POST", 'url': corect_href(form.attr('action')), 'data': data, contentType: False, processData: False,  'success': def(data): _refresh_win_after_ok(data, form); })
    return False


def on_delete_ok(form):
    jQuery.ajax({'type': "POST", 'url': corect_href(form.attr('action')), 'data': form.serialize(),'success': def(data): _refresh_win(data, form); })
    return False


def _refresh_win(responseText, ok_button):
    popup_activator = jQuery("#"+jQuery(ok_button).closest(".refr_object").attr("related-object"))
    if "RETURN_OK" in responseText:
        if not can_popup():
            if jQuery("div.dialog-form").hasClass('in'):
                dialog = "div.dialog-form"
            else: 
                if jQuery("div.dialog-form-delete").hasClass('in') :
                    dialog = "div.dialog-form-delete"
                else: 
                    dialog = "div.dialog-form-info"
            
            def hide_dialog_form():
                jQuery(dialog).modal('hide')
                
            refresh_fragment(popup_activator, hide_dialog_form)
            
            jQuery(dialog).fadeTo( "slow", 0.5 )
        else:
            refresh_fragment(popup_activator)
    else:
        if not can_popup():
            jQuery("div.dialog-data").html(responseText)
        else:
            ok_button.closest('.refr_target').html(responseText)

def _refresh_win_and_ret(responseText, ok_button):
    if "RETURN_OK" in responseText:
        if jQuery(ok_button).closest(".refr_object").hasClass('in'):
            jQuery("div.dialog-form").modal('hide')
        else:
            jQuery(ok_button).closest(".refr_object").remove()
        q = jQuery(responseText)
        eval(q[1].text)
    else:
        jQuery("div.dialog-data").html(responseText)


def _refresh_win_after_ok(responseText, ok_button):
    nonlocal EDIT_RET_FUNCTION
    if EDIT_RET_FUNCTION:
        EDIT_RET_FUNCTION(responseText, ok_button)
        EDIT_RET_FUNCTION = False
    else:
        _refresh_win(responseText, ok_button)


def on_cancel_inline(elem):
    jQuery(elem).closest('.inline_dialog').remove()
    #nonlocal ACTIVE_PAGE
    #ACTIVE_PAGE.page.find(".inline_dialog").remove()


def ret_ok(id, title):
    nonlocal RET_CONTROL
    RET_CONTROL.select2('data', {id: id, text: title}).trigger("change")
    RET_CONTROL.val(id.toString())
    RET_CONTROL[0].defaultValue = id.toString()

def on_get_tbl_value(elem):
    on_popup_in_form(elem)

def on_new_tbl_value(elem):
    nonlocal EDIT_RET_FUNCTION
    nonlocal RET_CONTROL
    EDIT_RET_FUNCTION = _refresh_win_and_ret
    RET_CONTROL = jQuery(elem).closest(".input-group").find('input._autoheavyselect2widgetext')
    return on_popup_edit_new(elem)

def on_get_row(elem):
    id = jQuery(elem).attr('data-id')
    text = jQuery(elem).attr('data-text')

    ret_control = jQuery(elem).closest(".refr_source").prev('.form-group').find('input._autoheavyselect2widgetext')

    ret_control.select2('data', {id: id, text: text}).trigger("change")
    ret_control.val(id.toString())
    ret_control[0].defaultValue = id.toString()

    jQuery(elem).closest(".refr_source").remove()

