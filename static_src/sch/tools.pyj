from schclient import cmd_to_python, is_hybrid, to_absolute_url, ret_submit


LOADED_FILES = {}

def ajax_submit(form, func):
    if is_hybrid():
        queryString = form.formSerialize()
        cmd_to_python('href_to_var??'+to_absolute_url(form.attr('action'))+'?'+queryString+'??RET_BUFOR')
        RET_OBJ = func
        cmd_to_python('run_js??ret_submit();')
    else:
        jQuery.ajax({'type': "POST", 'url': corect_href(form.attr('action')), 'data': form.serialize(), 'success': func })


def get_page(elem):
    if elem.hasClass('.tab-pane'):
        return elem
    else:
        return elem.closest('.tab-pane')


def get_table_type(elem):
    tabsort = get_page(elem).find('.tabsort')
    if tabsort.length>0:
        return tabsort.attr('table_type')
    else:
        return ""


def can_popup():
    if jQuery("div.dialog-form").hasClass('in') or jQuery("div.dialog-form-delete").hasClass('in') or jQuery("div.dialog-form-info").hasClass('in'):
        return False
    else:
        return True


def corect_href(href):
    if 'only_content' in href:
        return href
    else:
        if '?' in href:
            return href + '&only_content=1'
        else:
            return href + '?only_content=1'


def handle_class_click(fragment_obj, obj_class, fun):
    fragment_obj.on( "click", "."+obj_class,
        def(e):
            src_obj = jQuery(this)
            e.preventDefault()
            fun(this)
            return False
    )


def load_css(path):
    nonlocal LOADED_FILES
    if not (LOADED_FILES and path in LOADED_FILES):
        LOADED_FILES[path] = None
        req = new XMLHttpRequest()

        def _onload():
            jQuery('<style type="text/css"></style>').html(req.responseText).appendTo("head")

        req.onload = _onload

        req.open('GET', path, True)
        req.send('')


def on_load_js(path):
    nonlocal LOADED_FILES
    if LOADED_FILES and path in LOADED_FILES:
        functions = LOADED_FILES[path]
        if functions:
            for fun in functions:
                fun()
        LOADED_FILES[path] = None


def load_js(path, fun):
    nonlocal LOADED_FILES
    if LOADED_FILES and path in LOADED_FILES:
        if LOADED_FILES[path]:
            LOADED_FILES[path].push(fun)
        else:
            fun()
    else:
        LOADED_FILES[path] = [fun,]
        req = new XMLHttpRequest()
        def _onload():
            jQuery.globalEval(req.responseText)
            on_load_js(path)

        req.onload = _onload

        req.open('GET', path, True)
        req.send('')


def load_many_js(paths, fun):
    counter = 0

    def _fun():
        nonlocal counter
        counter = counter - 1
        if counter == 0:
            fun()

    for path in paths.split(paths, ';'):
        if path.lenght()>0:
            counter = counter + 1
            load_js(path, _fun):


