[
    [
        null,
        "",
        "auto",
        null,
        null,
        null,
        null,
        "tray",
        null,
        null,
        false,
        false,
        "schcomponents",
        null,
        false,
        null,
        "auto",
        null,
        "auto",
        "Standar components",
        null,
        ""
    ],
    [
        [
            [
                null,
                null,
                "",
                null,
                "Standard components",
                "standard_components",
                false,
                "",
                "Standard components",
                null,
                "\r\n",
                null
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ]
    ],
    [
        [
            "__pragma__ ('alias', 'S', '$')\n\n    \ndef _codeeditor(resolve, reject):\n    \n    base_path = window.BASE_PATH + 'static/vanillajs_plugins/ace/src-min'\n\n    def _on_loadjs():\n        props = ['width', 'height', 'value', 'title', 'href',]\n\n        template = \"\"\"\n        <div>\n            <div class=\"inline\" v-bind:style=\"style_inline\">\n                    <button v-bind:disabled=\"!changed\" v-on:click=\"save\" class=\"btn btn-sm btn-primary\" v-bind:style=\"style_btn\">\n                        <span class=\"fa fa-floppy-o\" />\n                    </button>\n            </div>\n            <div class=\"inline inline_title\" v-bind:style=\"style_title\">\n                <strong>{{ title }}</strong>\n            </div>\n            <div class=\"ceditor\" name=\"ceditor\"></div>\n        </div>    \n        \"\"\"\n\n        def data():\n            return {\n                'style_inline': {\n                    'display': 'inline-block',\n                },\n                'style_btn': {\n                    'margin-left': '0px',\n                },\n                'style_title': {\n                    'ma rgin-left': '10px',\n                },\n                'changed': False,\n            }\n\n        def mounted():\n            self = this\n            \n            ace.config.set('basePath', base_path);\n            editor = ace.edit(jQuery(this.S__el).find('div.ceditor')[0] )\n\n            rect = editor.container.getBoundingClientRect();            \n            editor.container.style.position = \"absolute\"\n            editor.container.style.top = (rect.top+2) + \"px\"\n            editor.container.style.right = \"5px\"\n            editor.container.style.bottom = \"5px\"\n            editor.container.style.left = \"5px\"\n\n            editor.setTheme(\"ace/theme/textmate\")\n            editor.getSession().setMode(\"ace/mode/python\")\n            editor.setOptions({'minLines': 32,});\n            def _on_input(e):\n                f = jQuery(':focus')\n                if f.length>0:\n                    tag = f.js_get(0).nodeName.toLowerCase()\n                else:\n                    tag == \"\"\n                if tag=='textarea':\n                    self.changed = True\n                else:\n                    def _on_timeout():\n                        editor.focus()\n                    setTimeout(_on_timeout, 0)\n            editor.on('input', _on_input)\n            if self.value:\n                editor.getSession().setValue(atob(self.value))\n            self.editor = editor\n            if window.hasOwnProperty('MOUNTED_COMPONENTS'):\n                window.MOUNTED_COMPONENTS += 1\n            \n        def save():\n            if this.href:\n                ajax_options = {\n                    'method': \"POST\",\n                    'url': this.href,\n                    'dataType': \"html\",\n                    'data': { 'data': self.editor.getValue() }\n                }        \n\n                def _on_ajax():\n                    self.changed = False\n                    \n                jQuery.ajax(ajax_options).done(_on_ajax)\n\n        methods = { 'save': save, }\n        \n        resolve({ 'props': props, 'template': template, 'mounted': mounted, 'data': data, 'methods': methods, })\n\n    load_js(base_path + '/ace.js', _on_loadjs)\n\nVue.component('sch-codeeditor', _codeeditor)\n\n",
            null,
            "code_editor",
            "R"
        ],
        [
            "__pragma__ ('alias', 'S', '$')\n\ndef mounted():\n    txtarea = jQuery(this.S__el)\n    txtarea.addClass(\"vue\")\n    \n    base_path = window.BASE_PATH + 'static/vanillajs_plugins/ace/src-min'\n    \n    def _on_loadjs():    \n        ace.config.set('basePath', base_path);\n        a = jQuery(\"<div></div>\")\n        txtarea.after(a)        \n        editor = ace.edit(a[0])\n        editor.setOptions({ 'maxLines': 32 })\n        editor.setTheme(\"ace/theme/textmate\")\n        editor.getSession().setMode(\"ace/mode/markdown\")\n        editor.getSession().setValue(txtarea.val())\n        txtarea.hide()\n        def _on_change():\n            txtarea.val(editor.getSession().getValue())\n            \n        editor.getSession().on('change', _on_change)\n        if window.hasOwnProperty('MOUNTED_COMPONENTS'):\n            window.MOUNTED_COMPONENTS += 1\n\n    \n        \n    load_js(base_path + '/ace.js', _on_loadjs)\n\n\ntarget = jQuery(\"body\")[0]\n\ndef process_mutations(mutations):\n    def _process_mutation(mutation):\n        newNodes = mutation.addedNodes\n        if newNodes != null:\n            nodes = jQuery(newNodes)\n            def _process_node():\n                node = jQuery( this )\n                txtarray = node.find('textarea.ceditor')\n                if txtarray.length>0 and not txtarray.hasClass('vue'):\n                    def _process_txt():\n                        vm = __new__(Vue( {'el': this, 'mounted': mounted } )) \n                    txtarray.each(_process_txt)\n            nodes.each(_process_node)\n    mutations.forEach(_process_mutation)\n    \nobserver = __new__(MutationObserver(process_mutations))\n\nconfig = { \n    'attributes': False, \n    'childList': True, \n    'characterData': True,\n    'subtree': True, \n}\n \nobserver.observe(target, config)\n ",
            null,
            "txtarea_editor",
            "R"
        ],
        [
            "__pragma__ ('alias', 'S', '$')\n\n    \ndef _htmleditor(resolve, reject):\n    \n    base_path = window.BASE_PATH + 'static/bootstrap_plugins/summernote'\n\n    def _on_loadjs():\n        props = ['width', 'height', 'value', 'title', 'href',]\n\n        template = \"\"\"\n        <div>\n            <div class=\"inline\" v-bind:style=\"style_inline\">\n                    <button v-bind:disabled=\"!changed\" v-on:click=\"save\" class=\"btn btn-sm btn-primary\" v-bind:style=\"style_btn\">\n                        <span class=\"fa fa-floppy-o\" />\n                    </button>\n            </div>\n            <div class=\"inline inline_title\" v-bind:style=\"style_title\">\n                <strong>{{ title }}</strong>\n            </div>\n            <div class=\"htmleditor\" name=\"htmleditor\"></div>\n        </div>    \n        \"\"\"\n\n        def data():\n            return {\n                'style_inline': {\n                    'display': 'inline-block',\n                },\n                'style_btn': {\n                    'margin-left': '0px',\n                },\n                'style_title': {\n                    'ma rgin-left': '10px',\n                },\n                'changed': False,\n            }\n\n        def mounted():\n            self = this\n            \n            editor = jQuery(this.S__el).find('div.htmleditor')            \n            rect = editor[0].getBoundingClientRect()\n            editor.css({ 'position':'absolute', 'top': (rect.top+2) + \"px\", 'bottom': '5px', 'left': '5px', 'right': '5px', })\n\n            if self.value:\n                editor.html(atob(self.value))\n                \n            editor.summernote()\n            self.editor = editor\n            if window.hasOwnProperty('MOUNTED_COMPONENTS'):\n                window.MOUNTED_COMPONENTS += 1\n            \n            \n        def save():\n            self = this\n            if this.href:\n                ajax_options = {\n                    'method': \"POST\",\n                    'url': this.href,\n                    'dataType': \"html\",\n                    'data': { 'data': self.editor.summernote('code') }\n                }        \n\n                def _on_ajax():\n                    self.changed = False\n                    \n                jQuery.ajax(ajax_options).done(_on_ajax)\n\n        methods = { 'save': save, }\n        \n        resolve({ 'props': props, 'template': template, 'mounted': mounted, 'data': data, 'methods': methods, })\n\n    load_js(base_path + '/summernote.min.js', _on_loadjs)\n    load_css(base_path + '/summernote.css')\n\nVue.component('sch-htmleditor', _htmleditor)\n",
            null,
            "summernote",
            "R"
        ],
        [
            "__pragma__ ('alias', 'S', '$')\ndef _handsontable(resolve, reject):\n    base_path = window.BASE_PATH + 'static/jquery_plugins'\n    def _on_loadjs():\n        props = ['width', 'height']\n        template = \"<div name='handsontablediv' v-bind:style='{ width: width, height: height }' ></div>\"\n        def mounted():\n            self = this\n            data = [['Column A', 'Column B', 'Column C'], ['1', '2', '3']]\n            htable = __new__ (window.Handsontable(this.S__el, { 'data': data }))\n            self.htable = htable\n            if window.hasOwnProperty('MOUNTED_COMPONENTS'):\n                window.MOUNTED_COMPONENTS += 1\n                        \n        resolve({ 'props': props, 'template': template, 'mounted': mounted})\n\n    load_js(base_path + '/handsontable.full.js', _on_loadjs)\n    load_css(base_path + '/handsontable.full.css')\n\nVue.component('sch-handsontable', _handsontable)\n",
            null,
            "handsontable",
            "R"
        ],
        [
            "__pragma__ ('alias', 'S', '$')\ndef _pivot(resolve, reject):\n    base_path = window.BASE_PATH + 'static/jquery_plugins/pivottable'\n    def _on_loadjs():\n        props = ['width', 'height']\n        template = \"<div name='pivotdiv' v-bind:style='{ width: width, height: height} ></div>\"\n        def mounted():\n            data = [\n                {'color': \"blue\", 'shape': \"circle\"},\n                {'color': \"red\", 'shape': \"triangle\"}\n            ]\n            options =  {\n                'rows': [\"color\"],\n                'cols': [\"shape\"]\n            }\n            pivottable = jQuery(this.S__el).pivotUI(data, options)\n            this.pivottable = pivottable\n            if window.hasOwnProperty('MOUNTED_COMPONENTS'):\n                window.MOUNTED_COMPONENTS += 1\n                        \n        resolve({ 'props': props, 'template': template, 'mounted': mounted})\n        \n    load_many_js(base_path + '/pivot.js' + \";\" + base_path+\"/../jquery.ui/jquery-ui.min.js\", _on_loadjs)\n    load_css(base_path + '/pivot.css')\n    \nVue.component('sch-pivottable', _pivot)\n",
            null,
            "pivottable",
            "R"
        ],
        [
            "__pragma__ ('alias', 'S', '$')\ndef _d3(resolve, reject):\n    base_path = window.BASE_PATH + 'static/vanillajs_plugins'\n    def _on_loadjs():\n        props = ['width', 'height']\n        template = \"<div name='d3div' v-bind:style='{ width: width, height: height}' ></div>\"\n        def mounted():\n            sampleSVG = d3.select(this.S__el).append(\"svg\").attr(\"width\", 100).attr(\"height\", 100)\n            def _on_mouseover():\n                d3.select(this).style(\"fill\", \"aliceblue\")\n            def _on_mouseout():\n                d3.select(this).style(\"fill\", \"white\")\n            sampleSVG.append(\"circle\").style(\"stroke\", \"gray\").style(\"fill\", \"white\").attr(\"r\", 40).attr(\"cx\", 50).attr(\"cy\", 50).on(\"mouseover\", _on_mouseover).on(\"mouseout\", _on_mouseout)\n            if window.hasOwnProperty('MOUNTED_COMPONENTS'):\n                window.MOUNTED_COMPONENTS += 1\n            \n        resolve({ 'props': props, 'template': template, 'mounted': mounted})\n\n    load_js(base_path + '/plotly-latest.min.js', _on_loadjs)\n\nVue.component('sch-d3', _d3)\n",
            null,
            "d3",
            "R"
        ],
        [
            "__pragma__ ('alias', 'S', '$')\n\ndef from_dict(d, name):\n    if name in d:\n        return d[name]\n    else:\n        return {}\n\ndef transform_event_data(data):\n    ret = {}\n    if 'destination' in data:\n        ret['destination'] = data['destination']\n    if 'event_name' in data:\n        ret['event_name'] = data['event_name']\n    if 'points' in data:\n        pp = []\n        for point in data['points']:\n            p = {}            \n            for key in ['curveNumber', 'pointNumber', 'x', 'y', 'z', 'lat', 'lon']:\n                if point.hasOwnProperty(key):\n                    p[key] = point[key]\n            pp.append(p)\n        ret['points'] = pp\n    return ret\n\ndef _plotly(resolve, reject):\n    base_path = window.BASE_PATH + 'static/vanillajs_plugins'\n    base_plotly_path = window.BASE_PATH + 'schreports/plot_service/'\n    def _on_loadjs():\n        props = ['width', 'height', 'plotlyName', 'param']\n        template = \"<div name='plotlydiv' v-bind:style='{ width: width, height: height} ></div>\"\n\n        def process_response_data(this_obj, data):\n            if 'redirect' in data and data['redirect']:\n                data['redirect'] = False                \n                global_vue_bus.S__emit('plotly', data)                \n            elif 'function' in data:\n                fun = data['function']\n                el = this_obj.S__el\n                layout = from_dict(data, 'layout')\n                if this_obj.width:\n                    layout['width'] = this_obj.width\n                if this_obj.height:\n                    layout['height'] = this_obj.height\n                                    \n                if fun == 'newPlot':\n                    Plotly.newPlot(el, from_dict(data, 'data'), layout, from_dict(data, 'config')) \n                elif fun == 'react':\n                    Plotly.react(el, from_dict(data, 'data'), layout, from_dict(data, 'config')) \n                elif fun == 'restyle':\n                    if 'traceIndices' in data:\n                        Plotly.restyle(el, from_dict(data, 'update'), from_dict(data, 'traceIndices'))\n                    else:\n                        Plotly.restyle(el, from_dict(data, 'update'))\n                elif fun == 'relayout':\n                    Plotly.relayout(el, from_dict(data, 'update'))\n                elif fun == 'update':\n                    if 'traceIndices' in data:\n                        Plotly.restyle(el, from_dict(data, 'data'), from_dict(data, 'layout'), from_dict(data, 'traceIndices'))\n                    else:\n                        Plotly.restyle(el, from_dict(data, 'data'), from_dict(data, 'layout'))\n                elif fun == 'addTraces':\n                    if 'id' in data:\n                        Plotly.addTraces(el, from_dict(data, 'traces'), data['id'])\n                    else:\n                        Plotly.addTraces(el, from_dict(data, 'traces'))\n                elif fun == 'deleteTraces':\n                    Plotly.deleteTraces(el, from_dict(data, 'traceIndices'))\n                elif fun == 'moveTraces':\n                    if 'id' in data:\n                        Plotly.moveTraces(el, from_dict(data, 'traceIndices'), data['id'])\n                    else:\n                        Plotly.moveTraces(el, from_dict(data, 'traceIndices'))\n                elif fun == 'extendTraces':\n                    Plotly.extendTraces(el, from_dict(data, 'traces'), from_dict(data, 'traceIndices'))\n                elif fun == 'prependTraces':                                            \n                    Plotly.prependTraces(el, from_dict(data, 'traces'), from_dict(data, 'traceIndices'))\n                elif fun == 'addFrames':\n                    pass\n                elif fun == 'animate':\n                    pass\n    \n        def mounted():\n            url = base_plotly_path + this.plotlyName + \"/\"\n            if this.param:\n                url += '?param='+this.param\n            this_obj = this\n\n            data = None\n            layout = None\n            config  = None\n            events = None\n            \n            def on_loaded():\n                nonlocal this_obj, data, layout, events\n                if this_obj.width:\n                    layout['width'] = this_obj.width\n                if this_obj.height:\n                    layout['height'] = this_obj.height\n                plot = Plotly.newPlot(this_obj.S__el, data, layout, { 'displayModeBar': True, 'showLink': False, 'displaylogo': False, 'scrollZoom': True, 'modeBarButtonsToRemove': ['sendDataToCloud', ] } );\n                this_obj.plot = plot\n                el = this_obj.S__el\n\n                if window.hasOwnProperty('MOUNTED_COMPONENTS'):\n                    window.MOUNTED_COMPONENTS += 1\n                \n                if events:\n                    # 'click','hover','unhover','selecting','selected','restyle','relayout',\n                    # 'autosize','deselect','doubleclick','redraw','animated', 'legendclick',\n                    # 'legenddoubleclick', 'afterplot'\n                    for pos in events:\n                        if '=>' in pos:\n                            x = pos.split('=>')\n                            def _callback(data1):\n                                nonlocal x\n                                data1['destination'] = x[1]\n                                data1['event_name'] = x[0]\n                                global_vue_bus.S__emit('plotly', data1) \n                            el.on('plotly_' + x[0], _callback)\n                        else:\n                            def make_callback(event_name):\n                                def _callback(data2):\n                                    nonlocal this_obj, url, event_name, el\n                                    data2['event_name'] = event_name\n                                    def _on_server_response(server_data):\n                                        nonlocal thisobj, event_name, data2\n                                        server_data['event_name'] = event_name\n                                        process_response_data(this_obj, server_data)\n                                    ajax_json(url, { 'name': this_obj.plotlyName, 'action':  'on_event', 'event_name': event_name, 'data': transform_event_data(data2) }, _on_server_response)\n                                return _callback                                \n                            el.on('plotly_' + pos, make_callback(pos))\n            \n            def on_data_loaded(_data):\n                global data, events, layout\n                data = _data['data']\n                if 'events' in _data:\n                    events = _data['events']\n                if layout != None:\n                    on_loaded()\n            \n            def on_layout_loaded(_data):\n                global data, layout\n                layout = _data\n                if data != None:\n                    on_loaded()\n            \n            ajax_json(url, { 'name': this_obj.plotlyName, 'action':  'get_data', }, on_data_loaded)\n            ajax_json(url, { 'name': this_obj.plotlyName, 'action':  'get_layout',}, on_layout_loaded)\n\n        def created():\n            this_obj = this\n            def on_event(data):\n                nonlocal this_obj\n                if 'destination' in data and data['destination'] == 'plotly/'+this_obj.plotlyName+\"/\":\n                    process_response_data(this_obj, data)\n                \n            global_vue_bus.S__on('plotly', on_event)\n        \n        resolve({ 'props': props, 'template': template, 'created': created, 'mounted': mounted})\n\n    load_js(base_path + '/plotly-latest.min.js', _on_loadjs)\n\nVue.component('sch-plotly', _plotly)\n",
            null,
            "plotly",
            "R"
        ],
        [
            "__pragma__ ('alias', 'S', '$')\n__pragma__ ('noalias', 'default') \n\n_marker = {\n    'props': ['x', 'y', 'txt'],\n    'template': ''\n}\n\nVue.component('sch-marker', _marker)\n\ndef _leaflet(resolve, reject):\n    base_path = window.BASE_PATH + 'static/vanillajs_plugins/leaflet'\n    def _on_loadjs():\n        props = ['width', 'height', 'x', 'y']\n        template = \"<div name='mapdiv' v-bind:style='{ width: width, height: height}' ></div>\"\n        \n        def mounted():\n            L.Icon.Default.imagePath = base_path+\"/images\"\n            mapobj = L.map(this.S__el).setView([this.x, this.y], 13)\n            L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', { 'attribution': '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'}).addTo(mapobj)\n            \n            def _process_slot(slot):\n                if slot.tag == 'sch-maker':\n                    maker = L.marker([slot.data.attrs.x, slot.data.attrs.y])\n                    maker.addTo(mapobj)\n                    maker.bindPopup(slot.data.attrs.txt)\n                    maker.openPopup()                \n            this.S__slots.default.forEach(_process_slot)\n            \n            \n            this.mapobj=mapobj\n            if window.hasOwnProperty('MOUNTED_COMPONENTS'):\n                window.MOUNTED_COMPONENTS += 1\n                        \n        resolve({ 'props': props, 'template': template, 'mounted': mounted})\n\n    load_js(base_path + '/leaflet.js', _on_loadjs)\n    load_css(base_path + '/leaflet.css')\n\nVue.component('sch-leaflet', _leaflet)\n",
            null,
            "leaflet",
            "R"
        ],
        [
            "__pragma__ ('alias', 'S', '$')\ndef _video(resolve, reject):\n    base_path = window.BASE_PATH + 'static/vanillajs_plugins/video-js'\n    def _on_loadjs():\n        props = ['width', 'height', 'src', 'type']\n        template = \"\"\"\n            <video name='videodiv' class='video-js vjs-default-skin' controls preload='auto' v-bind:style='{ width: width, height: height}'>\n                <source v-bind:src=this.src v-bind:type=this.type />\n                <p class='vjs-no-js'>To view this video please enable JavaScript, and consider upgrading to a web browser that <a href=\"http://videojs.com/html5-video-support/\" target=\"_blank\">supports HTML5 video</a></p>\n            </video>\n        \"\"\"\n        def mounted():\n            videojs.options.flash.swf = \"video-js.swf\"\n            def _on_video():\n                pass\n            player = videojs(this.S__el, {}, _on_video)\n            this.player = player\n            if window.hasOwnProperty('MOUNTED_COMPONENTS'):\n                window.MOUNTED_COMPONENTS += 1\n                        \n        resolve({ 'props': props, 'template': template, 'mounted': mounted})\n        \n    load_js(base_path + '/video.min.js', _on_loadjs)\n    load_css(base_path + '/video-js.min.css')\n    \nVue.component('sch-video', _video)\n",
            null,
            "video-js",
            "R"
        ],
        [
            "__pragma__ ('alias', 'S', '$')\n        \ndef _vseditor(resolve, reject):\n\n    TEMPLATE = \"\"\"\n    div class=vseditorbase\n        button v-bind:disabled=!changed,,,v-on:click=save,,,class=btn btn-sm btn-primary,,,style=position: absolute; z-index: 999;\n            span class=fa fa-floppy-o\n        div style=width:100%; position:absolute; top:10px; text-align:center\n            h5...{{ title }}\n        div class=vseditor,,,name=vseditor,,,style=position: absolute; top:50px; left:5px; right:5px; bottom:1px; overflow: hidden;\n    \"\"\"\n    \n    base_path = window.BASE_PATH + 'static/vanillajs_plugins/vs'\n\n    def _on_loadjs0():\n        def _on_loadjs():\n            props = ['width', 'height', 'value', 'title', 'href',]\n\n            def data():\n                return {\n                    'changed': False,\n                }\n\n            def mounted():\n                self = this\n                def _next():\n                    ed = jQuery(self.S__el).find('div.vseditor')\n                    value = decodeURIComponent(escape(atob(self.value)))\n                    self.editor = monaco.editor.create(ed[0], { 'value': value, 'language': 'python', 'theme': 'vs-dark', })\n                    ed.data( 'editor', self.editor)\n                    ed.data ('vue-editor', self)\n                    \n                    def _changed(event):\n                        self.changed = True\n                        \n                    self.editor.onDidChangeModelContent(_changed)\n                    \n                    def _on_resize(event):\n                        if ed.width()>50 and ed.height()>50:\n                            self.editor.layout()\n                        \n                    jQuery(window).resize(_on_resize)  \n \n                if window.hasOwnProperty('MOUNTED_COMPONENTS'):\n                    window.MOUNTED_COMPONENTS += 1\n\n                Vue.nextTick(_next)\n                                \n            def save(event):\n                self = this\n                if this.href:\n                    ajax_options = {\n                        'method': \"POST\",\n                        'url': this.href,\n                        'dataType': \"html\",\n                        'data': { 'data': this.editor.getValue() }\n                    }        \n\n                    def _on_ajax():\n                        nonlocal self\n                        self.changed = False\n                        \n                    jQuery.ajax(ajax_options).done(_on_ajax)\n\n            methods = { 'save': save, }\n            \n            resolve({ 'props': props, 'template': TEMPLATE, 'mounted': mounted, 'data': data, 'methods': methods, })\n        \n        \n        require.config({ 'paths': { 'vs': base_path }})\n        require(['vs/editor/editor.main'], _on_loadjs) \n                    \n    load_many_js(base_path + '/../../system/require.js' + \";\" + base_path + '/loader.js', _on_loadjs0)\n\n\nVue.component('sch-vseditor', _vseditor)\n\n",
            null,
            "vs_editor",
            "R"
        ],
        [
            "__pragma__ ('alias', 'S', '$')\n        \ndef _summertextarea(resolve, reject):\n\n    TEMPLATE = \"\"\"\n    div class=summertextareabase border rounded,,,v-bind:height=height\n        textarea class=summernotearea,,,v-bind:name=name,,,v-bind:id=id\n            p style=text-align:left;color:black; background:white;\n    \"\"\"\n    \n    base_path = window.BASE_PATH + 'static/bootstrap_plugins/summernote'\n\n    def _on_loadjs():\n        props = ['width', 'height', 'value', 'name', 'id']\n\n        def data():\n            return {\n            }\n\n        def mounted():\n            self = this\n            def _next():\n                ed = jQuery(self.S__el).find('textarea.summernotearea')\n                if self.height:\n                    h = self.height\n                else:\n                    h = 150\n                options = {\n                    'height': 150, \n                    'toolbar': [\n                        ['undo', ['undo']],\n                        ['redo', ['redo']],\n                        ['style', ['bold', 'italic', 'underline', 'clear']],\n                        ['color', ['color']],\n                        ['picture', ['picture']],\n                    ],                                        \n                    'codemirror': { 'theme': 'monokai'},\n                    'icons': {\n                        'align': 'fa fa-align-left',\n                        'alignCenter': 'note-icon-align-center',\n                        'alignJustify': 'note-icon-align-justify',\n                        'alignLeft': 'note-icon-align-left',\n                        'alignRight': 'note-icon-align-right',\n                        'rowBelow': 'note-icon-row-below',\n                        'colBefore': 'note-icon-col-before',\n                        'colAfter': 'note-icon-col-after',\n                        'rowAbove': 'note-icon-row-above',\n                        'rowRemove': 'note-icon-row-remove',\n                        'colRemove': 'note-icon-col-remove',\n                        'indent': 'note-icon-align-indent',\n                        'outdent': 'note-icon-align-outdent',\n                        'arrowsAlt': 'note-icon-arrows-alt',\n                        'bold': 'fa fa-bold',\n                        'caret': 'note-icon-caret',\n                        'circle': 'note-icon-circle',\n                        'close': 'note-icon-close',\n                        'code': 'note-icon-code',\n                        'eraser': 'fa fa-eraser',\n                        'font': 'fa fa-font',\n                        'frame': 'note-icon-frame',\n                        'italic': 'fa fa-italic',\n                        'link': 'note-icon-link',\n                        'unlink': 'note-icon-chain-broken',\n                        'magic': 'note-icon-magic',\n                        'menuCheck': 'note-icon-menu-check',\n                        'minus': 'note-icon-minus',\n                        'orderedlist': 'note-icon-orderedlist',\n                        'pencil': 'note-icon-pencil',\n                        'picture': 'fa fa-file-image-o',\n                        'question': 'note-icon-question',\n                        'redo': 'fa fa-repeat',\n                        'square': 'note-icon-square',\n                        'strikethrough': 'note-icon-strikethrough',\n                        'subscript': 'note-icon-subscript',\n                        'superscript': 'note-icon-superscript',\n                        'table': 'note-icon-table',\n                        'textHeight': 'note-icon-text-height',\n                        'trash': 'note-icon-trash',\n                        'underline': 'fa fa-underline',\n                        'undo': 'fa fa-undo',\n                        'unorderedlist': 'note-icon-unorderedlist',\n                        'video': 'note-icon-video'\n                    },\n                }                \n                ed.summernote(options)\n                value = decodeURIComponent(escape(atob(self.value)))\n                ed.summernote('code', value)\n                #ed.summernote('backColor', 'blue')\n                #color_button = jQuery(self.S__el).find('.note-current-color-button')\n                #color_button.data('value', { 'backColor': 'white' })\n                #recent_color = color_button.find('.note-recent-color')\n                #recent_color.css({'background-color': 'white'})\n                #color_button_dropdown = jQuery(self.S__el).find('div.note-color .dropdown-toggle')\n                #color_button_dropdown.removeClass('btn-light')\n                                \n                if window.hasOwnProperty('MOUNTED_COMPONENTS'):\n                    window.MOUNTED_COMPONENTS += 1\n\n            Vue.nextTick(_next)\n                            \n        methods = {}\n        \n        resolve({ 'props': props, 'template': TEMPLATE, 'mounted': mounted, 'data': data, 'methods': methods, })\n        \n    load_js(base_path + '/summernote-bs4.min.js', _on_loadjs)\n    load_css(base_path + '/summernote-bs4.css')\n    load_css(window.BASE_PATH + 'static/app/schcomponents/summernote_add.css')\n                    \nVue.component('wysiwyg_edit', _summertextarea)\n",
            null,
            "wysiwyg_edit",
            "R"
        ],
        [
            "div.note-editor\n    div.note-toolbar\n        div.note-color\n            div.dropdown-menu\n                min-width: 162px\n                //padding-bottom: 30px\n                div.note-palette:nth-child(1)\n                    visibility: hidden\n                    position: absolute\n\ndiv.note-popover\n    visibility: hidden\n    \ndiv.note-editor \n    button.close\n        position: absolute\n        right: 20px\n\n    .note-toolbar\n        background-color: whitesmoke\n\n    ",
            null,
            "summernote_add.sass",
            "U"
        ],
        [
            "__pragma__ ('alias', 'S', '$')\n__pragma__ ('noalias', 'default') \n\n\ndef _xterm(resolve, reject):\n    base_path = window.BASE_PATH + 'static/vanillajs_plugins/xterm'\n    def _on_loadjs():\n        props = ['width', 'height', 'x', 'y', 'href']\n        template = \"<div class = 'call_on_remove' name='xterm' v-bind:style='{ width: width, height: height}' ></div>\"\n        Terminal.applyAddon(fit)\n                \n        def mounted():                \n            self = this\n            def _next():\n                nonlocal self\n                \n                address = location.hostname \n                if location.port:\n                    address += \":\"+ location.port\n                address += self.href\n                                    \n                if location.protocol != 'https:':\n                    address = 'ws://' + address\n                else:\n                    address = 'wss://' + address\n                \n                websocket = __new__(WebSocket(address))\n                \n                term = __new__(Terminal())\n                term.open(self.S__el)              \n                term.setOption('fontFamily', 'monospace')\n                term.setOption('fontSize', 14)\n                term.setOption('lineHeight', 1.1)\n                self.term=term\n                                \n                def on_remove():\n                    nonlocal websocket\n                    \n                    def _on_close():\n                        nonlocal  websocket, term\n                        websocket = None\n                        term.dispose()\n                        term = None\n                            \n                    websocket.onclose = _on_close\n                    \n                    if websocket:\n                        websocket.close()\n                        websocket = None\n\n                self.S__el.on_remove = on_remove\n\n\n                def _on_websocket_open():\n                    nonlocal term, websocket\n                    \n                    def _fit_to_screen():\n                        nonlocal term, websocket\n                        term.fit()\n                        s = JSON.stringify({'resize': { 'cols': term.cols, 'rows': term.rows}})\n                        websocket.send(s)            \n                    \n                    def _on_key(key, ev): \n                        nonlocal websocket\n                        txt = JSON.stringify({ 'input': key })\n                        websocket.send(txt)\n                    \n                    def _on_message(evt):\n                        nonlocal term\n                        term.write(evt.data)\n                        \n                    term.on('key', _on_key)\n                    websocket.onmessage = _on_message\n                    jQuery(window).resize(_fit_to_screen)\n                    _fit_to_screen()\n\n                    if window.hasOwnProperty('MOUNTED_COMPONENTS'):\n                        window.MOUNTED_COMPONENTS += 1\n                                      \n                websocket.onopen  = _on_websocket_open\n            Vue.nextTick (_next)\n        resolve({ 'props': props, 'template': template, 'mounted': mounted, })\n\n    load_many_js(base_path + '/xterm.js'+ \";\" +  base_path + \"/fit.js\", _on_loadjs)\n    load_css(base_path + '/xterm.css')\n\nVue.component('sch-xterm', _xterm)\n",
            null,
            "xterm",
            "R"
        ]
    ]
]